export declare const wasmBlsSdkHelpers: any;
/**
 * @private
 * @returns {number}
 */
export declare function get_rng_values_size(): number;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_rng_value(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_sk_byte(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @returns {number}
 */
export declare function get_sk_byte(i: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_pk_byte(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @returns {number}
 */
export declare function get_pk_byte(i: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_sig_byte(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @returns {number}
 */
export declare function get_sig_byte(i: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_msg_byte(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @returns {number}
 */
export declare function get_msg_byte(i: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_ct_byte(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @returns {number}
 */
export declare function get_ct_byte(i: any): any;
/**
 * @private
 * @returns {number}
 */
export declare function get_rng_next_count(): number;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_poly_byte(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @returns {number}
 */
export declare function get_poly_byte(i: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_msk_byte(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @returns {number}
 */
export declare function get_msk_byte(i: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_mpk_byte(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @returns {number}
 */
export declare function get_mpk_byte(i: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_mc_byte(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @returns {number}
 */
export declare function get_mc_byte(i: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_skshare_byte(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @returns {number}
 */
export declare function get_skshare_byte(i: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_pkshare_byte(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @returns {number}
 */
export declare function get_pkshare_byte(i: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} from_node
 * @param {number} to_node
 * @param {number} v
 */
export declare function set_bivar_row_byte(i: any, from_node: any, to_node: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @param {number} from_node
 * @param {number} to_node
 * @returns {number}
 */
export declare function get_bivar_row_byte(i: any, from_node: any, to_node: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} from_node
 * @param {number} v
 */
export declare function set_bivar_commitments_byte(i: any, from_node: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @param {number} from_node
 * @returns {number}
 */
export declare function get_bivar_commitments_byte(i: any, from_node: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} node_index
 * @param {number} v
 */
export declare function set_bivar_sks_byte(i: any, node_index: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @param {number} node_index
 * @returns {number}
 */
export declare function get_bivar_sks_byte(i: any, node_index: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} node_index
 * @param {number} v
 */
export declare function set_bivar_pks_byte(i: any, node_index: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @param {number} node_index
 * @returns {number}
 */
export declare function get_bivar_pks_byte(i: any, node_index: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} sig_index
 * @param {number} v
 */
export declare function set_signature_share_byte(i: any, sig_index: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @param {number} sig_index
 * @returns {number}
 */
export declare function get_signature_share_byte(i: any, sig_index: any): any;
/**
 * @private
 * @param {number} i
 * @param {number} v
 */
export declare function set_share_indexes(i: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @returns {number}
 */
export declare function get_share_indexes(i: any): number;
/**
 * @private
 * @param {number} i
 * @param {number} share_index
 * @param {number} v
 */
export declare function set_decryption_shares_byte(i: any, share_index: any, v: any): void;
/**
 * @private
 * @param {number} i
 * @param {number} share_index
 * @returns {number}
 */
export declare function get_decryption_shares_byte(i: any, share_index: any): any;
/**
 * @private
 */
export declare function derive_pk_from_sk(): void;
/**
 * @private
 * @param {number} msg_size
 */
export declare function sign_msg(msg_size: any): void;
/**
 * @private
 * @param {number} msg_size
 * @returns {boolean}
 */
export declare function verify(msg_size: any): boolean;
/**
 * @private
 * @param {number} msg_size
 * @returns {number}
 */
export declare function encrypt(msg_size: any): number;
/**
 * @private
 * @param {number} ct_size
 * @returns {number}
 */
export declare function decrypt(ct_size: any): number;
/**
 * @private
 * @param {number} threshold
 */
export declare function generate_poly(threshold: any): void;
/**
 * @private
 * @param {number} poly_size
 * @returns {number}
 */
export declare function get_poly_degree(poly_size: any): number;
/**
 * @private
 * @param {number} mc_size
 * @returns {number}
 */
export declare function get_mc_degree(mc_size: any): number;
/**
 * @private
 * @param {number} poly_size
 */
export declare function derive_master_key(poly_size: any): void;
/**
 * @private
 * @param {number} i
 * @param {number} poly_size
 */
export declare function derive_key_share(i: any, poly_size: any): void;
/**
 * @private
 * @param {number} threshold
 * @param {number} total_nodes
 */
export declare function generate_bivars(threshold: any, total_nodes: any): void;
/**
 * @private
 * @param {number} total_signatures
 * @param {number} commitment_size
 */
export declare function combine_signature_shares(total_signatures: any, commitment_size: any): void;
/**
 * @private
 * @param {number} share_index
 * @param {number} ct_size
 * @returns {number}
 */
export declare function create_decryption_share(share_index: any, ct_size: any): number;
/**
 * @private
 * @param {number} total_decryption_shares
 * @param {number} commitment_size
 * @param {number} ct_size
 * @returns {number}
 */
export declare function combine_decryption_shares(total_decryption_shares: any, commitment_size: any, ct_size: any): number;
declare function init(input: any): Promise<WebAssembly.Exports>;
export default init;
export declare function initWasmBlsSdk(): Promise<WebAssembly.Exports>;
