import { AccsCOSMOSParams, AccsDefaultParams, AccsEVMParams, AccsOperatorParams, AccsRegularParams, AccsSOLV2Params, JsonEncryptionRetrieveRequest, JsonExecutionRequest, JsonSignChainDataRequest, JsonSigningRetrieveRequest } from './interfaces';
export declare type AccessControlConditions = AccsRegularParams[] | AccsDefaultParams[];
export declare type EvmContractConditions = AccsEVMParams[];
export declare type SolRpcConditions = AccsSOLV2Params[];
export declare type UnifiedAccessControlConditions = (AccsRegularParams | AccsDefaultParams | AccsEVMParams | AccsSOLV2Params | AccsCOSMOSParams | AccsOperatorParams)[];
export declare type JsonRequest = JsonExecutionRequest | JsonSignChainDataRequest;
export declare type SupportedJsonRequests = JsonSigningRetrieveRequest | JsonEncryptionRetrieveRequest;
export declare type Chain = string;
/**
 *
 * The default required properties of all chains
 *
 * @typedef { Object } LITChainRequiredProps
 */
export declare type LITChainRequiredProps = {
    name: string;
    symbol: string;
    decimals: number;
    rpcUrls: Array<String>;
    blockExplorerUrls: Array<String>;
    vmType: string;
};
/**
 * @typedef { Object } LITEVMChain
 * @property { string } contractAddress - The address of the token contract for the optional predeployed ERC1155 contract.  Only present on EVM chains.
 * @property { string } chainId - The chain ID of the chain that this token contract is deployed on.  Used for EVM chains.
 * @property { string } name - The human readable name of the chain
 */
export declare type LITEVMChain = LITChainRequiredProps & {
    contractAddress: string | null;
    chainId: number;
    type: string | null;
};
/**
 * @typedef { Object } LITSVMChain
 */
export declare type LITSVMChain = LITChainRequiredProps;
/**
 * @typedef { Object } LITCosmosChain
 * @property {string} chainId - The chain ID of the chain that this token contract is deployed on.  Used for Cosmos chains.
 */
export declare type LITCosmosChain = LITChainRequiredProps & {
    chainId: string;
};
/**
 * @typedef {Object} LITChain
 * @property {string} vmType - Either EVM for an Ethereum compatible chain or SVM for a Solana compatible chain
 * @property {string} name - The human readable name of the chain
 */
export declare type LITChain<T> = {
    [chainName: string]: T;
};
export declare type LIT_NETWORKS_KEYS = 'jalapeno' | 'serrano' | 'localhost' | 'custom';
export declare type ConditionType = 'solRpc' | 'evmBasic' | 'evmContract' | 'cosmos';
export declare type ConditionItem = AccsOperatorParams | AccsRegularParams | AccsDefaultParams | AccsSOLV2Params;
