import { SigShare } from '@lit-protocol/constants';
/** ---------- Exports ---------- */
/**
 *
 * Generate a new random symmetric key using WebCrypto subtle API.  You should only use this if you're handling your own key generation and management with Lit.  Typically, Lit handles this internally for you.
 *
 * @returns { Promise<CryptoKey> } A promise that resolves to the generated key
 */
export declare const generateSymmetricKey: () => Promise<CryptoKey>;
/**
 *
 * Encrypt a blob with a symmetric key
 *
 * @param { CryptoKey } symmKey The symmetric key
 * @param { BufferSource | Uint8Array } data The blob to encrypt
 *
 * @returns { Promise<Blob> } The encrypted blob
 */
export declare const encryptWithSymmetricKey: (symmKey: CryptoKey, data: BufferSource | Uint8Array) => Promise<Blob>;
/**
 *
 * Import a symmetric key from a Uint8Array to a webcrypto key.  You should only use this if you're handling your own key generation and management with Lit.  Typically, Lit handles this internally for you.
 *
 * @param { Uint8Array } symmKey The symmetric key to import
 *
 * @returns { Promise<CryptoKey> } A promise that resolves to the imported key
 */
export declare const importSymmetricKey: (symmKey: BufferSource | Uint8Array) => Promise<CryptoKey>;
/**
 *
 * Decrypt an encrypted blob with a symmetric key.  Uses AES-CBC via SubtleCrypto
 *
 * @param { Blob } encryptedBlob The encrypted blob that should be decrypted
 * @param { CryptoKey } symmKey The symmetric key
 *
 * @returns { Uint8Array } The decrypted blob
 */
export declare const decryptWithSymmetricKey: (encryptedBlob: Blob, symmKey: CryptoKey) => Promise<Uint8Array>;
/**
 *
 * Combine BLS Shares
 *
 * @param { Array<SigShare> } sigSharesWithEverything
 * @param { string } networkPubKeySet
 *
 * @returns { any }
 *
 */
export declare const combineBlsShares: (sigSharesWithEverything: Array<SigShare>, networkPubKeySet: string) => any;
/**
 *
 * Combine ECDSA Shares
 *
 * @param { SigShares | Array<SigShare> } sigShares
 *
 * @returns { any }
 *
 */
export declare const combineEcdsaShares: (sigShares: Array<SigShare>) => any;
/**
 * //TODO: Fix 'any' types
 * Combine BLS Decryption Shares
 *
 * @param { Array<any> } decryptionShares
 * @param { string } networkPubKeySet
 * @param { string } toDecrypt
 * @param { any } provider
 *
 * @returns { any }
 *
 */
export declare const combineBlsDecryptionShares: (decryptionShares: Array<any>, networkPubKeySet: string, toDecrypt: string) => any;
/**
 *
 * Generate a session key pair
 *
 * @returns { SessionKeyPair } sessionKeyPair
 */
export declare const generateSessionKeyPair: () => SessionKeyPair;
