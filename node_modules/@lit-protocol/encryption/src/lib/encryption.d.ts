import { DecryptFileProps, DecryptZipFileWithMetadata, DecryptZipFileWithMetadataProps, EncryptedFile, EncryptedString, EncryptedZip, EncryptFileAndZipWithMetadataProps, IJWT, ThreeKeys, VerifyJWTProps } from '@lit-protocol/types';
import * as JSZip from 'jszip/dist/jszip.js';
/**
 *
 * Encrypt a string.  This is used to encrypt any string that is to be locked via the Lit Protocol.
 *
 * @param { string } str The string to encrypt
 * @returns { Promise<Object> } A promise containing the encryptedString as a Blob and the symmetricKey used to encrypt it, as a Uint8Array.
 */
export declare const encryptString: (str: string) => Promise<EncryptedString>;
/**
 *
 * Decrypt a string that was encrypted with the encryptString function.
 *
 * @param { Blob|File } encryptedStringBlob The encrypted string as a Blob
 * @param { Uint8Array } symmKey The symmetric key used that will be used to decrypt this.
 *
 * @returns { Promise<string> } A promise containing the decrypted string
 */
export declare const decryptString: (encryptedStringBlob: Blob, symmKey: Uint8Array) => Promise<string>;
/**
 *
 * Zip and encrypt a string.  This is used to encrypt any string that is to be locked via the Lit Protocol.
 *
 * @param { string } string The string to zip and encrypt
 *
 * @returns { Promise<Object> } A promise containing the encryptedZip as a Blob and the symmetricKey used to encrypt it, as a Uint8Array.  The encrypted zip will contain a single file called "string.txt"
 */
export declare const zipAndEncryptString: (string: string) => Promise<EncryptedZip>;
/**
 *
 * Zip and encrypt multiple files.
 *
 * @param { Array<File> } files An array of the files you wish to zip and encrypt
 *
 * @returns {Promise<Object>} A promise containing the encryptedZip as a Blob and the symmetricKey used to encrypt it, as a Uint8Array.  The encrypted zip will contain a folder "encryptedAssets" and all of the files will be inside it.
 
*/
export declare const zipAndEncryptFiles: (files: Array<File>) => Promise<EncryptedZip>;
/**
 *
 * Decrypt and unzip a zip that was created using encryptZip, zipAndEncryptString, or zipAndEncryptFiles.
 *
 * @param { Blob|File } encryptedZipBlob The encrypted zip as a Blob
 * @param { Uint8Array } symmKey The symmetric key used that will be used to decrypt this zip.
 *
 * @returns { Promise<Object> } A promise containing a JSZip object indexed by the filenames of the zipped files.  For example, if you have a file called "meow.jpg" in the root of your zip, you could get it from the JSZip object by doing this: const imageBlob = await decryptedZip['meow.jpg'].async('blob')
 */
export declare const decryptZip: (encryptedZipBlob: Blob | File, symmKey: Uint8Array) => Promise<{
    [key: string]: JSZip.JSZipObject;
} | undefined>;
/**
 *
 * Encrypt a zip file created with JSZip using a new random symmetric key via WebCrypto.
 *
 * @param { JSZip } zip The JSZip instance to encrypt
 *
 * @returns { Promise<Object> } A promise containing the encryptedZip as a Blob and the symmetricKey used to encrypt it, as a Uint8Array string.
 */
export declare const encryptZip: (zip: JSZip) => Promise<EncryptedZip>;
/**
 *
 * Encrypt a single file, save the key to the Lit network, and then zip it up with the metadata.
 *
 * @param { EncryptFileAndZipWithMetadataProps }
 *
 * @returns { Promise<ThreeKeys | undefined> }
 *
 */
export declare const encryptFileAndZipWithMetadata: ({ authSig, accessControlConditions, evmContractConditions, solRpcConditions, unifiedAccessControlConditions, chain, file, litNodeClient, readme, }: EncryptFileAndZipWithMetadataProps) => Promise<ThreeKeys | undefined>;
/**
 *
 * Given a zip file with metadata inside it, unzip, load the metadata, and return the decrypted file and the metadata.  This zip file would have been created with the encryptFileAndZipWithMetadata function.
 *
 * @param { DecryptZipFileWithMetadataProps }
 *
 * @returns { Promise<DecryptZipFileWithMetadata> } A promise containing an object that contains decryptedFile and metadata properties.  The decryptedFile is an ArrayBuffer that is ready to use, and metadata is an object that contains all the properties of the file like it's name and size and type.
 */
export declare const decryptZipFileWithMetadata: ({ authSig, file, litNodeClient, additionalAccessControlConditions, }: DecryptZipFileWithMetadataProps) => Promise<DecryptZipFileWithMetadata | undefined>;
/**
 *
 * Encrypt a file without doing any zipping or packing.  This is useful for large files.  A 1gb file can be encrypted in only 2 seconds, for example.  A new random symmetric key will be created and returned along with the encrypted file.
 *
 * @param { Object } params
 * @param { Blob|File } params.file The file you wish to encrypt
 *
 * @returns { Promise<Object> } A promise containing an object with keys encryptedFile and symmetricKey.  encryptedFile is a Blob, and symmetricKey is a Uint8Array that can be used to decrypt the file.
 */
export declare const encryptFile: ({ file }: {
    file: File | Blob;
}) => Promise<EncryptedFile | undefined>;
/**
 *
 * Decrypt a file that was encrypted with the encryptFile function, without doing any unzipping or unpacking.  This is useful for large files.  A 1gb file can be decrypted in only 1 second, for example.
 *
 * @property { Object } params
 * @property { Blob | File } params.file The file you wish to decrypt
 * @property { Uint8Array } params.symmetricKey The symmetric key used that will be used to decrypt this.
 *
 * @returns { Promise<Object> } A promise containing the decrypted file.  The file is an ArrayBuffer.
 */
export declare const decryptFile: ({ file, symmetricKey, }: DecryptFileProps) => Promise<Uint8Array | undefined>;
declare global {
    var wasmExports: any;
    var wasmECDSA: any;
    var LitNodeClient: any;
}
/**
 * // TODO check for expiration
 *
 * Verify a JWT from the LIT network.  Use this for auth on your server.  For some background, users can define resources (URLs) for authorization via on-chain conditions using the saveSigningCondition function.  Other users can then request a signed JWT proving that their ETH account meets those on-chain conditions using the getSignedToken function.  Then, servers can verify that JWT using this function.  A successful verification proves that the user meets the on-chain conditions defined in the saveSigningCondition step.  For example, the on-chain condition could be posession of a specific NFT.
 *
 * @param { VerifyJWTProps } jwt
 *
 * @returns { IJWT } An object with 4 keys: "verified": A boolean that represents whether or not the token verifies successfully.  A true result indicates that the token was successfully verified.  "header": the JWT header.  "payload": the JWT payload which includes the resource being authorized, etc.  "signature": A uint8array that represents the raw  signature of the JWT.
 */
export declare const verifyJwt: ({ jwt }: VerifyJWTProps) => IJWT | undefined;
