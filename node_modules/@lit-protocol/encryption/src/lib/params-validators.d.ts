/**
 * Param Validators is an abstraction of validating params of a function, each validator
 * returns a boolean value indicating whether the validation is passed or not.
 */
import { DecryptFileProps, JsonEncryptionRetrieveRequest, JsonSaveEncryptionKeyRequest, DecryptZipFileWithMetadataProps, EncryptFileAndZipWithMetadataProps, ExecuteJsProps } from '@lit-protocol/types';
export declare const safeParams: ({ functionName, params, }: {
    functionName: string;
    params: any[] | any;
}) => any;
export declare const paramsValidators: {
    executeJs: (params: ExecuteJsProps) => boolean;
    saveEncryptionKey: (params: JsonSaveEncryptionKeyRequest) => boolean;
    getEncryptionKey: (params: JsonEncryptionRetrieveRequest) => boolean | undefined;
    decryptString: (params: any) => boolean;
    decryptFile: (params: DecryptFileProps) => boolean;
    decryptZipFileWithMetadata: (params: DecryptZipFileWithMetadataProps) => boolean;
    decryptZip: (params: any) => boolean;
    encryptFileAndZipWithMetadata: (params: EncryptFileAndZipWithMetadataProps) => boolean;
};
export declare type ParamsValidatorsType = typeof paramsValidators;
