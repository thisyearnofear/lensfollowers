"use strict";
/**
 * Param Validators is an abstraction of validating params of a function, each validator
 * returns a boolean value indicating whether the validation is passed or not.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.paramsValidators = exports.safeParams = void 0;
const constants_1 = require("@lit-protocol/constants");
const misc_1 = require("@lit-protocol/misc");
const safeParams = ({ functionName, params, }) => {
    const validators = exports.paramsValidators;
    const validator = validators[functionName](params);
    if (!validator) {
        (0, misc_1.log)(`This function ${functionName} is skipping params safe guarding.`);
        return true;
    }
    return validator;
};
exports.safeParams = safeParams;
exports.paramsValidators = {
    executeJs: (params) => {
        // -- prepare params
        const { code, ipfsId, authSig, jsParams, debug, sessionSigs } = params;
        // -- validate: either 'code' or 'ipfsId' must exists
        if (!code && !ipfsId) {
            const message = 'You must pass either code or ipfsId';
            (0, misc_1.throwError)({ message, error: constants_1.LIT_ERROR.PARAMS_MISSING_ERROR });
            return false;
        }
        // -- validate: 'code' and 'ipfsId' can't exists at the same time
        if (code && ipfsId) {
            const message = "You cannot have both 'code' and 'ipfs' at the same time";
            (0, misc_1.throwError)({ message, error: constants_1.LIT_ERROR.INVALID_PARAM_TYPE });
            return false;
        }
        // -- validate: authSig and its type is correct
        if (authSig &&
            !(0, misc_1.checkType)({
                value: authSig,
                allowedTypes: ['Object'],
                paramName: 'authSig',
                functionName: 'executeJs',
            }))
            return false;
        // -- validate: if sessionSig and authSig exists
        if (!sessionSigs && !authSig) {
            (0, misc_1.throwError)({
                message: 'You must pass either authSig or sessionSigs',
                name: 'InvalidArgumentException',
                errorCode: 'invalid_argument',
            });
            return false;
        }
        return true;
    },
    saveEncryptionKey: (params) => {
        // -- prepare params
        const { accessControlConditions, evmContractConditions, solRpcConditions, unifiedAccessControlConditions, authSig, chain, symmetricKey, encryptedSymmetricKey, permanant, permanent, } = params;
        if (accessControlConditions &&
            !(0, misc_1.is)(accessControlConditions, 'Array', 'accessControlConditions', 'saveEncryptionKey'))
            return false;
        if (evmContractConditions &&
            !(0, misc_1.is)(evmContractConditions, 'Array', 'evmContractConditions', 'saveEncryptionKey'))
            return false;
        if (solRpcConditions &&
            !(0, misc_1.is)(solRpcConditions, 'Array', 'solRpcConditions', 'saveEncryptionKey'))
            return false;
        if (unifiedAccessControlConditions &&
            !(0, misc_1.is)(unifiedAccessControlConditions, 'Array', 'unifiedAccessControlConditions', 'saveEncryptionKey'))
            return false;
        (0, misc_1.log)('authSig:', authSig);
        if (!(0, misc_1.is)(authSig, 'Object', 'authSig', 'saveEncryptionKey'))
            return false;
        if (!(0, misc_1.checkIfAuthSigRequiresChainParam)(authSig, chain, 'saveEncryptionKey'))
            return false;
        if (symmetricKey &&
            !(0, misc_1.is)(symmetricKey, 'Uint8Array', 'symmetricKey', 'saveEncryptionKey'))
            return false;
        if (encryptedSymmetricKey &&
            !(0, misc_1.is)(encryptedSymmetricKey, 'Uint8Array', 'encryptedSymmetricKey', 'saveEncryptionKey'))
            return false;
        // to fix spelling mistake
        if (typeof params.permanant !== 'undefined') {
            params.permanent = params.permanant;
        }
        if ((!symmetricKey || symmetricKey == '') &&
            (!encryptedSymmetricKey || encryptedSymmetricKey == '')) {
            throw new Error('symmetricKey and encryptedSymmetricKey are blank.  You must pass one or the other');
        }
        if (!accessControlConditions &&
            !evmContractConditions &&
            !solRpcConditions &&
            !unifiedAccessControlConditions) {
            throw new Error('accessControlConditions and evmContractConditions and solRpcConditions and unifiedAccessControlConditions are blank');
        }
        if (!authSig) {
            throw new Error('authSig is blank');
        }
        //   -- case: success
        return true;
    },
    getEncryptionKey: (params) => {
        const { accessControlConditions, evmContractConditions, solRpcConditions, unifiedAccessControlConditions, toDecrypt, authSig, chain, } = params;
        // -- validate
        if (accessControlConditions &&
            !(0, misc_1.is)(accessControlConditions, 'Array', 'accessControlConditions', 'getEncryptionKey'))
            return false;
        if (evmContractConditions &&
            !(0, misc_1.is)(evmContractConditions, 'Array', 'evmContractConditions', 'getEncryptionKey'))
            return false;
        if (solRpcConditions &&
            !(0, misc_1.is)(solRpcConditions, 'Array', 'solRpcConditions', 'getEncryptionKey'))
            return false;
        if (unifiedAccessControlConditions &&
            !(0, misc_1.is)(unifiedAccessControlConditions, 'Array', 'unifiedAccessControlConditions', 'getEncryptionKey'))
            return false;
        (0, misc_1.log)('TYPEOF:', typeof toDecrypt);
        if (!(0, misc_1.is)(toDecrypt, 'String', 'toDecrypt', 'getEncryptionKey'))
            return false;
        if (!(0, misc_1.is)(authSig, 'Object', 'authSig', 'getEncryptionKey'))
            return false;
        // -- validate if 'chain' is null
        if (!chain) {
            return false;
        }
        if (!authSig) {
            return;
        }
        if (!(0, misc_1.checkIfAuthSigRequiresChainParam)(authSig, chain, 'getEncryptionKey'))
            return false;
        return true;
    },
    decryptString: (params) => {
        const encryptedStringBlob = params[0];
        const symmKey = params[1];
        // -- validate
        if (!(0, misc_1.checkType)({
            value: encryptedStringBlob,
            allowedTypes: ['Blob', 'File'],
            paramName: 'encryptedStringBlob',
            functionName: 'decryptString',
        }))
            return false;
        if (!(0, misc_1.checkType)({
            value: symmKey,
            allowedTypes: ['Uint8Array'],
            paramName: 'symmKey',
            functionName: 'decryptString',
        }))
            return false;
        // -- success
        return true;
    },
    decryptFile: (params) => {
        // -- validate
        if (!(0, misc_1.checkType)({
            value: params.file,
            allowedTypes: ['Blob', 'File'],
            paramName: 'file',
            functionName: 'decryptFile',
        }))
            return false;
        // -- validate
        if (!(0, misc_1.checkType)({
            value: params.symmetricKey,
            allowedTypes: ['Uint8Array'],
            paramName: 'symmetricKey',
            functionName: 'decryptFile',
        }))
            return false;
        return true;
    },
    decryptZipFileWithMetadata: (params) => {
        // -- validate
        if (!(0, misc_1.checkType)({
            value: params.authSig,
            allowedTypes: ['Object'],
            paramName: 'authSig',
            functionName: 'decryptZipFileWithMetadata',
        }))
            return false;
        // -- validate
        if (!(0, misc_1.checkType)({
            value: params.file,
            allowedTypes: ['Blob', 'File'],
            paramName: 'file',
            functionName: 'decryptZipFileWithMetadata',
        }))
            return false;
        // -- success case
        return true;
    },
    decryptZip: (params) => {
        const { encryptedZipBlob, symmKey } = params;
        (0, misc_1.log)('encryptedZipBlob:', encryptedZipBlob);
        // -- validate
        if (!(0, misc_1.checkType)({
            value: encryptedZipBlob,
            allowedTypes: ['Blob', 'File'],
            paramName: 'encryptedZipBlob',
            functionName: 'decryptZip',
        }))
            return false;
        // -- validate
        if (!(0, misc_1.checkType)({
            value: symmKey,
            allowedTypes: ['Uint8Array'],
            paramName: 'symmKey',
            functionName: 'decryptZip',
        }))
            return false;
        return true;
    },
    encryptFileAndZipWithMetadata: (params) => {
        // -- validate
        (0, misc_1.log)('params:', params);
        if (!(0, misc_1.checkType)({
            value: params.authSig,
            allowedTypes: ['Object'],
            paramName: 'authSig',
            functionName: 'encryptFileAndZipWithMetadata',
        }))
            return false;
        // -- validate
        if (params.accessControlConditions &&
            !(0, misc_1.checkType)({
                value: params.accessControlConditions,
                allowedTypes: ['Array'],
                paramName: 'accessControlConditions',
                functionName: 'encryptFileAndZipWithMetadata',
            }))
            return false;
        // -- validate
        if (params.evmContractConditions &&
            !(0, misc_1.checkType)({
                value: params.evmContractConditions,
                allowedTypes: ['Array'],
                paramName: 'evmContractConditions',
                functionName: 'encryptFileAndZipWithMetadata',
            }))
            return false;
        // -- validate
        if (params.solRpcConditions &&
            !(0, misc_1.checkType)({
                value: params.solRpcConditions,
                allowedTypes: ['Array'],
                paramName: 'solRpcConditions',
                functionName: 'encryptFileAndZipWithMetadata',
            }))
            return false;
        // -- validate
        if (params.unifiedAccessControlConditions &&
            !(0, misc_1.checkType)({
                value: params.unifiedAccessControlConditions,
                allowedTypes: ['Array'],
                paramName: 'unifiedAccessControlConditions',
                functionName: 'encryptFileAndZipWithMetadata',
            }))
            return false;
        // -- validate
        if (!(0, misc_1.checkIfAuthSigRequiresChainParam)(params.authSig, params.chain, 'encryptFileAndZipWithMetadata'))
            return false;
        // -- validate
        if (!(0, misc_1.checkType)({
            value: params.file,
            allowedTypes: ['File'],
            paramName: 'file',
            functionName: 'encryptFileAndZipWithMetadata',
        }))
            return false;
        // -- validate
        if (params.readme &&
            !(0, misc_1.checkType)({
                value: params.readme,
                allowedTypes: ['String'],
                paramName: 'readme',
                functionName: 'encryptFileAndZipWithMetadata',
            }))
            return false;
        // -- success case
        return true;
    },
};
//# sourceMappingURL=params-validators.js.map