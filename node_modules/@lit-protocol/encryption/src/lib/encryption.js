"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyJwt = exports.decryptFile = exports.encryptFile = exports.decryptZipFileWithMetadata = exports.encryptFileAndZipWithMetadata = exports.encryptZip = exports.decryptZip = exports.zipAndEncryptFiles = exports.zipAndEncryptString = exports.decryptString = exports.encryptString = void 0;
const constants_1 = require("@lit-protocol/constants");
const bls_sdk_1 = require("@lit-protocol/bls-sdk");
// @ts-ignore
const JSZip = require("jszip/dist/jszip.js");
const uint8arrays_1 = require("@lit-protocol/uint8arrays");
const crypto_1 = require("@lit-protocol/crypto");
const misc_1 = require("@lit-protocol/misc");
const params_validators_1 = require("./params-validators");
// ---------- Local Helpers ----------
/**
 *
 * Get all the metadata needed to decrypt something in the future.  If you're encrypting files with Lit and storing them in IPFS or Arweave, then this function will provide you with a properly formatted metadata object that you should save alongside the files.
 *
 * @param { MetadataForFile }
 *
 * @return { MetadataForFile }
 *
 */
const metadataForFile = ({ name, type, size, accessControlConditions, evmContractConditions, solRpcConditions, unifiedAccessControlConditions, chain, encryptedSymmetricKey, }) => {
    return {
        name,
        type,
        size,
        accessControlConditions,
        evmContractConditions,
        solRpcConditions,
        unifiedAccessControlConditions,
        chain,
        encryptedSymmetricKey: (0, uint8arrays_1.uint8arrayToString)(encryptedSymmetricKey, 'base16'),
    };
};
// ---------- Local Helpers ----------
/**
 *
 * Encrypt a string.  This is used to encrypt any string that is to be locked via the Lit Protocol.
 *
 * @param { string } str The string to encrypt
 * @returns { Promise<Object> } A promise containing the encryptedString as a Blob and the symmetricKey used to encrypt it, as a Uint8Array.
 */
const encryptString = async (str) => {
    // -- validate
    if (!(0, misc_1.checkType)({
        value: str,
        allowedTypes: ['String'],
        paramName: 'str',
        functionName: 'encryptString',
    })) {
        (0, misc_1.throwError)({
            message: `{${str}} must be a string`,
            error: constants_1.LIT_ERROR.INVALID_PARAM_TYPE,
        });
        throw new Error(`{${str}} must be a string`);
    }
    // -- prepare
    const encodedString = (0, uint8arrays_1.uint8arrayFromString)(str, 'utf8');
    const symmKey = await (0, crypto_1.generateSymmetricKey)();
    const encryptedString = await (0, crypto_1.encryptWithSymmetricKey)(symmKey, encodedString.buffer);
    const exportedSymmKey = new Uint8Array(await crypto.subtle.exportKey('raw', symmKey));
    return {
        symmetricKey: exportedSymmKey,
        encryptedString,
        encryptedData: encryptedString,
    };
};
exports.encryptString = encryptString;
/**
 *
 * Decrypt a string that was encrypted with the encryptString function.
 *
 * @param { Blob|File } encryptedStringBlob The encrypted string as a Blob
 * @param { Uint8Array } symmKey The symmetric key used that will be used to decrypt this.
 *
 * @returns { Promise<string> } A promise containing the decrypted string
 */
const decryptString = async (encryptedStringBlob, symmKey) => {
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'decryptString',
        params: [encryptedStringBlob, symmKey],
    });
    if (!paramsIsSafe) {
        (0, misc_1.throwError)({
            message: 'Invalid params',
            error: constants_1.LIT_ERROR.INVALID_PARAM_TYPE,
        });
    }
    // -- import the decrypted symm key
    const importedSymmKey = await (0, crypto_1.importSymmetricKey)(symmKey);
    const decryptedStringArrayBuffer = await (0, crypto_1.decryptWithSymmetricKey)(encryptedStringBlob, importedSymmKey);
    return (0, uint8arrays_1.uint8arrayToString)(new Uint8Array(decryptedStringArrayBuffer), 'utf8');
};
exports.decryptString = decryptString;
/**
 *
 * Zip and encrypt a string.  This is used to encrypt any string that is to be locked via the Lit Protocol.
 *
 * @param { string } string The string to zip and encrypt
 *
 * @returns { Promise<Object> } A promise containing the encryptedZip as a Blob and the symmetricKey used to encrypt it, as a Uint8Array.  The encrypted zip will contain a single file called "string.txt"
 */
const zipAndEncryptString = async (string) => {
    // -- validate
    if (!(0, misc_1.checkType)({
        value: string,
        allowedTypes: ['String'],
        paramName: 'string',
        functionName: 'zipAndEncryptString',
    }))
        (0, misc_1.throwError)({
            message: 'Invalid string',
            error: constants_1.LIT_ERROR.INVALID_PARAM_TYPE,
        });
    let zip;
    try {
        zip = new JSZip.default();
    }
    catch (e) {
        zip = new JSZip();
    }
    zip.file('string.txt', string);
    return (0, exports.encryptZip)(zip);
};
exports.zipAndEncryptString = zipAndEncryptString;
/**
 *
 * Zip and encrypt multiple files.
 *
 * @param { Array<File> } files An array of the files you wish to zip and encrypt
 *
 * @returns {Promise<Object>} A promise containing the encryptedZip as a Blob and the symmetricKey used to encrypt it, as a Uint8Array.  The encrypted zip will contain a folder "encryptedAssets" and all of the files will be inside it.
 
*/
const zipAndEncryptFiles = async (files) => {
    // let's zip em
    let zip;
    try {
        zip = new JSZip.default();
    }
    catch (e) {
        zip = new JSZip();
    }
    // -- zip each file
    for (let i = 0; i < files.length; i++) {
        // -- validate
        if (!(0, misc_1.checkType)({
            value: files[i],
            allowedTypes: ['File'],
            paramName: `files[${i}]`,
            functionName: 'zipAndEncryptFiles',
        }))
            (0, misc_1.throwError)({
                message: 'Invalid file type',
                error: constants_1.LIT_ERROR.INVALID_PARAM_TYPE,
            });
        const folder = zip.folder('encryptedAssets');
        if (!folder) {
            (0, misc_1.log)("Failed to get 'encryptedAssets' from zip.folder() ");
            return (0, misc_1.throwError)({
                message: "Failed to get 'encryptedAssets' from zip.folder() ",
                error: constants_1.LIT_ERROR.UNKNOWN_ERROR,
            });
        }
        folder.file(files[i].name, files[i]);
    }
    return (0, exports.encryptZip)(zip);
};
exports.zipAndEncryptFiles = zipAndEncryptFiles;
/**
 *
 * Decrypt and unzip a zip that was created using encryptZip, zipAndEncryptString, or zipAndEncryptFiles.
 *
 * @param { Blob|File } encryptedZipBlob The encrypted zip as a Blob
 * @param { Uint8Array } symmKey The symmetric key used that will be used to decrypt this zip.
 *
 * @returns { Promise<Object> } A promise containing a JSZip object indexed by the filenames of the zipped files.  For example, if you have a file called "meow.jpg" in the root of your zip, you could get it from the JSZip object by doing this: const imageBlob = await decryptedZip['meow.jpg'].async('blob')
 */
const decryptZip = async (encryptedZipBlob, symmKey) => {
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'decryptZip',
        params: {
            encryptedZipBlob,
            symmKey,
        },
    });
    if (!paramsIsSafe)
        return;
    // import the decrypted symm key
    const importedSymmKey = await (0, crypto_1.importSymmetricKey)(symmKey);
    const decryptedZipArrayBuffer = await (0, crypto_1.decryptWithSymmetricKey)(encryptedZipBlob, importedSymmKey);
    // unpack the zip
    let zip;
    try {
        zip = new JSZip.default();
    }
    catch (e) {
        zip = new JSZip();
    }
    const unzipped = await zip.loadAsync(decryptedZipArrayBuffer);
    return unzipped.files;
};
exports.decryptZip = decryptZip;
/**
 *
 * Encrypt a zip file created with JSZip using a new random symmetric key via WebCrypto.
 *
 * @param { JSZip } zip The JSZip instance to encrypt
 *
 * @returns { Promise<Object> } A promise containing the encryptedZip as a Blob and the symmetricKey used to encrypt it, as a Uint8Array string.
 */
const encryptZip = async (zip) => {
    let zipBlob;
    let zipBlobArrayBuffer;
    if ((0, misc_1.isBrowser)()) {
        zipBlob = await zip.generateAsync({ type: 'blob' });
        zipBlobArrayBuffer = await zipBlob.arrayBuffer();
    }
    else {
        zipBlobArrayBuffer = await zip.generateAsync({ type: 'nodebuffer' });
    }
    const symmKey = await (0, crypto_1.generateSymmetricKey)();
    const encryptedZipBlob = await (0, crypto_1.encryptWithSymmetricKey)(symmKey, zipBlobArrayBuffer);
    // to download the encrypted zip file for testing, uncomment this
    // saveAs(encryptedZipBlob, 'encrypted.bin')
    const exportedSymmKey = new Uint8Array(await crypto.subtle.exportKey('raw', symmKey));
    const encryptedZip = {
        symmetricKey: exportedSymmKey,
        encryptedZip: encryptedZipBlob,
    };
    return encryptedZip;
};
exports.encryptZip = encryptZip;
/**
 *
 * Encrypt a single file, save the key to the Lit network, and then zip it up with the metadata.
 *
 * @param { EncryptFileAndZipWithMetadataProps }
 *
 * @returns { Promise<ThreeKeys | undefined> }
 *
 */
const encryptFileAndZipWithMetadata = async ({ authSig, accessControlConditions, evmContractConditions, solRpcConditions, unifiedAccessControlConditions, chain, file, litNodeClient, readme, }) => {
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'encryptFileAndZipWithMetadata',
        params: {
            authSig,
            accessControlConditions,
            evmContractConditions,
            solRpcConditions,
            unifiedAccessControlConditions,
            chain,
            file,
            litNodeClient,
            readme,
        },
    });
    if (!paramsIsSafe)
        return;
    // -- validate
    const symmetricKey = await (0, crypto_1.generateSymmetricKey)();
    const exportedSymmKey = new Uint8Array(await crypto.subtle.exportKey('raw', symmetricKey));
    // log('exportedSymmKey in hex', uint8arrayToString(exportedSymmKey, 'base16'))
    const encryptedSymmetricKey = await litNodeClient.saveEncryptionKey({
        accessControlConditions,
        evmContractConditions,
        solRpcConditions,
        unifiedAccessControlConditions,
        symmetricKey: exportedSymmKey,
        authSig,
        chain,
    });
    (0, misc_1.log)('encrypted key saved to Lit', encryptedSymmetricKey);
    // encrypt the file
    var fileAsArrayBuffer = await file.arrayBuffer();
    const encryptedZipBlob = await (0, crypto_1.encryptWithSymmetricKey)(symmetricKey, fileAsArrayBuffer);
    let zip;
    try {
        zip = new JSZip.default();
    }
    catch (e) {
        zip = new JSZip();
    }
    const metadata = metadataForFile({
        name: file.name,
        type: file.type,
        size: file.size,
        encryptedSymmetricKey,
        accessControlConditions,
        evmContractConditions,
        solRpcConditions,
        unifiedAccessControlConditions,
        chain,
    });
    zip.file('lit_protocol_metadata.json', JSON.stringify(metadata));
    if (readme) {
        zip.file('readme.txt', readme);
    }
    const folder = zip.folder('encryptedAssets');
    if (!folder) {
        (0, misc_1.log)("Failed to get 'encryptedAssets' from zip.folder() ");
        return;
    }
    folder.file(file.name, encryptedZipBlob);
    const zipBlob = await zip.generateAsync({ type: 'blob' });
    const threeKeys = {
        zipBlob,
        encryptedSymmetricKey,
        symmetricKey: exportedSymmKey,
    };
    return threeKeys;
};
exports.encryptFileAndZipWithMetadata = encryptFileAndZipWithMetadata;
/**
 *
 * Given a zip file with metadata inside it, unzip, load the metadata, and return the decrypted file and the metadata.  This zip file would have been created with the encryptFileAndZipWithMetadata function.
 *
 * @param { DecryptZipFileWithMetadataProps }
 *
 * @returns { Promise<DecryptZipFileWithMetadata> } A promise containing an object that contains decryptedFile and metadata properties.  The decryptedFile is an ArrayBuffer that is ready to use, and metadata is an object that contains all the properties of the file like it's name and size and type.
 */
const decryptZipFileWithMetadata = async ({ authSig, file, litNodeClient, additionalAccessControlConditions, }) => {
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'decryptZipFileWithMetadata',
        params: {
            authSig,
            file,
            litNodeClient,
            additionalAccessControlConditions,
        },
    });
    if (!paramsIsSafe)
        return;
    // -- execute
    const zip = await JSZip.loadAsync(file);
    const jsonFile = zip.file('lit_protocol_metadata.json');
    if (!jsonFile) {
        (0, misc_1.log)(`Failed to read lit_protocol_metadata.json while zip.file()`);
        return;
    }
    const metadata = JSON.parse(await jsonFile.async('string'));
    (0, misc_1.log)('zip metadata', metadata);
    let symmKey;
    try {
        symmKey = await litNodeClient.getEncryptionKey({
            accessControlConditions: metadata.accessControlConditions,
            evmContractConditions: metadata.evmContractConditions,
            solRpcConditions: metadata.solRpcConditions,
            unifiedAccessControlConditions: metadata.unifiedAccessControlConditions,
            toDecrypt: metadata.encryptedSymmetricKey,
            chain: metadata.chain,
            authSig,
        });
    }
    catch (e) {
        if (e.errorCode === 'not_authorized') {
            // try more additionalAccessControlConditions
            if (!additionalAccessControlConditions) {
                throw e;
            }
            (0, misc_1.log)('trying additionalAccessControlConditions');
            // -- loop start
            for (let i = 0; i < additionalAccessControlConditions.length; i++) {
                const accessControlConditions = additionalAccessControlConditions[i].accessControlConditions;
                (0, misc_1.log)('trying additional condition', accessControlConditions);
                try {
                    symmKey = await litNodeClient.getEncryptionKey({
                        accessControlConditions: accessControlConditions,
                        toDecrypt: additionalAccessControlConditions[i].encryptedSymmetricKey,
                        chain: metadata.chain,
                        authSig,
                    });
                    // okay we got the additional symmkey, now we need to decrypt the symmkey and then use it to decrypt the original symmkey
                    // const importedAdditionalSymmKey = await importSymmetricKey(symmKey)
                    // symmKey = await decryptWithSymmetricKey(additionalAccessControlConditions[i].encryptedSymmetricKey, importedAdditionalSymmKey)
                    break; // it worked, we can leave the loop and stop checking additional access control conditions
                }
                catch (e) {
                    // swallow not_authorized because we are gonna try some more accessControlConditions
                    if (e.errorCode !== 'not_authorized') {
                        throw e;
                    }
                }
            }
            // -- loop ends
            if (!symmKey) {
                // we tried all the access control conditions and none worked
                throw e;
            }
        }
        else {
            throw e;
        }
    }
    if (!symmKey) {
        return;
    }
    const importedSymmKey = await (0, crypto_1.importSymmetricKey)(symmKey);
    const folder = zip.folder('encryptedAssets');
    if (!folder) {
        (0, misc_1.log)("Failed to get 'encryptedAssets' from zip.folder() ");
        return;
    }
    const _file = folder.file(metadata.name);
    if (!_file) {
        (0, misc_1.log)("Failed to get 'metadata.name' while zip.folder().file()");
        return;
    }
    const encryptedFile = await _file.async('blob');
    const decryptedFile = await (0, crypto_1.decryptWithSymmetricKey)(encryptedFile, importedSymmKey);
    const data = { decryptedFile, metadata };
    return data;
};
exports.decryptZipFileWithMetadata = decryptZipFileWithMetadata;
/**
 *
 * Encrypt a file without doing any zipping or packing.  This is useful for large files.  A 1gb file can be encrypted in only 2 seconds, for example.  A new random symmetric key will be created and returned along with the encrypted file.
 *
 * @param { Object } params
 * @param { Blob|File } params.file The file you wish to encrypt
 *
 * @returns { Promise<Object> } A promise containing an object with keys encryptedFile and symmetricKey.  encryptedFile is a Blob, and symmetricKey is a Uint8Array that can be used to decrypt the file.
 */
const encryptFile = async ({ file }) => {
    // -- validate
    if (!(0, misc_1.checkType)({
        value: file,
        allowedTypes: ['Blob', 'File'],
        paramName: 'file',
        functionName: 'encryptFile',
    }))
        return;
    // generate a random symmetric key
    const symmetricKey = await (0, crypto_1.generateSymmetricKey)();
    const exportedSymmKey = new Uint8Array(await crypto.subtle.exportKey('raw', symmetricKey));
    // encrypt the file
    var fileAsArrayBuffer = await file.arrayBuffer();
    const encryptedFile = await (0, crypto_1.encryptWithSymmetricKey)(symmetricKey, fileAsArrayBuffer);
    const _encryptedFile = {
        encryptedFile,
        symmetricKey: exportedSymmKey,
    };
    return _encryptedFile;
};
exports.encryptFile = encryptFile;
/**
 *
 * Decrypt a file that was encrypted with the encryptFile function, without doing any unzipping or unpacking.  This is useful for large files.  A 1gb file can be decrypted in only 1 second, for example.
 *
 * @property { Object } params
 * @property { Blob | File } params.file The file you wish to decrypt
 * @property { Uint8Array } params.symmetricKey The symmetric key used that will be used to decrypt this.
 *
 * @returns { Promise<Object> } A promise containing the decrypted file.  The file is an ArrayBuffer.
 */
const decryptFile = async ({ file, symmetricKey, }) => {
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'decryptFile',
        params: {
            file,
            symmetricKey,
        },
    });
    if (!paramsIsSafe)
        return;
    // -- execute
    const importedSymmKey = await (0, crypto_1.importSymmetricKey)(symmetricKey);
    // decrypt the file
    const decryptedFile = await (0, crypto_1.decryptWithSymmetricKey)(file, importedSymmKey);
    return decryptedFile;
};
exports.decryptFile = decryptFile;
/**
 * // TODO check for expiration
 *
 * Verify a JWT from the LIT network.  Use this for auth on your server.  For some background, users can define resources (URLs) for authorization via on-chain conditions using the saveSigningCondition function.  Other users can then request a signed JWT proving that their ETH account meets those on-chain conditions using the getSignedToken function.  Then, servers can verify that JWT using this function.  A successful verification proves that the user meets the on-chain conditions defined in the saveSigningCondition step.  For example, the on-chain condition could be posession of a specific NFT.
 *
 * @param { VerifyJWTProps } jwt
 *
 * @returns { IJWT } An object with 4 keys: "verified": A boolean that represents whether or not the token verifies successfully.  A true result indicates that the token was successfully verified.  "header": the JWT header.  "payload": the JWT payload which includes the resource being authorized, etc.  "signature": A uint8array that represents the raw  signature of the JWT.
 */
const verifyJwt = ({ jwt }) => {
    // -- validate
    if (!(0, misc_1.checkType)({
        value: jwt,
        allowedTypes: ['String'],
        paramName: 'jwt',
        functionName: 'verifyJwt',
    }))
        return;
    (0, misc_1.log)('verifyJwt', jwt);
    // verify that the wasm was loaded
    if (!globalThis.wasmExports) {
        (0, misc_1.log)('wasmExports is not loaded.');
    }
    const pubKey = (0, uint8arrays_1.uint8arrayFromString)(constants_1.NETWORK_PUB_KEY, 'base16');
    // log("pubkey is ", pubKey);
    const jwtParts = jwt.split('.');
    const sig = (0, uint8arrays_1.uint8arrayFromString)(jwtParts[2], 'base64url');
    // log("sig is ", uint8arrayToString(sig, "base16"));
    const unsignedJwt = `${jwtParts[0]}.${jwtParts[1]}`;
    // log("unsignedJwt is ", unsignedJwt);
    const message = (0, uint8arrays_1.uint8arrayFromString)(unsignedJwt);
    // log("message is ", message);
    // p is public key uint8array
    // s is signature uint8array
    // m is message uint8array
    // function is: function (p, s, m)
    const verified = Boolean(bls_sdk_1.wasmBlsSdkHelpers.verify(pubKey, sig, message));
    const _jwt = {
        verified,
        header: JSON.parse((0, uint8arrays_1.uint8arrayToString)((0, uint8arrays_1.uint8arrayFromString)(jwtParts[0], 'base64url'))),
        payload: JSON.parse((0, uint8arrays_1.uint8arrayToString)((0, uint8arrays_1.uint8arrayFromString)(jwtParts[1], 'base64url'))),
        signature: sig,
    };
    return _jwt;
};
exports.verifyJwt = verifyJwt;
//# sourceMappingURL=encryption.js.map