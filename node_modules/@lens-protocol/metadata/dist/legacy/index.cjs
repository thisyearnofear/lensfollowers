'use strict';

var uuid = require('uuid');
var zod = require('zod');

var Se=(a=>(a.number="number",a.string="string",a.date="date",a))(Se||{});function X(e){return e?typeof e=="string"?e:JSON.stringify(e):""}var xe=zod.z.object({displayType:zod.z.string().nullable().optional().catch(null),traitType:zod.z.string().nullable().optional().catch(null),value:zod.z.unknown().transform(X),key:zod.z.unknown().transform(X)}),Pt=zod.z.object({version:zod.z.literal("1.0.0").describe("The metadata version.").catch("1.0.0"),metadata_id:zod.z.string({description:"The metadata id can be anything but if your uploading to ipfs you will want it to be random. Using uuid could be an option!"}).catch(()=>uuid.v4()),name:zod.z.string({description:"The display name for the profile."}).nullable().catch(null),bio:zod.z.string({description:"The bio for the profile."}).nullable().optional().catch(null),cover_picture:zod.z.string({description:"Cover picture."}).nullable().optional().catch(null),attributes:xe.array().describe("A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard.").optional()}).passthrough();function S(e){return e.length>=2}function Ee(e){return e}var Ae=/^[a-z]{2}(?:-[a-zA-Z]{2})?$/,Ie=/^([a-z]{2})(?:-[A-Z0-9]{2,3})?$/i,Y=zod.z.string({description:"A Locale Identifier in the `[language]` OR `[language]-[region]` format (e.g. `en`, `en-GB`, `it`). [language] MUST be in the ISO 639-1 format. [region], if provided, MUST be in the ISO 3166-1 alpha-2 format."}).regex(Ae,"Should be a valid Locale Identifier. Expected `[language]` OR `[language]-[region]` format (e.g. `en`, `en-GB`, `it`). [language] MUST be in the ISO 639-1 format. [region], if provided, MUST be in the ISO 3166-1 alpha-2 format."),I=Y.catch(e=>{let n=Ie.exec(e.input);return n?n[1]:e.input}).superRefine((e,n)=>{let i=Y.safeParse(e);return i.success||i.error.issues.forEach(a=>{n.addIssue(a);}),zod.z.NEVER}).transform(Ee);function Ce(e){return e}function Oe(e){return e.every(n=>!n.success)}var we=zod.z.string().describe("An encrypted value.").regex(/^\S+$/,"Should be a valid encrypted value.").transform(Ce);function te(e){let n=[e,we];return zod.z.union(n).catch(i=>i.input).superRefine((i,a)=>{let m=n.map(T=>T.safeParse(i));return Oe(m)&&a.addIssue({code:zod.z.ZodIssueCode.invalid_union,unionErrors:m.map(T=>T.error)}),zod.z.NEVER})}function Pe(e){return zod.z.preprocess((n,i)=>{let a=zod.z.string().safeParse(n);return a.success?a.data.replace(/^[\u0000\u0007\u000e\u000f\u200b-\u200d\ufeff]*/,"").replace(/[\u0000\u0007\u000e\u000f\u200b-\u200d\ufeff]*$/,"").trim():(a.error.issues.forEach(m=>{i.addIssue(m);}),zod.z.NEVER)},e.min(1))}function d(e){return Pe(zod.z.string({description:e}))}function x(e){return te(d(e))}var R=zod.z.string().describe("An arbitrary tag.").min(1).max(50).transform(e=>e.toLowerCase());function N(e){return e}var ne=zod.z.string().describe("A Lens App identifier.").min(1).max(200).transform(N);function ve(e){return e}zod.z.string().min(1).describe("A cryptographic signature of the Lens metadata.").transform(ve);function C(e){return e}function k(e){return e.transform(C)}function Re(e){return e}function O(e="A Uniform Resource Identifier. "){return zod.z.string({description:e}).min(6).url({message:"Should be a valid URI"}).transform(Re)}var ee=/^geo:(-?\d+\.?\d*),(-?\d+\.?\d*)$/,oe=zod.z.coerce.number({description:"The latitude."}).min(-90).max(90),ae=zod.z.coerce.number({description:"The longitude."}).min(-180).max(180);zod.z.string().describe("A Geographic coordinate as subset of Geo URI (RFC 5870). Currently only supports the `geo:lat,lng` format.").regex(ee,"Should be a Geo URI. Expected `geo:lat,lng`.").superRefine((e,n)=>{let i=ee.exec(e);if(!i)return zod.z.NEVER;let[,a="",m=""]=i,T=oe.safeParse(a);T.success||T.error.issues.forEach(M=>n.addIssue({...M,path:[...n.path,"lat"]}));let h=ae.safeParse(m);return h.success||h.error.issues.forEach(M=>n.addIssue({...M,path:[...n.path,"lng"]})),zod.z.NEVER});zod.z.object({lat:oe,lng:ae});zod.z.object({formatted:x("The full mailing address formatted for display.").optional(),streetAddress:x("The street address including house number, street name, P.O. Box, apartment or unit number and extended multi-line address information.").optional(),locality:x("The city or locality."),region:x("The state or region.").optional(),postalCode:x("The zip or postal code.").optional(),country:x("The country name component.")});function Ne(e){return e}var z=zod.z.string().length(42).describe("An EVM compatible address.").transform(Ne);function ke(e){return e}var ze=zod.z.number().positive().transform(ke),w=zod.z.object({chainId:ze,address:z},{description:"An EVM compatible address on a specific chain."});function Le(e){return e}var ie=zod.z.string().min(1).transform(Le),De=zod.z.object({contract:w,decimals:zod.z.number({description:"The number of decimals of the asset."}).int().nonnegative()});var re=zod.z.object({asset:De,value:d("The amount in the smallest unit of the given asset (e.g. wei for ETH).")},{description:"An amount of a specific asset."});function Ve(e){return e}var L=zod.z.string().min(4).transform(Ve);function Ze(e){return e}var se=zod.z.string().min(9).transform(Ze);var D=(a=>(a.NUMBER="number",a.STRING="string",a.DATE="date",a))(D||{}),_e=zod.z.object({display_type:zod.z.nativeEnum(D).optional(),trait_type:d("The name of the trait.").optional(),value:zod.z.union([zod.z.string(),zod.z.number()]).optional()}).passthrough(),ce=zod.z.object({description:k(zod.z.string({description:"A human-readable description of the item. It could be plain text or markdown."})).optional().nullable().catch(null),external_url:O("This is the URL that will appear below the asset's image on OpenSea and others etc. and will allow users to leave OpenSea and view the item on the site.").optional().nullable().catch(null),name:zod.z.string({description:"Name of the NFT item."}).optional(),attributes:_e.array().optional().describe("These are the attributes for the item, which will show up on the OpenSea and others NFT trading websites on the item.").catch([]),image:O("Marketplaces will store any NFT image here.").optional().nullable().catch(null),animation_url:O("A URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. Animation_url also supports HTML pages, allowing you to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more. Scripts and relative paths within the HTML page are now supported. However, access to browser extensions is not supported.").optional().nullable().catch(null)}).passthrough();var P=(i=>(i.ERC721="ERC721",i.ERC1155="ERC1155",i))(P||{});function Ue(e,n){e.contractType==="ERC1155"&&(e.tokenIds===void 0||e.tokenIds.length===0)&&n.addIssue({code:zod.z.ZodIssueCode.custom,message:"ERC1155 requires at least one token id.",path:[...n.path,"tokenIds"]});}var V=zod.z.object({type:zod.z.literal("NFT_OWNERSHIP"),contract:w,contractType:zod.z.nativeEnum(P),tokenIds:ie.array().min(1).optional().describe("A list of token IDs you want to check ownership of. The list is optional for ERC721, you MUST provide a list of token IDs for ERC1155.")}),E=(h=>(h.EQUAL="EQUAL",h.NOT_EQUAL="NOT_EQUAL",h.GREATER_THAN="GREATER_THAN",h.GREATER_THAN_OR_EQUAL="GREATER_THAN_OR_EQUAL",h.LESS_THAN="LESS_THAN",h.LESS_THAN_OR_EQUAL="LESS_THAN_OR_EQUAL",h))(E||{}),Z=zod.z.object({type:zod.z.literal("ERC20_OWNERSHIP"),amount:re,condition:zod.z.nativeEnum(E)}),_=zod.z.object({type:zod.z.literal("EOA_OWNERSHIP"),address:z}),U=zod.z.object({type:zod.z.literal("PROFILE_OWNERSHIP"),profileId:L}),j=zod.z.object({type:zod.z.literal("FOLLOW"),follow:L}),F=zod.z.object({type:zod.z.literal("COLLECT"),publicationId:se,thisPublication:zod.z.boolean().optional().default(!1)}),G=zod.z.object({type:zod.z.literal("ADVANCED_CONTRACT"),contract:w.describe("The contract address and chain id"),functionName:zod.z.string().min(1).describe("The name of the function you want to call"),abi:zod.z.string().min(1).describe("The contract ABI. Has to be in human readable single string format containing the signature of the function you want to call. See https://docs.ethers.org/v5/api/utils/abi/fragments/#human-readable-abi for more info"),params:zod.z.string().array().describe("The parameters to pass to the function. Must be exactly matching the function arguments. You *must* pass in the `:userAddress` parameter to represent the decrypter address. Any array or tuple arguments, must be stringified JSON arrays."),comparison:zod.z.nativeEnum(E).describe("The comparison operator to use. In case of boolean functions you can only use EQUAL or NOT_EQUAL"),value:zod.z.string().regex(/^(true|false|\d{1,70})$/).describe("The comparison value. Accepts 'true', 'false' or a number")});function je(e){return zod.z.object({type:zod.z.literal("AND"),criteria:zod.z.discriminatedUnion("type",e).array().max(5,"Should have at most 5 conditions").refine(S,"Should have at least 2 conditions")})}var Fe=je([V,Z,_,U,j,F,G]);function de(e){return zod.z.object({type:zod.z.literal("OR"),criteria:zod.z.discriminatedUnion("type",e).array().max(5,"Should have at most 5 conditions").refine(S,"Should have at least 2 conditions")})}var Ge=de([V,Z,_,U,j,F,G]);function pe(e,n){(e.type==="AND"||e.type==="OR")&&e.criteria.forEach((i,a)=>pe(i,{...n,path:[...n.path,"criteria",a]})),e.type==="NFT_OWNERSHIP"&&Ue(e,n);}var Be=de([Fe,F,G,_,Z,j,V,Ge,U]).superRefine((e,n)=>(e.criteria.forEach((i,a)=>{pe(i,{...n,path:[...n.path,"criteria",a]});}),zod.z.NEVER));function We(e){return e}var He=zod.z.string().describe("A symmetric encryption key.").length(368,"Encryption key should be 368 characters long.").transform(We),Ke=d("An encrypted path is a string of keys separated by . that describe a path to a value in a JSON object (e.g. lens.attachments.0.item.url, lens.content).").array().min(1),Je=zod.z.object({provider:zod.z.literal("LIT_PROTOCOL"),encryptionKey:He,accessCondition:Be,encryptedPaths:Ke},{description:"Publication encryption strategy powered by the LIT Protocol."}),le=zod.z.discriminatedUnion("provider",[Je]);var $e=zod.z.object({type:zod.z.literal("Boolean"),key:d("The attribute's unique identifier."),value:zod.z.enum(["true","false"]).describe("A JS boolean value serialized as string. It's consumer responsibility to parse it.")}),qe=zod.z.object({type:zod.z.literal("Date"),key:d("The attribute's unique identifier."),value:zod.z.string().datetime().describe("A valid ISO 8601 date string.  It's consumer responsibility to parse it.")}),Qe=zod.z.object({type:zod.z.literal("Number"),key:d("The attribute's unique identifier."),value:d("A valid JS number serialized as string. It's consumer responsibility to parse it.")}),Xe=zod.z.object({type:zod.z.literal("String"),key:d("The attribute's unique identifier."),value:d("A string value.")}),Ye=zod.z.object({type:zod.z.literal("JSON"),key:d("The attribute's unique identifier."),value:d("A JSON string. It's consumer responsibility to validate and parse it.")}),ue=zod.z.discriminatedUnion("type",[$e,qe,Qe,Xe,Ye]);var v=(a=>(a.NSFW="NSFW",a.SENSITIVE="SENSITIVE",a.SPOILER="SPOILER",a))(v||{});zod.z.object({id:d("A unique identifier that in storages like IPFS ensures the uniqueness of the metadata URI. Use a UUID if unsure."),appId:ne.optional().describe("The App Id that this publication belongs to."),hideFromFeed:zod.z.boolean({description:"Determine if the publication should not be shown in any feed."}).optional(),attributes:ue.array().min(1).max(20).optional().describe("A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard. Over time, common attributes will be added to the standard and their usage as arbitrary attributes will be discouraged."),locale:I,encryptedWith:le.optional(),tags:zod.z.set(R).max(20).catch(e=>e.input).superRefine((e,n)=>{let i=zod.z.array(R).max(20).safeParse(e);if(i.success){let a=[...new Set(i.data)];return i.data.length>a.length&&n.addIssue({code:zod.z.ZodIssueCode.custom,fatal:!0,message:`Duplicate tags are not allowed: ${i.data.join(", ")}`}),zod.z.NEVER}i.error.issues.forEach(a=>{n.addIssue(a);});}).transform(e=>[...e]).optional().describe("An arbitrary list of tags."),contentWarning:zod.z.nativeEnum(v,{description:"Specify a content warning."}).optional()});var q=(i=>(i.V1="1.0.0",i.V2="2.0.0",i))(q||{}),p=(s=>(s[s.ARTICLE="ARTICLE"]="ARTICLE",s[s.AUDIO="AUDIO"]="AUDIO",s[s.EMBED="EMBED"]="EMBED",s[s.IMAGE="IMAGE"]="IMAGE",s[s.LINK="LINK"]="LINK",s[s.SHORT_VIDEO="SHORT_VIDEO"]="SHORT_VIDEO",s[s.TEXT_ONLY="TEXT_ONLY"]="TEXT_ONLY",s[s.VIDEO="VIDEO"]="VIDEO",s))(p||{}),he=(s=>(s.AAC="audio/aac",s.FLAC="audio/flac",s.MP3="audio/mpeg",s.MP4_AUDIO="audio/mp4",s.OGG_AUDIO="audio/ogg",s.WAV="audio/wav",s.WAV_VND="audio/vnd.wave",s.WEBM_AUDIO="audio/webm",s))(he||{}),tt=Object.values(he);function nt(e){return tt.includes(e)}var ye=(c=>(c.BMP="image/bmp",c.GIF="image/gif",c.HEIC="image/heic",c.JPEG="image/jpeg",c.JPG="image/jpg",c.PNG="image/png",c.SVG_XML="image/svg+xml",c.TIFF="image/tiff",c.WEBP="image/webp",c.X_MS_BMP="image/x-ms-bmp",c))(ye||{}),ot=Object.values(ye);function at(e){return ot.includes(e)}var fe=(c=>(c.GLTF="model/gltf+json",c.GLTF_BINARY="model/gltf-binary",c.WEBM="video/webm",c.MP4="video/mp4",c.M4V="video/x-m4v",c.OGV="video/ogv",c.OGG="video/ogg",c.MPEG="video/mpeg",c.QUICKTIME="video/quicktime",c.MOV="video/mov",c))(fe||{}),it=Object.values(fe);function rt(e){return it.includes(e)}var st=zod.z.string({description:"In spec for OpenSea and other providers - also used when using EMBED main publication focusA URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. Animation_url also supports HTML pages, allowing you to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more. Scripts and relative paths within the HTML page are now supported. However, access to browser extensions is not supported."}),f=zod.z.object({item:d("Marketplaces will store any NFT image here."),altTag:zod.z.string().optional().nullable().describe("The alt tag for accessibility."),cover:zod.z.string().describe("The cover for any video or audio media.").optional().nullable().catch(null),type:zod.z.string().optional().nullable().describe("This is the mime type of the media.")}).passthrough(),A=zod.z.string({description:"The content of a publication."}).max(3e4);function Q(e){return e==null}function ct(e){return Q(e)||e.length===0}function dt(e){return Q(e)||e.length===0}var be=ce.extend({metadata_id:zod.z.string({description:"The metadata_id can be anything but if your uploading to ipfs you will want it to be random. Using uuid could be an option!"}).catch(()=>uuid.v4()),content:A.transform(e=>e).optional().nullable(),media:f.array().catch(e=>e.input.filter(n=>f.safeParse(n).success)).optional().nullable().describe("This is lens supported attached media items to the publication."),appId:zod.z.string().max(200).transform(N).optional().nullable().describe("The App Id that this publication belongs to."),version:zod.z.nativeEnum(q)}),pt=be.extend({version:zod.z.literal("1.0.0",{description:"The metadata version."})}).superRefine((e,n)=>{dt(e.content)&&Q(e.image)&&ct(e.media)&&(n.addIssue({code:zod.z.ZodIssueCode.custom,path:["content"],message:"At least one between content, image, and media must be present. Content must be over 1 character."}),n.addIssue({code:zod.z.ZodIssueCode.custom,path:["image"],message:"At least one between content, image, and media must be present."}),n.addIssue({code:zod.z.ZodIssueCode.custom,path:["media"],message:"At least one between content, image, and media must be present."}));}),B=zod.z.object({collect:zod.z.object({publicationId:zod.z.string().nullable(),thisPublication:zod.z.boolean().nullable().optional()})}).strict(),W=zod.z.object({eoa:zod.z.object({address:zod.z.string()})}).strict(),H=zod.z.object({follow:zod.z.object({profileId:zod.z.string()})}).strict(),K=zod.z.object({nft:zod.z.object({contractAddress:zod.z.string(),chainID:zod.z.number(),contractType:zod.z.nativeEnum(P),tokenIds:zod.z.string().array().min(1).nullable().optional().catch(null)})}).strict(),J=zod.z.object({profile:zod.z.object({profileId:zod.z.string()})}).strict(),$=zod.z.object({token:zod.z.object({amount:zod.z.coerce.string(),chainID:zod.z.coerce.number(),condition:zod.z.nativeEnum(E),contractAddress:zod.z.string(),decimals:zod.z.coerce.number()})}).strict();function lt(e){return zod.z.object({and:zod.z.object({criteria:zod.z.union(e).array().max(5,"Invalid AND condition: should have at most 5 conditions").refine(S,"Invalid AND condition: should have at least 2 conditions")})}).strict()}function me(e){return zod.z.object({or:zod.z.object({criteria:zod.z.union(e).array().max(5,"Invalid OR condition: should have at most 5 conditions").refine(S,"Invalid OR condition: should have at least 2 conditions")})}).strict()}var ut=me([B,W,H,K,J,$,lt([B,W,H,K,J,$]),me([B,W,H,K,J,$])]),mt=zod.z.object({original:zod.z.object({url:d(),cover:zod.z.string().nullable().optional().catch(null),altTag:zod.z.string().nullable().optional().catch(null),mimeType:zod.z.string().nullable().optional().catch(null)})}).passthrough(),ht=zod.z.object({item:zod.z.string().describe("Marketplaces will store any NFT image here."),altTag:zod.z.string().optional().nullable().describe("The alt tag for accessibility."),cover:zod.z.string().describe("The cover for any video or audio media.").optional().nullable(),type:zod.z.string().optional().nullable().describe("This is the mime type of the media.")}).passthrough().catch(e=>{let n=mt.safeParse(e.input);return n.success?{item:n.data.original.url,altTag:n.data.original.altTag,cover:n.data.original.cover,type:n.data.original.mimeType}:e.input}),yt=zod.z.object({content:zod.z.string().optional().nullable(),media:ht.array().optional().nullable(),image:zod.z.string().optional().nullable(),animation_url:zod.z.string().optional().nullable(),external_url:zod.z.string().optional().nullable()}),ft=zod.z.object({accessCondition:ut,encryptedFields:yt,providerSpecificParams:zod.z.object({encryptionKey:zod.z.string().length(368,"Encryption key should be 368 characters long.")})}),g=be.extend({version:zod.z.literal("2.0.0",{description:"The metadata version."}),locale:I,content:A.transform(C).optional().nullable(),contentWarning:zod.z.nativeEnum(v,{description:"Specify a content warning."}).optional().nullable().catch(null),mainContentFocus:zod.z.nativeEnum(p,{description:"Main content focus that for this publication."}),tags:zod.z.string().array().optional().nullable().describe("Ability to tag your publication."),encryptionParams:ft.optional()}),bt=g.extend({mainContentFocus:zod.z.literal(p.ARTICLE),content:A.min(1).transform(C)}),gt=g.extend({mainContentFocus:zod.z.literal(p.AUDIO),media:f.array().min(1).catch(e=>e.input.filter(n=>f.safeParse(n).success)).refine(e=>e.some(n=>nt(n?.type)),`Metadata ${p.AUDIO} requires an audio to be attached.`)}),Tt=g.extend({mainContentFocus:zod.z.literal(p.EMBED),animation_url:st.optional().nullable()}),St=g.extend({mainContentFocus:zod.z.literal(p.IMAGE),media:f.array().min(1).catch(e=>e.input.filter(n=>f.safeParse(n).success)).refine(e=>e.some(n=>at(n.type)),`Metadata ${p.IMAGE} requires an image to be attached.`)}),xt=g.extend({mainContentFocus:zod.z.literal(p.LINK),content:A.min(1).refine(e=>e.includes("https://"),`Metadata ${p.LINK} requires a valid https link`).transform(e=>e)}),Et=g.extend({mainContentFocus:zod.z.literal(p.TEXT_ONLY),content:A.min(1).transform(e=>e),media:zod.z.any().array().max(0,{message:"Metadata TEXT cannot have media"}).optional().nullable()}),ge=g.extend({mainContentFocus:zod.z.union([zod.z.literal(p.VIDEO),zod.z.literal(p.SHORT_VIDEO)]),media:f.array().min(1).catch(e=>e.input.filter(n=>f.safeParse(n).success)).refine(e=>e.some(n=>rt(n.type)),`Metadata ${p.VIDEO} requires an image to be attached.`)}),At=ge.extend({mainContentFocus:zod.z.literal(p.VIDEO)}),It=ge.extend({mainContentFocus:zod.z.literal(p.SHORT_VIDEO)}),Ct=zod.z.discriminatedUnion("mainContentFocus",[bt,gt,Tt,St,xt,Et,At,It]).transform(e=>e.mainContentFocus===p.VIDEO&&e.appId==="lenstube-bytes"?{...e,mainContentFocus:p.SHORT_VIDEO}:e),Cn=zod.z.object({version:zod.z.nativeEnum(q)}).passthrough().transform((e,n)=>{switch(e.version){case"1.0.0":let i=pt.safeParse(e);return i.success?i.data:(i.error.issues.forEach(m=>{n.addIssue(m);}),zod.z.NEVER);case"2.0.0":let a=Ct.safeParse(e);return a.success?a.data:(a.error.issues.forEach(m=>{n.addIssue(m);}),zod.z.NEVER)}});

exports.AudioMimeType = he;
exports.ConditionComparisonOperator = E;
exports.EncryptedMediaSchema = ht;
exports.EncryptionParamsSchema = ft;
exports.ImageMimeType = ye;
exports.MarketplaceMetadataAttributeDisplayType = D;
exports.MediaSchema = f;
exports.NftContractType = P;
exports.ProfileMetadataAttributeDisplayType = Se;
exports.ProfileMetadataSchema = Pt;
exports.PublicationContentWarning = v;
exports.PublicationMainFocus = p;
exports.PublicationMetadataSchema = Cn;
exports.PublicationMetadataV1Schema = pt;
exports.PublicationMetadataV2Schema = Ct;
exports.PublicationMetadataVersion = q;
exports.VideoMimeType = fe;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.cjs.map