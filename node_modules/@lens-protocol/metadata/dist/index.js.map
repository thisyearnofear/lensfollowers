{"version":3,"sources":["../src/formatters.ts","../src/utils.ts","../src/builders/ValidationError.ts","../src/primitives.ts","../src/publication/index.ts","../src/publication/common/index.ts","../src/publication/common/encryption.ts","../src/MetadataAttribute.ts","../src/marketplace.ts","../src/publication/common/license.ts","../src/publication/common/media.ts","../src/publication/common/timezones.ts","../src/publication/3D.ts","../src/publication/PublicationMainFocus.ts","../src/constants.ts","../src/publication/PublicationSchemaId.ts","../src/publication/ArticleSchema.ts","../src/publication/AudioSchema.ts","../src/publication/CheckingInSchema.ts","../src/publication/EmbedSchema.ts","../src/publication/EventSchema.ts","../src/publication/ImageSchema.ts","../src/publication/LinkSchema.ts","../src/publication/LiveStreamSchema.ts","../src/publication/MintSchema.ts","../src/publication/MirrorSchemaId.ts","../src/publication/MirrorMetadataSchema.ts","../src/publication/SpaceSchema.ts","../src/publication/StorySchema.ts","../src/publication/TextOnlySchema.ts","../src/publication/TransactionSchema.ts","../src/publication/VideoSchema.ts","../src/builders/encryption.ts","../src/builders/mirror.ts","../src/module/ModuleMetadataSchema.ts","../src/module/ModuleSchemaId.ts","../src/builders/modules.ts","../src/builders/profile.ts","../src/profile/ProfileMetadataSchema.ts","../src/profile/ProfileSchemaId.ts","../src/builders/publications.ts","../src/extractVersion.ts"],"names":["z","InvariantError","invariant","condition","message","never","hasAtLeastOne","items","hasTwoOrMore","maxIssuesInMessage","issueSeparator","bulletPoint","escapeQuotes","str","identifierRegex","formatPath","path","acc","item","separator","formatZozInvalidUnionIssue","issue","groups","zodError","nested","uniqueGroups","group","prefix","formatZodIssue","formatZodError","reason","ValidationError","evaluate","result","toLocale","value","localeRegex","localeLikeRegex","LocaleRegexSchema","LocaleSchema","ctx","match","val","exact","toEncryptedString","allFailed","results","r","EncryptedStringSchema","encryptable","schema","options","s","nonEmpty","nonEmptyStringSchema","description","encryptableStringSchema","toTag","TagSchema","toAppId","AppIdSchema","toSignature","SignatureSchema","toMarkdown","markdown","toUri","uriSchema","encryptableUriSchema","geoUriRegex","LatitudeSchema","LongitudeSchema","GeoURISchema","latitude","longitude","latResult","lngResult","GeoPointSchema","geoUri","point","lat","lng","geoPoint","uri","encryptableGeoUriSchema","PhysicalAddressSchema","toDateTime","datetimeSchema","encryptableDateTimeSchema","toEvmAddress","EvmAddressSchema","toChainId","ChainIdSchema","NetworkAddressSchema","toTokenId","TokenIdSchema","AssetSchema","asset","contract","decimals","AmountSchema","amount","input","toProfileId","ProfileIdSchema","toPublicationId","PublicationIdSchema","EncryptionProvider","NftContractType","ConditionType","refineNftOwnershipCondition","NftOwnershipConditionSchema","ConditionComparisonOperator","Erc20OwnershipConditionSchema","EoaOwnershipConditionSchema","ProfileOwnershipConditionSchema","FollowConditionSchema","CollectConditionSchema","AdvancedContractConditionSchema","andConditionSchema","AndConditionSchema","orConditionSchema","OrConditionSchema","refineAnyCondition","c","idx","AccessConditionSchema","root","toLitEncryptionKey","LitEncryptionKeySchema","EncryptedPaths","LitEncryptionStrategySchema","PublicationEncryptionStrategySchema","MetadataAttributeType","BooleanAttributeSchema","DateAttributeSchema","NumberAttributeSchema","StringAttributeSchema","JSONAttributeSchema","MetadataAttributeSchema","MarketplaceMetadataAttributeDisplayType","MarketplaceMetadataAttributeSchema","MarketplaceMetadataSchema","MetadataLicenseType","MetadataLicenseTypeSchema","MediaCommonSchema","MediaAudioKind","MediaAudioMimeType","MediaAudioSchema","MediaImageMimeType","MediaImageSchema","MediaVideoMimeType","MediaVideoSchema","AnyMediaImageMimeType","AnyMediaShapeScheme","isAnyMediaShape","resolveAnyMediaSchema","AnyMediaSchema","Schema","timezones","TimezoneIdSchema","PublicationContentWarning","PublicationMetadataCommonSchema","uniqueTags","metadataDetailsWith","augmentation","publicationWith","mainContentFocus","focuses","literals","optionalContentSchema","PublicationMainFocus","SchemasRoot","location","PublicationSchemaId","ThreeDFormat","ThreeDAssetSchema","ThreeDMetadataDetailsSchema","ThreeDSchema","ArticleMetadataDetailsSchema","ArticleSchema","AudioMetadataDetailsSchema","AudioSchema","CheckingInMetadataDetailsSchema","CheckingInSchema","EmbedMetadataDetailsSchema","EmbedSchema","SchedulingAdjustmentsSchema","EventMetadataDetailsSchema","EventSchema","ImageMetadataDetailsSchema","ImageSchema","LinkMetadataDetailsSchema","LinkSchema","LiveStreamMetadataDetailsSchema","LiveStreamSchema","MintMetadataDetailsSchema","MintSchema","MirrorSchemaId","MirrorMetadataDetailsSchema","MirrorMetadataSchema","SpaceMetadataDetailsSchema","SpaceSchema","StoryMetadataDetailsSchema","StorySchema","TextOnlyMetadataDetailsSchema","TextOnlySchema","MetadataTransactionType","TransactionMetadataDetailsSchema","TransactionSchema","VideoMetadataDetailsSchema","VideoSchema","PublicationMetadataSchema","collectCondition","eoaOwnershipCondition","erc20OwnershipCondition","others","erc721OwnershipCondition","erc1155OwnershipCondition","profileOwnershipCondition","followCondition","advancedContractCondition","andCondition","criteria","orCondition","accessCondition","v4","mirror","id","ModuleSchemaId","isValidJsonString","jsonString","ModuleMetadataSchema","module","attributes","ProfileSchemaId","ProfileMetadataDetailsSchema","ProfileMetadataSchema","profile","DEFAULT_LOCALE","article","marketplace","locale","audio","checkingIn","embed","event","image","link","liveStream","mint","space","story","textOnly","threeD","transaction","video","shortVideo","schemaVersionRegex","extractVersion","metadata"],"mappings":"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gBACL,IAAK,aACL,IAAK,aACL,IAAK,iBACH,OAAOE,GAET,IAAK,kBACL,IAAK,oBACL,IAAK,cACL,IAAK,YACL,IAAK,YACL,IAAK,aACL,IAAK,YACL,IAAK,YACL,IAAK,kBACL,IAAK,aACH,OAAOE,EACX,CAGA,OAAOE,EACT,CAKO,IAAMG,EAA6D5J,EACvE,mBAAmB,OAAQ,CAACmJ,GAAkBE,GAAkBE,EAAgB,CAAC,EAIjF,MAAO/G,GAAQA,EAAI,KAAiB,EACpC,YAAY,CAACE,EAAcF,IAAyB,CACnD,IAAMqH,EAASF,GAAsBjH,CAAG,EAExC,GAAI,CAACmH,EACH,OAAArH,EAAI,SAAS,CACX,KAAMxC,EAAE,aAAa,4BACrB,QAAS,CACP,GAAG,IAAI,IACL,CACE,OAAO,OAAOkJ,EAAkB,EAChC,OAAO,OAAOE,EAAkB,EAChC,OAAO,OAAOE,EAAkB,CAClC,EAAE,KAAK,CACT,CACF,EACA,QACE,uHACJ,CAAC,EACMtJ,EAAE,MAGX,IAAMiC,EAAS4H,EAAO,UAAUnH,CAAG,EAEnC,OAAKT,EAAO,SACVA,EAAO,MAAM,OAAO,QAASZ,GAAU,CACrCmB,EAAI,SAASnB,CAAK,CACpB,CAAC,EAGIrB,EAAE,KACX,CAAC,EC5UH,OAAS,KAAAA,OAAS,MAEX,IAAM8J,GAAY,CACvB,iBACA,eACA,qBACA,iBACA,gBACA,gBACA,gBACA,gBACA,gBACA,kBACA,qBACA,mBACA,eACA,oBACA,eACA,iBACA,eACA,uBACA,kBACA,gBACA,kBACA,kBACA,kBACA,gBACA,sBACA,cACA,iBACA,kBACA,gBACA,kBACA,eACA,oBACA,cACA,gBACA,oBACA,gBACA,gBACA,gBACA,gBACA,iBACA,mBACA,kBACA,iBACA,kBACA,gBACA,oBACA,qBACA,oBACA,kBACA,iBACA,eACA,kBACA,eACA,oBACA,mBACA,kBACA,oBACA,6BACA,iCACA,0BACA,6BACA,6BACA,4BACA,4BACA,gBACA,mBACA,gBACA,yBACA,mBACA,gBACA,iBACA,uBACA,oBACA,iBACA,gBACA,uBACA,wBACA,uBACA,iBACA,kBACA,oBACA,kBACA,iBACA,kBACA,oBACA,wBACA,wBACA,kBACA,qBACA,kBACA,iBACA,kBACA,uBACA,iBACA,uBACA,iBACA,kBACA,mBACA,mBACA,mBACA,sBACA,sBACA,oBACA,oBACA,kBACA,oBACA,qBACA,kBACA,qBACA,oBACA,oBACA,iBACA,kBACA,iBACA,qBACA,uBACA,0BACA,6BACA,4BACA,wBACA,4BACA,0BACA,uBACA,iBACA,kBACA,kBACA,gBACA,iBACA,8BACA,qBACA,iBACA,eACA,sBACA,qBACA,wBACA,iBACA,kBACA,iBACA,kBACA,qBACA,oBACA,mBACA,kBACA,oBACA,iBACA,qBACA,sBACA,mBACA,kBACA,oBACA,qBACA,qBACA,iBACA,mBACA,kBACA,eACA,kBACA,8BACA,8BACA,iCACA,kBACA,iBACA,sBACA,qBACA,kBACA,yBACA,wBACA,sBACA,sBACA,uBACA,sBACA,uBACA,iBACA,iBACA,mBACA,qBACA,uBACA,mBACA,mBACA,wBACA,oBACA,uBACA,gBACA,wBACA,mBACA,mBACA,mBACA,oBACA,qBACA,wBACA,sBACA,gBACA,sBACA,kBACA,kBACA,kBACA,oBACA,qBACA,mBACA,kBACA,sBACA,mBACA,mBACA,4BACA,uBACA,oBACA,qBACA,oBACA,qBACA,mBACA,mBACA,oBACA,sBACA,YACA,cACA,aACA,cACA,aACA,cACA,gBACA,cACA,eACA,eACA,YACA,eACA,eACA,cACA,eACA,cACA,gBACA,aACA,kBACA,eACA,gBACA,aACA,YACA,aACA,gBACA,iBACA,YACA,cACA,iBACA,YACA,eACA,eACA,gBACA,iBACA,aACA,iBACA,eACA,gBACA,gBACA,mBACA,oBACA,eACA,cACA,aACA,eACA,gBACA,cACA,cACA,eACA,oBACA,mBACA,YACA,YACA,kBACA,iBACA,iBACA,aACA,gBACA,iBACA,eACA,cACA,cACA,gBACA,iBACA,aACA,gBACA,iBACA,qBACA,cACA,gBACA,eACA,cACA,eACA,aACA,aACA,mBACA,cACA,gBACA,iBACA,mBACA,eACA,qBACA,eACA,kBACA,mBACA,kBACA,sBACA,kBACA,mBACA,qBACA,yBACA,qBACA,mBACA,qBACA,qBACA,wBACA,mBACA,mBACA,kBACA,mBACA,qBACA,sBACA,sBACA,kBACA,mBACA,mBACA,iBACA,mBACA,gBACA,kBACA,gBACA,oBACA,kBACA,mBACA,kBACA,kBACA,kBACA,oBACA,gBACA,mBACA,kBACA,kBACA,qBACA,kBACA,gBACA,qBACA,cACA,eACA,gBACA,mBACA,gBACA,oBACA,gBACA,eACA,mBACA,eACA,gBACA,gBACA,cACA,eACA,mBACA,gBACA,cACA,cACA,gBACA,oBACA,kBACA,iBACA,oBACA,gBACA,eACA,mBACA,iBACA,gBACA,mBACA,kBACA,eACA,iBACA,gBACA,iBACA,mBACA,gBACA,gBACA,oBACA,gBACA,sBACA,gBACA,mBACA,eACA,gBACA,mBACA,cACA,kBACA,mBACA,iBACA,iBACA,eACA,mBACA,uBACA,kBACA,iBACA,gBACA,oBACA,kBACA,eACA,mBACA,oBACA,kBACA,sBACA,eACA,mBACA,mBACA,qBACA,iBACA,oBACA,iBACA,oBACA,iBACA,gBACA,eACA,kBACA,iBACA,oBACA,gBACA,mBACA,iBACA,uBACA,oBACA,iBACA,iBACA,iBACA,oBACA,eACA,eACA,gBACF,EAUaC,GAAmB/J,GAAE,KAAK8J,EAAS,EN9ZzC,IAAKE,QACVA,EAAA,KAAO,OACPA,EAAA,UAAY,YACZA,EAAA,QAAU,UAHAA,QAAA,IAmDNC,GAAkCjK,EAAE,OAAO,CAC/C,GAAIsD,EACF,kHACF,EAEA,MAAOM,EAAY,SAAS,EAAE,SAAS,8CAA8C,EAErF,aAAc5D,EACX,QAAQ,CACP,YAAa,+DACf,CAAC,EACA,SAAS,EAEZ,WAAY0I,EAAwB,MAAM,EACvC,IAAI,CAAC,EACL,IAAI,EAAE,EACN,SAAS,EACT,SACC,6OAEF,EAEF,OAAQnG,GAER,cAAe4F,GAAoC,SAAS,EAE5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","sourcesContent":["// Heavily customized and simplified version of https://www.npmjs.com/package/zod-validation-error\nimport { z } from 'zod';\n\nimport { NonEmptyArray, hasAtLeastOne, hasTwoOrMore } from './utils.js';\n\nconst maxIssuesInMessage = 99;\nconst issueSeparator = '\\n';\nconst bulletPoint = '· ';\n\nfunction escapeQuotes(str: string): string {\n  return str.replace(/\"/g, '\\\\\"');\n}\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n */\nconst identifierRegex = /[$_\\p{ID_Start}][$\\u200c\\u200d\\p{ID_Continue}]*/u;\n\nfunction formatPath(path: NonEmptyArray<string | number>): string {\n  if (path.length === 1) {\n    return path[0].toString();\n  }\n\n  return path.reduce<string>((acc, item) => {\n    // handle numeric indices\n    if (typeof item === 'number') {\n      return acc + '[' + item.toString() + ']';\n    }\n\n    // handle quoted values\n    if (item.includes('\"')) {\n      return acc + '[\"' + escapeQuotes(item) + '\"]';\n    }\n\n    // handle special characters\n    if (!identifierRegex.test(item)) {\n      return acc + '[\"' + item + '\"]';\n    }\n\n    // handle normal values\n    const separator = acc.length === 0 ? '' : '.';\n    return acc + separator + item;\n  }, '');\n}\n\nfunction formatZozInvalidUnionIssue(issue: z.ZodInvalidUnionIssue): string {\n  const groups = issue.unionErrors.map<string[]>((zodError) =>\n    zodError.issues.map((nested) => {\n      if (hasAtLeastOne(nested.path)) {\n        return `\"${formatPath(nested.path)}\": ${nested.message}`;\n      }\n      return nested.message;\n    }),\n  );\n\n  const uniqueGroups = [...new Set(groups.map((group) => group.join('; ')))];\n\n  const path = Array.isArray(issue.path) ? issue.path : [issue.path];\n  const prefix = hasAtLeastOne(path) ? `\"${formatPath(path)}\": ` : '';\n\n  if (hasTwoOrMore(uniqueGroups)) {\n    return (\n      `${bulletPoint}${prefix}expected to match one of the following groups:\\n` +\n      `\\t\\t${uniqueGroups.join(`${issueSeparator}\\tOR:${issueSeparator}\\t\\t`)}`\n    );\n  }\n\n  return `${bulletPoint}${prefix}${uniqueGroups[0]}`;\n}\n\nfunction formatZodIssue(issue: z.ZodIssue): string {\n  if (issue.code === z.ZodIssueCode.invalid_union) {\n    return formatZozInvalidUnionIssue(issue);\n  }\n\n  if (hasAtLeastOne(issue.path)) {\n    return `${bulletPoint}\"${formatPath(issue.path)}\": ${issue.message}`;\n  }\n\n  return issue.message;\n}\n\n/**\n * Formats a Zod parsing error into a human-readable string.\n *\n * The formatting is tailored to the Lens Protocol Metadata use case. It may not be suitable for other use cases.\n *\n * @category Helpers\n *\n * @example\n * ```ts\n * const result = PublicationMetadataSchema.safeParse(invalid);\n *\n * if (!result.success) {\n *   throw new Error(formatZodError(result.error));\n * }\n * ```\n */\nexport function formatZodError(zodError: z.ZodError): string {\n  const reason = zodError.errors\n    // limit max number of issues printed in the reason section\n    .slice(0, maxIssuesInMessage)\n    // format error message\n    .map((issue) => formatZodIssue(issue))\n    // concat as string\n    .join(issueSeparator);\n\n  if (reason.length === 0) {\n    return (\n      'invalid argument, it was not possible to determine a more detailed reason.\\n' +\n      'Check the input you provided and try again.'\n    );\n  }\n\n  return `fix the following issues\\n${reason}`;\n}\n","import { Signature } from './primitives';\n\n/**\n * Branding helper type.\n *\n * @internal\n */\nexport type Brand<T, TBrand, ReservedName extends string = '__type__'> = T & {\n  [K in ReservedName]: TBrand;\n};\n\n/**\n * Omits properties from an union type, preserving the union.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DistributiveOmit<T, K extends keyof any> = T extends any ? Omit<T, K> : never;\n\n/**\n * Overwrites properties from T1 with one from T2\n * @internal\n * @example\n * ```ts\n * Overwrite<{ foo: boolean, bar: string }, { foo: number }> // { foo: number, bar: string }\n * ```\n */\nexport type Overwrite<T1, T2> = DistributiveOmit<T1, keyof T2> & T2;\n\n/**\n * An error that occurs when a task violates a logical condition that is assumed to be true at all times.\n */\nexport class InvariantError extends Error {\n  name = 'InvariantError' as const;\n}\n\n/**\n * Asserts that the given condition is truthy\n * @internal\n *\n * @param condition - Either truthy or falsy value\n * @param message - An error message\n */\nexport function invariant(condition: unknown, message: string): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n/**\n * A function that throws when called.\n *\n * @param message - An error message\n */\nexport function never(message = 'Unexpected call to never()'): never {\n  throw new InvariantError(message);\n}\n\n/**\n * Specifies an object with unknown keys\n *\n * Useful when you don't care about exact props passed to the component.\n * @privateRemarks Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n */\nexport type UnknownObject = Record<string, unknown>;\n\n/**\n * Declares an array of at least one element of the specified type.\n */\nexport type NonEmptyArray<T> = [T, ...T[]];\n\n/**\n * @internal\n */\nexport function hasAtLeastOne<T>(items: ReadonlyArray<T>): items is NonEmptyArray<T> {\n  return items.length > 0;\n}\n\n/**\n * Declares an array of at least two elements of the specified type.\n */\nexport type TwoAtLeastArray<T> = [T, T, ...T[]];\n\n/**\n * @internal\n */\nexport function hasTwoOrMore<T>(items: ReadonlyArray<T>): items is TwoAtLeastArray<T> {\n  return items.length >= 2;\n}\n\n/**\n * Beautify the  readout of all of the members of that intersection.\n *\n * As seen on tv: https://twitter.com/mattpocockuk/status/1622730173446557697\n *\n * @internal\n */\nexport type Prettify<T> = {\n  [K in keyof T]: T[K];\n  // eslint-disable-next-line @typescript-eslint/ban-types\n} & {};\n\n/**\n * @internal\n */\nexport type ShapeCheck<T> = T extends {\n  $schema: string;\n\n  lens: unknown;\n\n  signature?: Signature;\n}\n  ? T\n  : never;\n","import { z } from 'zod';\n\nimport { formatZodError } from '../formatters';\n\n/**\n * An error that occurs when an object does not match the expected shape.\n */\nexport class ValidationError extends Error {\n  name = 'ValidationError' as const;\n}\n\n/**\n * @internal\n */\nexport function evaluate<Input, Output>(result: z.SafeParseReturnType<Input, Output>): Output {\n  if (result.success) {\n    return result.data;\n  }\n  throw new ValidationError(formatZodError(result.error));\n}\n","import { z } from 'zod';\n\nimport { formatZodError } from './formatters.js';\nimport { Brand, invariant, never } from './utils.js';\n\n/**\n * A locale identifier.\n *\n * Syntax: [language]-[region] where:\n * - [language] is a lowercase ISO 639-1 language code\n * - [region] is an optional uppercase ISO 3166-1 alpha-2 country code\n *\n * You can pass just the language code, or both the language and region codes.\n *\n * @example\n * - `en` any English\n * - `en-US` English as used in the United States\n * - `en-GB` English as used in the United Kingdom\n */\nexport type Locale = Brand<string, 'Locale'>;\n/**\n * @internal\n */\nexport function toLocale(value: string): Locale {\n  return value as Locale;\n}\n\n// using ranges instead of `i` flag so that resulting JSON Schema includes case-insensitivity.\nconst localeRegex = /^[a-z]{2}(?:-[a-zA-Z]{2})?$/;\nconst localeLikeRegex = /^([a-z]{2})(?:-[A-Z0-9]{2,3})?$/i;\n\nconst LocaleRegexSchema = z\n  .string({\n    description:\n      'A Locale Identifier in the `[language]` OR `[language]-[region]` format (e.g. `en`, `en-GB`, `it`). ' +\n      '[language] MUST be in the ISO 639-1 format. [region], if provided, MUST be in the ISO 3166-1 alpha-2 format.',\n  })\n  .regex(\n    localeRegex,\n    'Should be a valid Locale Identifier. Expected `[language]` OR `[language]-[region]` format (e.g. `en`, `en-GB`, `it`). ' +\n      '[language] MUST be in the ISO 639-1 format. [region], if provided, MUST be in the ISO 3166-1 alpha-2 format.',\n  );\n\n/**\n * @internal\n */\nexport const LocaleSchema: z.ZodType<Locale, z.ZodTypeDef, unknown> = LocaleRegexSchema.catch(\n  (ctx) => {\n    // attempts to recover the language code at least\n    const match = localeLikeRegex.exec(ctx.input);\n    if (match) {\n      return match[1] as string;\n    }\n    return ctx.input;\n  },\n)\n  .superRefine((val, ctx): val is Locale => {\n    const exact = LocaleRegexSchema.safeParse(val);\n\n    if (!exact.success) {\n      exact.error.issues.forEach((issue) => {\n        ctx.addIssue(issue);\n      });\n    }\n    return z.NEVER;\n  })\n  .transform(toLocale);\n\n/**\n * A base64 encoded encrypted string value.\n */\nexport type EncryptedString = Brand<string, 'EncryptedValue'>;\nfunction toEncryptedString(value: string): EncryptedString {\n  return value as EncryptedString;\n}\n\nfunction allFailed<Input>(\n  results: z.SafeParseReturnType<Input, unknown>[],\n): results is z.SafeParseError<Input>[] {\n  return results.every((r) => !r.success);\n}\n/**\n * @internal\n */\nexport const EncryptedStringSchema = z\n  .string()\n  .describe('An encrypted value.')\n  .regex(\n    /^\\S+$/, // Approximation of Lit Encrypted value\n    'Should be a valid encrypted value.',\n  )\n  .transform(toEncryptedString);\n\n/**\n * Modifies a schema to accept an encrypted string value as well as its decrypted version.\n *\n * @internal\n */\nexport function encryptable<T extends string>(schema: z.ZodType<T, z.ZodTypeDef, unknown>) {\n  const options = [schema, EncryptedStringSchema] as const;\n  return z\n    .union(options)\n    .catch((ctx) => ctx.input as T)\n    .superRefine((val, ctx): val is T | EncryptedString => {\n      const results = options.map((s) => s.safeParse(val));\n\n      if (allFailed(results)) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.invalid_union,\n          unionErrors: results.map((r) => r.error),\n        });\n      }\n      return z.NEVER;\n    });\n}\n\n/**\n * @internal\n */\nexport function nonEmpty(schema: z.ZodString): z.ZodType<string, z.ZodTypeDef, unknown> {\n  return z.preprocess((val, ctx) => {\n    const result = z.string().safeParse(val);\n\n    if (!result.success) {\n      result.error.issues.forEach((issue) => {\n        ctx.addIssue(issue);\n      });\n      return z.NEVER;\n    }\n\n    return result.data\n      .replace(\n        // eslint-disable-next-line no-control-regex\n        /^[\\u0000\\u0007\\u000e\\u000f\\u200b-\\u200d\\ufeff]*/,\n        '',\n      )\n      .replace(\n        // eslint-disable-next-line no-control-regex\n        /[\\u0000\\u0007\\u000e\\u000f\\u200b-\\u200d\\ufeff]*$/,\n        '',\n      )\n      .trim();\n  }, schema.min(1));\n}\n/**\n * @internal\n */\nexport function nonEmptyStringSchema(description?: string) {\n  return nonEmpty(z.string({ description }));\n}\n/**\n * @internal\n */\nexport function encryptableStringSchema(description: string) {\n  return encryptable(nonEmptyStringSchema(description));\n}\n\n/**\n * An arbitrary string or its encrypted version.\n *\n * For example in the context of a token-gated publication, fields of this type are encrypted.\n */\nexport type EncryptableString = string | EncryptedString;\n\n/**\n * An arbitrary label.\n *\n * All lowercased, 50 characters max.\n */\nexport type Tag = Brand<string, 'Tag'>;\n/**\n * @internal\n */\nexport function toTag(value: string): Tag {\n  return value as Tag;\n}\n/**\n * @internal\n */\nexport const TagSchema: z.ZodType<Tag, z.ZodTypeDef, string> = z\n  .string()\n  .describe('An arbitrary tag.')\n  .min(1)\n  .max(50)\n  .transform((value) => toTag(value.toLowerCase()));\n\n/**\n * A unique Lens App identifier.\n */\nexport type AppId = Brand<string, 'AppId'>;\n/**\n * @internal\n */\nexport function toAppId(value: string): AppId {\n  return value as AppId;\n}\n/**\n * @internal\n */\nexport const AppIdSchema: z.ZodType<AppId, z.ZodTypeDef, string> = z\n  .string()\n  .describe('A Lens App identifier.')\n  .min(1)\n  .max(200)\n  .transform(toAppId);\n\n/**\n * A cryptographic signature.\n */\nexport type Signature = Brand<string, 'Signature'>;\n/**\n * @internal\n */\nexport function toSignature(value: string): Signature {\n  return value as Signature;\n}\n/**\n * @internal\n */\nexport const SignatureSchema: z.ZodType<Signature, z.ZodTypeDef, unknown> = z\n  .string()\n  .min(1)\n  .describe('A cryptographic signature of the Lens metadata.')\n  .transform(toSignature);\n\n/**\n * A markdown text.\n */\nexport type Markdown = Brand<string, 'Markdown'>;\n/**\n * @internal\n */\nexport function toMarkdown(value: string): Markdown {\n  return value as Markdown;\n}\n\n/**\n * @internal\n */\nexport function markdown(\n  schema: z.ZodType<string, z.ZodTypeDef, unknown>,\n): z.ZodType<Markdown, z.ZodTypeDef, unknown> {\n  return schema.transform(toMarkdown);\n}\n\n/**\n * A markdown text or its encrypted version.\n *\n * For example in the context of a token-gated publication, fields of this type are encrypted.\n */\nexport type EncryptableMarkdown = Markdown | EncryptedString;\n\n/**\n * A Uniform Resource Identifier.\n *\n * It could be a URL pointing to a specific resource,\n * an IPFS URI (e.g. ipfs://Qm...), or an Arweave URI (e.g. ar://Qm...).\n */\nexport type URI = Brand<string, 'URI'>;\n/**\n * @internal\n */\nexport function toUri(value: string): URI {\n  return value as URI;\n}\n/**\n * @internal\n */\nexport function uriSchema(\n  description: string = 'A Uniform Resource Identifier. ',\n): z.ZodType<URI, z.ZodTypeDef, unknown> {\n  return z\n    .string({ description })\n    .min(6) // [ar://.]\n    .url({ message: 'Should be a valid URI' }) // reads url() but works well with URIs too and uses format: 'uri' in the JSON schema\n    .transform(toUri);\n}\n/**\n * @internal\n */\nexport function encryptableUriSchema(description?: string) {\n  return encryptable(uriSchema(description));\n}\n\n/**\n * A URI or its encrypted version.\n *\n * For example in the context of a token-gated publication, fields of this type are encrypted.\n */\nexport type EncryptableURI = URI | EncryptedString;\n\nconst geoUriRegex = /^geo:(-?\\d+\\.?\\d*),(-?\\d+\\.?\\d*)$/;\n\nconst LatitudeSchema = z.coerce.number({ description: 'The latitude.' }).min(-90).max(90);\n\nconst LongitudeSchema = z.coerce.number({ description: 'The longitude.' }).min(-180).max(180);\n\n/**\n * A Geographic coordinate as subset of Geo URI (RFC 5870).\n *\n * Currently only supports the `geo:lat,lng` format.\n *\n * Use the {@link geoUri} helper to create one, do not attempt to create one manually.\n *\n * @example\n * ```ts\n * 'geo:40.689247,-74.044502'\n *\n * 'geo:41.890209,12.492231'\n * ```\n *\n * @see https://tools.ietf.org/html/rfc5870\n */\nexport type GeoURI = `geo:${number},${number}`;\n/**\n * @internal\n */\nexport const GeoURISchema = z\n  .string()\n  .describe(\n    'A Geographic coordinate as subset of Geo URI (RFC 5870). ' +\n      'Currently only supports the `geo:lat,lng` format.',\n  )\n  .regex(geoUriRegex, 'Should be a Geo URI. Expected `geo:lat,lng`.')\n  .superRefine((val, ctx): val is GeoURI => {\n    const match = geoUriRegex.exec(val);\n\n    if (!match) {\n      // should never happen\n      return z.NEVER;\n    }\n\n    const [, latitude = '', longitude = ''] = match;\n\n    const latResult = LatitudeSchema.safeParse(latitude);\n    if (!latResult.success) {\n      latResult.error.issues.forEach((issue) =>\n        ctx.addIssue({\n          ...issue,\n          path: [...ctx.path, 'lat'],\n        }),\n      );\n    }\n\n    const lngResult = LongitudeSchema.safeParse(longitude);\n    if (!lngResult.success) {\n      lngResult.error.issues.forEach((issue) =>\n        ctx.addIssue({\n          ...issue,\n          path: [...ctx.path, 'lng'],\n        }),\n      );\n    }\n\n    return z.NEVER;\n  });\n\n/**\n * A geographic point on the Earth.\n */\nexport type GeoPoint = {\n  /**\n   * The latitude in decimal degrees (from -90° to +90°).\n   */\n  lat: number;\n\n  /**\n   * The longitude in decimal degrees (from -180° to +180°).\n   */\n  lng: number;\n};\n/**\n * @internal\n */\nexport const GeoPointSchema: z.ZodType<GeoPoint, z.ZodTypeDef, object> = z.object({\n  lat: LatitudeSchema,\n  lng: LongitudeSchema,\n});\n\n/**\n * Helper to create a Geo URI from a {@link GeoPoint}.\n *\n * @category Helpers\n * @example\n * ```ts\n * geoUri({ lat: 40.689247, lng: -74.044502 }) // 'geo:40.689247,-74.044502'\n *\n * geoUri({ lat: 41.890209, lng: 12.492231 }) // 'geo:41.890209,12.492231'\n * ```\n */\nexport function geoUri(point: GeoPoint): GeoURI {\n  const result = GeoPointSchema.safeParse(point);\n\n  if (result.success) {\n    const { lat, lng } = result.data;\n    return `geo:${lat},${lng}`;\n  }\n\n  never(formatZodError(result.error));\n}\n\n/**\n * Helper to parse a {@link GeoPoint} from a {@link GeoURI}.\n *\n * @category Helpers\n */\nexport function geoPoint(value: GeoURI): GeoPoint {\n  const uri = GeoURISchema.parse(value);\n\n  const match = geoUriRegex.exec(uri);\n\n  invariant(match, 'Invalid Geo URI format. Expected `geo:lat,lng`.');\n\n  const [, lat = '', lng = ''] = match;\n  return GeoPointSchema.parse({ lat, lng });\n}\n/**\n * @internal\n */\nexport function encryptableGeoUriSchema(description: string) {\n  return encryptable(GeoURISchema.describe(description));\n}\n\n/**\n * A Geo URI or its encrypted version.\n *\n * For example in the context of a token-gated publication, fields of this type are encrypted.\n */\nexport type EncryptableGeoURI = GeoURI | EncryptedString;\n\n/**\n * The address of a physical location.\n */\nexport type PhysicalAddress = {\n  /**\n   * The full mailing address formatted for display.\n   */\n  formatted?: EncryptableString;\n  /**\n   * The street address including house number, street name, P.O. Box,\n   * apartment or unit number and extended multi-line address information.\n   */\n  streetAddress?: EncryptableString;\n  /**\n   * The city or locality.\n   */\n  locality: EncryptableString;\n  /**\n   * The state or region.\n   */\n  region?: EncryptableString;\n  /**\n   * The zip or postal code.\n   */\n  postalCode?: EncryptableString;\n  /**\n   * The country name component.\n   */\n  country: EncryptableString;\n};\n/**\n * @internal\n */\nexport const PhysicalAddressSchema: z.ZodType<PhysicalAddress, z.ZodTypeDef, object> = z.object({\n  formatted: encryptableStringSchema('The full mailing address formatted for display.').optional(),\n  streetAddress: encryptableStringSchema(\n    'The street address including house number, street name, P.O. Box, ' +\n      'apartment or unit number and extended multi-line address information.',\n  ).optional(),\n  locality: encryptableStringSchema('The city or locality.'),\n  region: encryptableStringSchema('The state or region.').optional(),\n  postalCode: encryptableStringSchema('The zip or postal code.').optional(),\n  country: encryptableStringSchema('The country name component.'),\n});\n\n/**\n * An ISO 8601 in the JS simplified format: `YYYY-MM-DDTHH:mm:ss.sssZ`.\n */\nexport type DateTime = Brand<string, 'DateTime'>;\n/**\n * @internal\n */\nexport function toDateTime(value: string): DateTime {\n  return value as DateTime;\n}\n/**\n * @internal\n */\nexport function datetimeSchema(description: string): z.ZodType<DateTime, z.ZodTypeDef, unknown> {\n  return z.string({ description }).datetime().transform(toDateTime);\n}\n/**\n * @internal\n */\nexport function encryptableDateTimeSchema(description: string) {\n  return encryptable(datetimeSchema(description));\n}\n\n/**\n * A DateTime or its encrypted version.\n *\n * For example in the context of a token-gated publication, fields of this type are encrypted.\n */\nexport type EncryptableDateTime = DateTime | EncryptedString;\n\n/**\n * An EVM compatible address.\n */\nexport type EvmAddress = Brand<string, 'EvmAddress'>;\n/**\n * @internal\n */\nexport function toEvmAddress(value: string): EvmAddress {\n  return value as EvmAddress;\n}\n/**\n * @internal\n */\nexport const EvmAddressSchema: z.ZodType<EvmAddress, z.ZodTypeDef, unknown> = z\n  .string()\n  .length(42)\n  .describe('An EVM compatible address.')\n  .transform(toEvmAddress);\n\n/**\n * An EVM compatible Chain Id.\n */\nexport type ChainId = Brand<number, 'ChainId'>;\n/**\n * @internal\n */\nexport function toChainId(value: number): ChainId {\n  return value as ChainId;\n}\n/**\n * @internal\n */\nexport const ChainIdSchema: z.ZodType<ChainId, z.ZodTypeDef, unknown> = z\n  .number()\n  .positive()\n  .transform(toChainId);\n\n/**\n * An EVM compatible address on a specific chain.\n */\nexport type NetworkAddress = {\n  /**\n   * The chain id.\n   */\n  chainId: ChainId;\n  /**\n   * The EVM address.\n   */\n  address: EvmAddress;\n};\n/**\n * @internal\n */\nexport const NetworkAddressSchema: z.ZodType<NetworkAddress, z.ZodTypeDef, unknown> = z.object(\n  {\n    chainId: ChainIdSchema,\n    address: EvmAddressSchema,\n  },\n  {\n    description: 'An EVM compatible address on a specific chain.',\n  },\n);\n\n/**\n * An NFT token identifier.\n */\nexport type TokenId = Brand<string, 'TokenId'>;\n/**\n * @internal\n */\nexport function toTokenId(value: string): TokenId {\n  return value as TokenId;\n}\n/**\n * @internal\n */\nexport const TokenIdSchema: z.ZodType<TokenId, z.ZodTypeDef, unknown> = z\n  .string()\n  .min(1)\n  .transform(toTokenId);\n\n/**\n * A Fungible Tokens. Usually an ERC20 token.\n */\nexport type Asset = {\n  /**\n   * The asset contract address.\n   */\n  contract: NetworkAddress;\n  /**\n   * The number of decimals of the asset (e.g. 18 for WETH)\n   */\n  decimals: number;\n};\n/**\n * @internal\n */\nexport const AssetSchema: z.ZodType<Asset, z.ZodTypeDef, unknown> = z.object({\n  contract: NetworkAddressSchema,\n  decimals: z.number({ description: 'The number of decimals of the asset.' }).int().nonnegative(),\n});\n/**\n * Creates an {@link Asset}.\n *\n * @internal\n */\nexport function asset(contract: NetworkAddressDetails, decimals: number): Asset {\n  return AssetSchema.parse({ contract, decimals });\n}\n\n/**\n * An amount of a specific asset.\n */\nexport type Amount = {\n  /**\n   * The asset.\n   *\n   * See {@link asset} helper to create one.\n   */\n  asset: Asset;\n  /**\n   * The amount in the smallest unit of the given asset (e.g. wei for ETH).\n   */\n  value: string;\n};\n/**\n * @internal\n */\nexport const AmountSchema: z.ZodType<Amount, z.ZodTypeDef, unknown> = z.object(\n  {\n    asset: AssetSchema,\n    value: nonEmptyStringSchema(\n      'The amount in the smallest unit of the given asset (e.g. wei for ETH).',\n    ),\n  },\n  {\n    description: 'An amount of a specific asset.',\n  },\n);\n\nexport type NetworkAddressDetails = {\n  /**\n   * The chain id.\n   */\n  chainId: number;\n  /**\n   * The EVM address.\n   */\n  address: string;\n};\n\n/**\n * @internal\n */\nexport type AmountDetails = {\n  contract: NetworkAddressDetails;\n  decimals: number;\n  value: string;\n};\n/**\n * @internal\n */\nexport function amount(input: AmountDetails): Amount {\n  return AmountSchema.parse({\n    asset: asset(input.contract, input.decimals),\n    value: input.value,\n  });\n}\n\n/**\n * A Lens Profile identifier.\n *\n * @example\n * ```\n * 0x01\n * ```\n */\nexport type ProfileId = Brand<string, 'ProfileId'>;\n/**\n * @internal\n */\nexport function toProfileId(value: string): ProfileId {\n  return value as ProfileId;\n}\n/**\n * @internal\n */\nexport const ProfileIdSchema: z.ZodType<ProfileId, z.ZodTypeDef, unknown> = z\n  .string()\n  .min(4)\n  .transform(toProfileId);\n\n/**\n * A Lens Publication identifier.\n *\n * No Momoka publications for now.\n *\n * @example\n * ```\n * 0x01-0x01\n * ```\n */\nexport type PublicationId = Brand<string, 'PublicationId'>;\n/**\n * @internal\n */\nexport function toPublicationId(value: string): PublicationId {\n  return value as PublicationId;\n}\n/**\n * @internal\n */\nexport const PublicationIdSchema: z.ZodType<PublicationId, z.ZodTypeDef, unknown> = z\n  .string()\n  .min(9)\n  .transform(toPublicationId);\n","import { z } from 'zod';\n\nexport * from './common';\nexport * from './3D.js';\nexport * from './ArticleSchema.js';\nexport * from './AudioSchema.js';\nexport * from './CheckingInSchema.js';\nexport * from './EmbedSchema.js';\nexport * from './EventSchema.js';\nexport * from './ImageSchema.js';\nexport * from './LinkSchema.js';\nexport * from './LiveStreamSchema.js';\nexport * from './MintSchema.js';\nexport * from './MirrorSchemaId.js';\nexport * from './MirrorMetadataSchema.js';\nexport * from './PublicationMainFocus.js';\nexport * from './PublicationSchemaId.js';\nexport * from './SpaceSchema.js';\nexport * from './StorySchema.js';\nexport * from './TextOnlySchema.js';\nexport * from './TransactionSchema.js';\nexport * from './VideoSchema.js';\n\nimport { ThreeDMetadata, ThreeDSchema } from './3D.js';\nimport { ArticleMetadata, ArticleSchema } from './ArticleSchema.js';\nimport { AudioMetadata, AudioSchema } from './AudioSchema.js';\nimport { CheckingInMetadata, CheckingInSchema } from './CheckingInSchema.js';\nimport { EmbedMetadata, EmbedSchema } from './EmbedSchema';\nimport { EventMetadata, EventSchema } from './EventSchema.js';\nimport { ImageMetadata, ImageSchema } from './ImageSchema.js';\nimport { LinkMetadata, LinkSchema } from './LinkSchema.js';\nimport { LiveStreamMetadata, LiveStreamSchema } from './LiveStreamSchema.js';\nimport { MintMetadata, MintSchema } from './MintSchema.js';\nimport { SpaceMetadata, SpaceSchema } from './SpaceSchema.js';\nimport { StoryMetadata, StorySchema } from './StorySchema.js';\nimport { TextOnlyMetadata, TextOnlySchema } from './TextOnlySchema.js';\nimport { TransactionMetadata, TransactionSchema } from './TransactionSchema.js';\nimport { VideoMetadata, VideoSchema } from './VideoSchema.js';\nimport { ShapeCheck } from '../utils';\n\n/**\n * `PublicationMetadata` is a discriminated union of all primary publication metadata.\n *\n * @example\n * Use the `$schema` property to narrow down the type of the metadata:\n * ```ts\n * const metadata: PublicationMetadata = ...\n *\n * if (metadata.$schema === PublicationSchemaId.ARTICLE_LATEST) {\n *   // metadata is ArticleMetadata\n *   metadata.content; // => always string, not undefined\n * }\n * ```\n *\n * @example\n * Use the `$schema` property to determine the type of the metadata in an exhaustive switch statement:\n * ```ts\n * const metadata: PublicationMetadata = ...\n *\n * switch (metadata.$schema) {\n *   case PublicationSchemaId.ARTICLE_LATEST:\n *     // metadata is ArticleMetadata\n *     break;\n *   case PublicationSchemaId.AUDIO_LATEST:\n *     // metadata is AudioMetadata\n *     break;\n *   case PublicationSchemaId.IMAGE_LATEST:\n *     // metadata is ImageMetadata\n *     break;\n *   case PublicationSchemaId.TEXT_ONLY_LATEST:\n *     // metadata is TextOnlyMetadata\n *     break;\n *   // ...\n * }\n * ```\n */\nexport type PublicationMetadata = ShapeCheck<\n  | ArticleMetadata\n  | AudioMetadata\n  | CheckingInMetadata\n  | EmbedMetadata\n  | EventMetadata\n  | ImageMetadata\n  | LinkMetadata\n  | LiveStreamMetadata\n  | MintMetadata\n  | SpaceMetadata\n  | TextOnlyMetadata\n  | StoryMetadata\n  | TransactionMetadata\n  | ThreeDMetadata\n  | VideoMetadata\n>;\n\n/**\n * A union of all publication metadata schemas.\n *\n * @category Parse\n *\n * @example\n * with `parse`:\n * ```ts\n * PublicationMetadataSchema.parse(valid); // => PublicationMetadata\n *\n * PublicationMetadataSchema.parse(invalid); // => throws ZodError\n * ```\n *\n * @example\n * with `safeParse`:\n * ```ts\n * PublicationMetadataSchema.safeParse(valid);\n * // => { success: true, data: PublicationMetadata }\n *\n * PublicationMetadataSchema.safeParse(invalid);\n * // => { success: false, error: ZodError }\n * ```\n */\nexport const PublicationMetadataSchema: z.ZodType<PublicationMetadata, z.ZodTypeDef, object> =\n  z.discriminatedUnion('$schema', [\n    ArticleSchema,\n    AudioSchema,\n    CheckingInSchema,\n    EmbedSchema,\n    EventSchema,\n    ImageSchema,\n    LinkSchema,\n    LiveStreamSchema,\n    MintSchema,\n    SpaceSchema,\n    TextOnlySchema,\n    StorySchema,\n    TransactionSchema,\n    ThreeDSchema,\n    VideoSchema,\n  ]);\n","import { z } from 'zod';\n\nimport {\n  PublicationEncryptionStrategy,\n  PublicationEncryptionStrategySchema,\n} from './encryption.js';\nimport { MetadataAttribute, MetadataAttributeSchema } from '../../MetadataAttribute.js';\nimport { MarketplaceMetadataSchema } from '../../marketplace.js';\nimport {\n  AppIdSchema,\n  LocaleSchema,\n  TagSchema,\n  nonEmptyStringSchema,\n  SignatureSchema,\n  AppId,\n  Locale,\n  Tag,\n  encryptable,\n  markdown,\n} from '../../primitives.js';\nimport { PublicationMainFocus } from '../PublicationMainFocus.js';\n\nexport * from './encryption.js';\nexport * from './license.js';\nexport * from './media.js';\nexport * from './timezones.js';\n\nexport enum PublicationContentWarning {\n  NSFW = 'NSFW',\n  SENSITIVE = 'SENSITIVE',\n  SPOILER = 'SPOILER',\n}\n\n/**\n * Common fields of a Lens primary publication.\n */\nexport type PublicationMetadataCommon = {\n  /**\n   * A unique identifier that in storages like IPFS ensures the uniqueness of the metadata URI.\n   *\n   * Use a UUID if unsure.\n   */\n  id: string;\n  /**\n   * The App Id that this publication belongs to.\n   */\n  appId?: AppId;\n  /**\n   * Determine if the publication should not be shown in any feed.\n   *\n   * @defaultValue false\n   */\n  hideFromFeed?: boolean;\n  /**\n   * A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard.\n   * Over time, common attributes will be added to the standard and their usage as arbitrary attributes will be discouraged.\n   */\n  attributes?: MetadataAttribute[];\n  /**\n   * The locale of the metadata.\n   */\n  locale: Locale;\n  /**\n   * The encryption strategy used to encrypt the publication.\n   *\n   * If not present, the publication is presumed to be unencrypted.\n   */\n  encryptedWith?: PublicationEncryptionStrategy;\n  /**\n   * An arbitrary list of tags.\n   */\n  tags?: Tag[];\n  /**\n   * Specify a content warning.\n   */\n  contentWarning?: PublicationContentWarning;\n};\n\nconst PublicationMetadataCommonSchema = z.object({\n  id: nonEmptyStringSchema(\n    'A unique identifier that in storages like IPFS ensures the uniqueness of the metadata URI. Use a UUID if unsure.',\n  ),\n\n  appId: AppIdSchema.optional().describe('The App Id that this publication belongs to.'),\n\n  hideFromFeed: z\n    .boolean({\n      description: 'Determine if the publication should not be shown in any feed.',\n    })\n    .optional(),\n\n  attributes: MetadataAttributeSchema.array()\n    .min(1)\n    .max(20)\n    .optional()\n    .describe(\n      'A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard. ' +\n        'Over time, common attributes will be added to the standard and their usage as arbitrary attributes will be discouraged.',\n    ),\n\n  locale: LocaleSchema,\n\n  encryptedWith: PublicationEncryptionStrategySchema.optional(),\n\n  tags: z\n    .set(TagSchema) // z.set(...) sets uniqueItems: true in generated JSON Schemas\n    .max(20)\n    .catch((ctx) => ctx.input as Set<Tag>)\n    .superRefine((input, ctx) => {\n      // but needs to be corrected in code\n      const result = z.array(TagSchema).max(20).safeParse(input);\n\n      if (result.success) {\n        const uniqueTags = [...new Set(result.data)];\n        if (result.data.length > uniqueTags.length) {\n          ctx.addIssue({\n            code: z.ZodIssueCode.custom,\n            fatal: true,\n            message: `Duplicate tags are not allowed: ${result.data.join(', ')}`,\n          });\n        }\n        return z.NEVER;\n      }\n\n      result.error.issues.forEach((issue) => {\n        ctx.addIssue(issue);\n      });\n    })\n    .transform((value) => [...value]) // type coercion\n    .optional()\n    .describe('An arbitrary list of tags.'),\n\n  contentWarning: z\n    .nativeEnum(PublicationContentWarning, { description: 'Specify a content warning.' })\n    .optional(),\n});\n\n/**\n * Ok, ok, don't! It's really not meant to be used outside.\n * Don't have Kenny say you we told you so.\n *\n * @internal\n */\nexport function metadataDetailsWith<\n  Augmentation extends {\n    mainContentFocus:\n      | z.ZodLiteral<PublicationMainFocus>\n      | z.ZodUnion<[z.ZodLiteral<PublicationMainFocus>, ...z.ZodLiteral<PublicationMainFocus>[]]>;\n  },\n>(augmentation: Augmentation) {\n  return PublicationMetadataCommonSchema.extend(augmentation);\n}\n\n/**\n * Ok, ok, don't! It's really not meant to be used outside.\n * Don't have Kenny say you we told you so.\n *\n * @internal\n */\nexport function publicationWith<\n  Augmentation extends {\n    $schema: z.ZodLiteral<string>;\n    lens: ReturnType<typeof metadataDetailsWith>;\n  },\n>(augmentation: Augmentation) {\n  return MarketplaceMetadataSchema.extend({\n    signature: SignatureSchema.optional(),\n    ...augmentation,\n  });\n}\n\n/**\n * Ok, ok, don't! It's really not meant to be used outside.\n * Don't have Kenny say you we told you so.\n *\n * @internal\n */\nexport function mainContentFocus<T extends PublicationMainFocus>(focus: T): z.ZodLiteral<T>;\nexport function mainContentFocus<T extends PublicationMainFocus, O extends PublicationMainFocus>(\n  ...focuses: [T, O]\n): z.ZodUnion<[z.ZodLiteral<T>, z.ZodLiteral<O>]>;\nexport function mainContentFocus(...focuses: [PublicationMainFocus, ...PublicationMainFocus[]]) {\n  const description = 'The main focus of the publication.';\n  if (focuses.length > 1) {\n    const literals = focuses.map((value) => z.literal(value)) as [\n      z.ZodLiteral<PublicationMainFocus>,\n      z.ZodLiteral<PublicationMainFocus>,\n      ...z.ZodLiteral<PublicationMainFocus>[],\n    ];\n    return z.union(literals, { description });\n  }\n  return z.literal(focuses[0], { description });\n}\n\n/**\n * @internal\n */\nexport function optionalContentSchema() {\n  return encryptable(markdown(z.string({ description: 'Optional markdown content.' }))).optional();\n}\n","/* eslint-disable no-case-declarations */\nimport { z } from 'zod';\n\nimport {\n  Amount,\n  AmountSchema,\n  EvmAddress,\n  EvmAddressSchema,\n  NetworkAddress,\n  NetworkAddressSchema,\n  ProfileId,\n  ProfileIdSchema,\n  PublicationId,\n  PublicationIdSchema,\n  TokenId,\n  TokenIdSchema,\n  nonEmptyStringSchema,\n} from '../../primitives.js';\nimport { hasTwoOrMore, Brand, TwoAtLeastArray } from '../../utils.js';\n\nexport enum EncryptionProvider {\n  LIT_PROTOCOL = 'LIT_PROTOCOL',\n}\n\nexport enum NftContractType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n}\n\nexport enum ConditionType {\n  NFT_OWNERSHIP = 'NFT_OWNERSHIP',\n  ERC20_OWNERSHIP = 'ERC20_OWNERSHIP',\n  EOA_OWNERSHIP = 'EOA_OWNERSHIP',\n  PROFILE_OWNERSHIP = 'PROFILE_OWNERSHIP',\n  FOLLOW = 'FOLLOW',\n  COLLECT = 'COLLECT',\n  ADVANCED_CONTRACT = 'ADVANCED_CONTRACT',\n  AND = 'AND',\n  OR = 'OR',\n}\n\nexport type NftOwnershipCondition = {\n  type: ConditionType.NFT_OWNERSHIP;\n  contractType: NftContractType;\n  contract: NetworkAddress;\n  tokenIds?: TokenId[];\n};\n\n/**\n * @private\n */\nexport function refineNftOwnershipCondition(\n  condition: NftOwnershipCondition,\n  ctx: z.RefinementCtx,\n) {\n  if (condition.contractType === NftContractType.ERC1155) {\n    if (condition.tokenIds === undefined || condition.tokenIds.length === 0) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: 'ERC1155 requires at least one token id.',\n        path: [...ctx.path, 'tokenIds'],\n      });\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport const NftOwnershipConditionSchema = z.object({\n  type: z.literal(ConditionType.NFT_OWNERSHIP),\n  contract: NetworkAddressSchema,\n  contractType: z.nativeEnum(NftContractType),\n  tokenIds: TokenIdSchema.array()\n    .min(1)\n    .optional()\n    .describe(\n      'A list of token IDs you want to check ownership of. The list is optional for ERC721, ' +\n        'you MUST provide a list of token IDs for ERC1155.',\n    ),\n});\n\nexport enum ConditionComparisonOperator {\n  EQUAL = 'EQUAL',\n  NOT_EQUAL = 'NOT_EQUAL',\n  GREATER_THAN = 'GREATER_THAN',\n  GREATER_THAN_OR_EQUAL = 'GREATER_THAN_OR_EQUAL',\n  LESS_THAN = 'LESS_THAN',\n  LESS_THAN_OR_EQUAL = 'LESS_THAN_OR_EQUAL',\n}\n\nexport type Erc20OwnershipCondition = {\n  type: ConditionType.ERC20_OWNERSHIP;\n  amount: Amount;\n  condition: ConditionComparisonOperator;\n};\n/**\n * @internal\n */\nexport const Erc20OwnershipConditionSchema = z.object({\n  type: z.literal(ConditionType.ERC20_OWNERSHIP),\n  amount: AmountSchema,\n  condition: z.nativeEnum(ConditionComparisonOperator),\n});\n\nexport type EoaOwnershipCondition = {\n  type: ConditionType.EOA_OWNERSHIP;\n  address: EvmAddress;\n};\n/**\n * @internal\n */\nexport const EoaOwnershipConditionSchema = z.object({\n  type: z.literal(ConditionType.EOA_OWNERSHIP),\n  address: EvmAddressSchema,\n});\n\nexport type ProfileOwnershipCondition = {\n  type: ConditionType.PROFILE_OWNERSHIP;\n  profileId: ProfileId;\n};\n/**\n * @internal\n */\nexport const ProfileOwnershipConditionSchema = z.object({\n  type: z.literal(ConditionType.PROFILE_OWNERSHIP),\n  profileId: ProfileIdSchema,\n});\n\nexport type FollowCondition = {\n  type: ConditionType.FOLLOW;\n  follow: ProfileId;\n};\n/**\n * @internal\n */\nexport const FollowConditionSchema = z.object({\n  type: z.literal(ConditionType.FOLLOW),\n  follow: ProfileIdSchema,\n});\n\nexport type CollectCondition = {\n  type: ConditionType.COLLECT;\n  publicationId: PublicationId;\n  thisPublication: boolean;\n};\n/**\n * @internal\n */\nexport const CollectConditionSchema = z.object({\n  type: z.literal(ConditionType.COLLECT),\n  publicationId: PublicationIdSchema, // TODO check on-chain publication ID\n  thisPublication: z.boolean().optional().default(false),\n});\n\nexport type AdvancedContractCondition = {\n  type: ConditionType.ADVANCED_CONTRACT;\n  contract: NetworkAddress;\n  functionName: string;\n  abi: string;\n  params: string[];\n  comparison: ConditionComparisonOperator;\n  value: string;\n};\n\n/**\n * @internal\n */\nexport const AdvancedContractConditionSchema = z.object({\n  type: z.literal(ConditionType.ADVANCED_CONTRACT),\n  contract: NetworkAddressSchema.describe('The contract address and chain id'),\n  functionName: z.string().min(1).describe('The name of the function you want to call'),\n  abi: z\n    .string()\n    .min(1)\n    .describe(\n      'The contract ABI. Has to be in human readable ' +\n        'single string format containing the signature of the function you want to call. See ' +\n        'https://docs.ethers.org/v5/api/utils/abi/fragments/#human-readable-abi for more info',\n    ),\n  params: z\n    .string()\n    .array()\n    .describe(\n      'The parameters to pass to the function. Must be ' +\n        'exactly matching the function arguments. You *must* pass in the `:userAddress` parameter to ' +\n        'represent the decrypter address. Any array or tuple arguments, must be stringified JSON arrays.',\n    ),\n  comparison: z\n    .nativeEnum(ConditionComparisonOperator)\n    .describe(\n      'The comparison operator to use. In case of boolean functions you can only use EQUAL or NOT_EQUAL',\n    ),\n  value: z\n    .string()\n    .regex(/^(true|false|\\d{1,70})$/)\n    .describe(`The comparison value. Accepts 'true', 'false' or a number`),\n});\n\nexport type SimpleCondition =\n  | CollectCondition\n  | AdvancedContractCondition\n  | EoaOwnershipCondition\n  | Erc20OwnershipCondition\n  | FollowCondition\n  | NftOwnershipCondition\n  | ProfileOwnershipCondition;\n\ntype BaseCondition = {\n  type: ConditionType;\n};\n\ntype ComposableConditionSchema<T extends BaseCondition = BaseCondition> = z.ZodObject<\n  {\n    type: z.ZodTypeAny;\n  } & z.ZodRawShape,\n  z.UnknownKeysParam,\n  z.ZodTypeAny,\n  T\n>;\n\nexport type AndCondition<T extends BaseCondition = SimpleCondition> = {\n  type: ConditionType.AND;\n  criteria: TwoAtLeastArray<T>;\n};\n\nfunction andConditionSchema<\n  Criteria extends [\n    ComposableConditionSchema,\n    ComposableConditionSchema,\n    ...ComposableConditionSchema[],\n  ],\n>(options: Criteria): ComposableConditionSchema<AndCondition<z.infer<Criteria[number]>>> {\n  return z.object({\n    type: z.literal(ConditionType.AND),\n    criteria: z\n      .discriminatedUnion('type', options)\n      .array()\n      .max(5, 'Should have at most 5 conditions')\n      .refine(hasTwoOrMore, 'Should have at least 2 conditions'),\n  });\n}\n\n/**\n * @internal\n */\nexport const AndConditionSchema = andConditionSchema([\n  NftOwnershipConditionSchema,\n  Erc20OwnershipConditionSchema,\n  EoaOwnershipConditionSchema,\n  ProfileOwnershipConditionSchema,\n  FollowConditionSchema,\n  CollectConditionSchema,\n  AdvancedContractConditionSchema,\n]);\n\nexport type OrCondition<T extends BaseCondition = SimpleCondition> = {\n  type: ConditionType.OR;\n  criteria: TwoAtLeastArray<T>;\n};\n\nfunction orConditionSchema<\n  Criteria extends [\n    ComposableConditionSchema,\n    ComposableConditionSchema,\n    ...ComposableConditionSchema[],\n  ],\n>(options: Criteria): ComposableConditionSchema<OrCondition<z.infer<Criteria[number]>>> {\n  return z.object({\n    type: z.literal(ConditionType.OR),\n    criteria: z\n      .discriminatedUnion('type', options)\n      .array()\n      .max(5, 'Should have at most 5 conditions')\n      .refine(hasTwoOrMore, 'Should have at least 2 conditions'),\n  });\n}\n\n/**\n * @internal\n */\nexport const OrConditionSchema = orConditionSchema([\n  NftOwnershipConditionSchema,\n  Erc20OwnershipConditionSchema,\n  EoaOwnershipConditionSchema,\n  ProfileOwnershipConditionSchema,\n  FollowConditionSchema,\n  CollectConditionSchema,\n  AdvancedContractConditionSchema,\n]);\n\nexport type AnyCondition =\n  | SimpleCondition\n  | AndCondition<SimpleCondition>\n  | OrCondition<SimpleCondition>;\n\nfunction refineAnyCondition(condition: AnyCondition, ctx: z.RefinementCtx) {\n  if (condition.type === ConditionType.AND || condition.type === ConditionType.OR) {\n    condition.criteria.forEach((c, idx) =>\n      refineAnyCondition(c, { ...ctx, path: [...ctx.path, 'criteria', idx] }),\n    );\n  }\n  if (condition.type === ConditionType.NFT_OWNERSHIP) {\n    refineNftOwnershipCondition(condition, ctx);\n  }\n}\n\nexport type AccessCondition = OrCondition<AnyCondition>;\n/**\n * @internal\n */\nexport const AccessConditionSchema: z.ZodType<AccessCondition, z.ZodTypeDef, object> =\n  orConditionSchema([\n    AndConditionSchema,\n    CollectConditionSchema,\n    AdvancedContractConditionSchema,\n    EoaOwnershipConditionSchema,\n    Erc20OwnershipConditionSchema,\n    FollowConditionSchema,\n    NftOwnershipConditionSchema,\n    OrConditionSchema,\n    ProfileOwnershipConditionSchema,\n  ]).superRefine((root, ctx): root is AccessCondition => {\n    root.criteria.forEach((condition, idx) => {\n      refineAnyCondition(condition, {\n        ...ctx,\n        path: [...ctx.path, 'criteria', idx],\n      });\n    });\n    return z.NEVER;\n  });\n\n/**\n * A symmetric encryption key.\n */\nexport type LitEncryptionKey = Brand<string, 'LitEncryptionKey'>;\n/**\n * @internal\n */\nexport function toLitEncryptionKey(value: string): LitEncryptionKey {\n  return value as LitEncryptionKey;\n}\n/**\n * @internal\n */\nexport const LitEncryptionKeySchema: z.Schema<LitEncryptionKey, z.ZodTypeDef, string> = z\n  .string()\n  .describe('A symmetric encryption key.')\n  .length(368, 'Encryption key should be 368 characters long.')\n  .transform(toLitEncryptionKey);\n\n/**\n * @internal\n */\nexport const EncryptedPaths = nonEmptyStringSchema(\n  'An encrypted path is a string of keys separated by . that describe ' +\n    'a path to a value in a JSON object (e.g. lens.attachments.0.item.url, lens.content).',\n)\n  .array()\n  .min(1);\nexport type EncryptedPaths = z.infer<typeof EncryptedPaths>;\n\nexport type LitEncryptionStrategy = {\n  provider: EncryptionProvider;\n  encryptionKey: LitEncryptionKey;\n  accessCondition: AccessCondition;\n  encryptedPaths: string[];\n};\n/**\n * @internal\n */\nexport const LitEncryptionStrategySchema = z.object(\n  {\n    provider: z.literal(EncryptionProvider.LIT_PROTOCOL),\n    encryptionKey: LitEncryptionKeySchema,\n    accessCondition: AccessConditionSchema,\n    encryptedPaths: EncryptedPaths,\n  },\n  {\n    description: 'Publication encryption strategy powered by the LIT Protocol.',\n  },\n);\n\n/**\n * The publication encryption strategy.\n *\n * This is normally populated by the Lens SDK so the vast majority of developers will not need to use this directly.\n */\nexport type PublicationEncryptionStrategy = LitEncryptionStrategy;\n\n/**\n * @internal\n */\nexport const PublicationEncryptionStrategySchema: z.ZodType<\n  PublicationEncryptionStrategy,\n  z.ZodTypeDef,\n  object\n> = z.discriminatedUnion('provider', [LitEncryptionStrategySchema]);\n","import { z } from 'zod';\n\nimport { nonEmptyStringSchema } from './primitives.js';\n\n/**\n * The type of a metadata attribute.\n */\nexport enum MetadataAttributeType {\n  BOOLEAN = 'Boolean',\n  DATE = 'Date',\n  NUMBER = 'Number',\n  STRING = 'String',\n  JSON = 'JSON',\n}\n\nexport type BooleanAttribute = {\n  /**\n   * A JS boolean value serialized as string. It's consumer responsibility to parse it.\n   */\n  value: 'true' | 'false';\n  /**\n   * Union discriminant.\n   */\n  type: MetadataAttributeType.BOOLEAN;\n  /**\n   * The attribute's unique identifier.\n   */\n  key: string;\n};\n/**\n * @internal\n */\nexport const BooleanAttributeSchema = z.object({\n  type: z.literal(MetadataAttributeType.BOOLEAN),\n  key: nonEmptyStringSchema(\"The attribute's unique identifier.\"),\n  value: z\n    .enum(['true', 'false'])\n    .describe(\"A JS boolean value serialized as string. It's consumer responsibility to parse it.\"),\n});\n\nexport type DateAttribute = {\n  /**\n   * A valid ISO 8601 date string.  It's consumer responsibility to parse it.\n   */\n  value: string;\n  /**\n   * Union discriminant.\n   */\n  type: MetadataAttributeType.DATE;\n  /**\n   * The attribute's unique identifier.\n   */\n  key: string;\n};\n/**\n * @internal\n */\nexport const DateAttributeSchema = z.object({\n  type: z.literal(MetadataAttributeType.DATE),\n  key: nonEmptyStringSchema(\"The attribute's unique identifier.\"),\n  value: z\n    .string()\n    .datetime()\n    .describe(\"A valid ISO 8601 date string.  It's consumer responsibility to parse it.\"),\n});\n\nexport type NumberAttribute = {\n  /**\n   * A valid JS number serialized as string. It's consumer responsibility to parse it.\n   *\n   * @example\n   * ```ts\n   * '42'\n   *\n   * '42n'\n   *\n   * '42.42'\n   * ```\n   */\n  value: string;\n  /**\n   * Union discriminant.\n   */\n  type: MetadataAttributeType.NUMBER;\n  /**\n   * The attribute's unique identifier.\n   */\n  key: string;\n};\n/**\n * @internal\n */\nexport const NumberAttributeSchema = z.object({\n  type: z.literal(MetadataAttributeType.NUMBER),\n  key: nonEmptyStringSchema(\"The attribute's unique identifier.\"), // TODO generalize and share\n  value: nonEmptyStringSchema(\n    \"A valid JS number serialized as string. It's consumer responsibility to parse it.\",\n  ),\n});\n\nexport type StringAttribute = {\n  /**\n   * Any string value.\n   */\n  value: string;\n  /**\n   * Union discriminant.\n   */\n  type: MetadataAttributeType.STRING;\n  /**\n   * The attribute's unique identifier.\n   */\n  key: string;\n};\n/**\n * @internal\n */\nexport const StringAttributeSchema = z.object({\n  type: z.literal(MetadataAttributeType.STRING),\n  key: nonEmptyStringSchema(\"The attribute's unique identifier.\"),\n  value: nonEmptyStringSchema('A string value.'),\n});\n\nexport type JSONAttribute = {\n  /**\n   * A JSON string. It's consumer responsibility to validate and parse it.\n   */\n  value: string;\n  /**\n   * Union discriminant.\n   */\n  type: MetadataAttributeType.JSON;\n  /**\n   * Union discriminant.\n   */\n  /**\n   * The attribute's unique identifier.\n   */\n  key: string;\n};\n/**\n * @internal\n */\nexport const JSONAttributeSchema = z.object({\n  type: z.literal(MetadataAttributeType.JSON),\n  key: nonEmptyStringSchema(\"The attribute's unique identifier.\"),\n  value: nonEmptyStringSchema(\n    \"A JSON string. It's consumer responsibility to validate and parse it.\",\n  ),\n});\n\n/**\n * A Lens metadata attribute.\n */\nexport type MetadataAttribute =\n  | BooleanAttribute\n  | DateAttribute\n  | NumberAttribute\n  | StringAttribute\n  | JSONAttribute;\n\nexport const MetadataAttributeSchema = z.discriminatedUnion('type', [\n  BooleanAttributeSchema,\n  DateAttributeSchema,\n  NumberAttributeSchema,\n  StringAttributeSchema,\n  JSONAttributeSchema,\n]);\n","import { z } from 'zod';\n\nimport { Markdown, URI, markdown, nonEmptyStringSchema, uriSchema } from './primitives.js';\n\n/**\n * The display type of a marketplace metadata attribute.\n *\n * @see https://docs.opensea.io/docs/metadata-standards#attributes\n */\nexport enum MarketplaceMetadataAttributeDisplayType {\n  NUMBER = 'number',\n  STRING = 'string',\n  DATE = 'date',\n}\n\n/**\n * A marketplace metadata attribute.\n *\n * @see https://docs.opensea.io/docs/metadata-standards#attributes\n */\nexport type MarketplaceMetadataAttribute = {\n  value?: string | number | undefined;\n  display_type?: MarketplaceMetadataAttributeDisplayType | undefined;\n  trait_type?: string | undefined;\n};\n\n/**\n * @internal\n */\nexport const MarketplaceMetadataAttributeSchema: z.ZodType<\n  MarketplaceMetadataAttribute,\n  z.ZodTypeDef,\n  object\n> = z\n  .object({\n    display_type: z.nativeEnum(MarketplaceMetadataAttributeDisplayType).optional(),\n    trait_type: nonEmptyStringSchema('The name of the trait.').optional(),\n    value: z.union([z.string(), z.number()]).optional(),\n  })\n  .passthrough(); // make it more loose to allow for future marketplace extensions\n\n/**\n * The metadata standard for marketplace(s).\n *\n * @see https://docs.opensea.io/docs/metadata-standards#metadata-structure\n */\nexport type MarketplaceMetadata = {\n  /**\n   * A human-readable description of the item. It could be plain text or markdown.\n   */\n  description?: Markdown | null;\n  /**\n   * This is the URL that will appear below the asset's image on OpenSea and others etc.\n   * and will allow users to leave OpenSea and view the item on the site.\n   */\n  external_url?: URI | null;\n  /**\n   * Name of the NFT item.\n   */\n  name?: string;\n  /**\n   * These are the attributes for the item, which will show up on the OpenSea and others NFT trading websites on the item.\n   *\n   * @see https://docs.opensea.io/docs/metadata-standards#attributes\n   */\n  attributes?: MarketplaceMetadataAttribute[];\n  /**\n   * Marketplaces will store any NFT image here.\n   */\n  image?: URI | null;\n  /**\n   * A URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV,\n   * and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA.\n   * `animation_url` also supports HTML pages, allowing you to build rich experiences and interactive NFTs using JavaScript canvas,\n   * WebGL, and more. Scripts and relative paths within the HTML page are now supported. However, access to browser extensions is not supported.\n   */\n  animation_url?: URI | null;\n};\n\n/**\n * @internal\n */\nexport const MarketplaceMetadataSchema = z\n  .object({\n    description: markdown(\n      z.string({\n        description:\n          'A human-readable description of the item. It could be plain text or markdown.',\n      }),\n    )\n      .optional()\n      .nullable()\n      .catch(null),\n\n    external_url: uriSchema(\n      `This is the URL that will appear below the asset's image on OpenSea and others etc. ` +\n        'and will allow users to leave OpenSea and view the item on the site.',\n    )\n      .optional()\n      .nullable()\n      .catch(null),\n\n    name: z.string({ description: 'Name of the NFT item.' }).optional(),\n\n    attributes: MarketplaceMetadataAttributeSchema.array()\n      .optional()\n      .describe(\n        'These are the attributes for the item, which will show up on the OpenSea and others NFT trading websites on the item.',\n      )\n      .catch([]),\n\n    image: uriSchema('Marketplaces will store any NFT image here.')\n      .optional()\n      .nullable()\n      .catch(null),\n\n    animation_url: uriSchema(\n      'A URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, ' +\n        'and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. ' +\n        'Animation_url also supports HTML pages, allowing you to build rich experiences and interactive NFTs using JavaScript canvas, ' +\n        'WebGL, and more. Scripts and relative paths within the HTML page are now supported. However, access to browser extensions is not supported.',\n    )\n      .optional()\n      .nullable()\n      .catch(null),\n  })\n  .passthrough(); // loose validation for any unknown fields;\n","import { z } from 'zod';\n\n/**\n * The supported license types.\n */\nexport enum MetadataLicenseType {\n  CCO = 'CCO',\n  CC_BY = 'CC BY',\n  CC_BY_ND = 'CC BY-ND',\n  CC_BY_NC = 'CC BY-NC',\n  TBNL_C_D_PL_Legal = 'TBNL-C-D-PL-Legal',\n  TBNL_C_DT_PL_Legal = 'TBNL-C-DT-PL-Legal',\n  TBNL_C_ND_PL_Legal = 'TBNL-C-ND-PL-Legal',\n  TBNL_C_D_NPL_Legal = 'TBNL-C-D-NPL-Legal',\n  TBNL_C_DT_NPL_Legal = 'TBNL-C-DT-NPL-Legal',\n  TBNL_C_DTSA_PL_Legal = 'TBNL-C-DTSA-PL-Legal',\n  TBNL_C_DTSA_NPL_Legal = 'TBNL-C-DTSA-NPL-Legal',\n  TBNL_C_ND_NPL_Legal = 'TBNL-C-ND-NPL-Legal',\n  TBNL_C_D_PL_Ledger = 'TBNL-C-D-PL-Ledger',\n  TBNL_C_DT_PL_Ledger = 'TBNL-C-DT-PL-Ledger',\n  TBNL_C_ND_PL_Ledger = 'TBNL-C-ND-PL-Ledger',\n  TBNL_C_D_NPL_Ledger = 'TBNL-C-D-NPL-Ledger',\n  TBNL_C_DT_NPL_Ledger = 'TBNL-C-DT-NPL-Ledger',\n  TBNL_C_DTSA_PL_Ledger = 'TBNL-C-DTSA-PL-Ledger',\n  TBNL_C_DTSA_NPL_Ledger = 'TBNL-C-DTSA-NPL-Ledger',\n  TBNL_C_ND_NPL_Ledger = 'TBNL-C-ND-NPL-Ledger',\n  TBNL_NC_D_PL_Legal = 'TBNL-NC-D-PL-Legal',\n  TBNL_NC_DT_PL_Legal = 'TBNL-NC-DT-PL-Legal',\n  TBNL_NC_ND_PL_Legal = 'TBNL-NC-ND-PL-Legal',\n  TBNL_NC_D_NPL_Legal = 'TBNL-NC-D-NPL-Legal',\n  TBNL_NC_DT_NPL_Legal = 'TBNL-NC-DT-NPL-Legal',\n  TBNL_NC_DTSA_PL_Legal = 'TBNL-NC-DTSA-PL-Legal',\n  TBNL_NC_DTSA_NPL_Legal = 'TBNL-NC-DTSA-NPL-Legal',\n  TBNL_NC_ND_NPL_Legal = 'TBNL-NC-ND-NPL-Legal',\n  TBNL_NC_D_PL_Ledger = 'TBNL-NC-D-PL-Ledger',\n  TBNL_NC_DT_PL_Ledger = 'TBNL-NC-DT-PL-Ledger',\n  TBNL_NC_ND_PL_Ledger = 'TBNL-NC-ND-PL-Ledger',\n  TBNL_NC_D_NPL_Ledger = 'TBNL-NC-D-NPL-Ledger',\n  TBNL_NC_DT_NPL_Ledger = 'TBNL-NC-DT-NPL-Ledger',\n  TBNL_NC_DTSA_PL_Ledger = 'TBNL-NC-DTSA-PL-Ledger',\n  TBNL_NC_DTSA_NPL_Ledger = 'TBNL-NC-DTSA-NPL-Ledger',\n  TBNL_NC_ND_NPL_Ledger = 'TBNL-NC-ND-NPL-Ledger',\n}\n\n/**\n * @internal\n */\nexport const MetadataLicenseTypeSchema = z.nativeEnum(MetadataLicenseType);\n","import { z } from 'zod';\n\nimport { MetadataLicenseType, MetadataLicenseTypeSchema } from './license.js';\nimport { MetadataAttribute, MetadataAttributeSchema } from '../../MetadataAttribute.js';\nimport {\n  EncryptableString,\n  EncryptableURI,\n  encryptableStringSchema,\n  encryptableUriSchema,\n} from '../../primitives.js';\n\nconst MediaCommonSchema = z.object({\n  item: encryptableUriSchema('The location of the file.'),\n  attributes: MetadataAttributeSchema.array()\n    .min(1)\n    .optional()\n    .describe(\n      'A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard.',\n    ),\n});\n\n/**\n * The kind of audio media.\n */\nexport enum MediaAudioKind {\n  MUSIC = 'MUSIC',\n  PODCAST = 'PODCAST',\n  AUDIOBOOK = 'AUDIOBOOK',\n  VOICE_NOTE = 'VOICE_NOTE',\n  SOUND = 'SOUND',\n  OTHER = 'OTHER',\n}\n\n/**\n * Audio mime type.\n */\nexport enum MediaAudioMimeType {\n  WAV = 'audio/wav',\n  WAV_VND = 'audio/vnd.wave',\n  MP3 = 'audio/mpeg',\n  OGG_AUDIO = 'audio/ogg',\n  MP4_AUDIO = 'audio/mp4',\n  AAC = 'audio/aac',\n  WEBM_AUDIO = 'audio/webm',\n  FLAC = 'audio/flac',\n}\n\nexport type MediaAudio = {\n  /**\n   * The location of the file.\n   */\n  item: EncryptableURI;\n  /**\n   * A bag of attributes that can be used to store any kind\n   * of metadata that is not currently supported by the standard.\n   */\n  attributes?: MetadataAttribute[];\n  /**\n   * The mime type of the audio.\n   */\n  type: MediaAudioMimeType;\n  /**\n   * The cover image for the audio.\n   */\n  cover?: EncryptableURI;\n  /**\n   * How long the the audio is in seconds.\n   */\n  duration?: number;\n  /**\n   * The license for the audio.\n   */\n  license?: MetadataLicenseType;\n  /**\n   * The credits for the audio.\n   */\n  credits?: EncryptableString;\n  /**\n   * The name of the artist.\n   */\n  artist?: EncryptableString;\n  /**\n   * The genre of the audio.\n   */\n  genre?: EncryptableString;\n  /**\n   * The record label for the audio.\n   */\n  recordLabel?: EncryptableString;\n  /**\n   * The type of audio.\n   */\n  kind?: MediaAudioKind;\n  /**\n   * The lyrics for the audio.\n   */\n  lyrics?: EncryptableURI;\n};\n\n/**\n * @internal\n */\nexport const MediaAudioSchema = MediaCommonSchema.extend({\n  type: z.nativeEnum(MediaAudioMimeType, { description: 'The mime type of the audio file.' }),\n  cover: encryptableUriSchema('The cover image for the audio.').optional(),\n  duration: z\n    .number({ description: 'How long the the audio is in seconds.' })\n    .positive()\n    .int()\n    .optional(),\n  license: MetadataLicenseTypeSchema.optional().describe('The license for the audio.'),\n  credits: encryptableStringSchema('The credits for the audio.').optional(),\n  artist: encryptableStringSchema('The name of the artist.').optional(),\n  genre: encryptableStringSchema('The genre of the audio').optional(),\n  recordLabel: encryptableStringSchema('The record label for the audio.').optional(),\n  kind: z.nativeEnum(MediaAudioKind, { description: 'The type of audio.' }).optional(),\n  lyrics: encryptableUriSchema('The lyrics for the audio.').optional(),\n});\n\n/**\n * Image mime type.\n */\nexport enum MediaImageMimeType {\n  BMP = 'image/bmp',\n  GIF = 'image/gif',\n  HEIC = 'image/heic',\n  JPEG = 'image/jpeg',\n  PNG = 'image/png',\n  SVG_XML = 'image/svg+xml',\n  TIFF = 'image/tiff',\n  WEBP = 'image/webp',\n  X_MS_BMP = 'image/x-ms-bmp',\n}\n\nexport type MediaImage = {\n  /**\n   * The location of the file.\n   */\n  item: EncryptableURI;\n  /**\n   * A bag of attributes that can be used to store any kind\n   * of metadata that is not currently supported by the standard.\n   */\n  attributes?: MetadataAttribute[];\n  /**\n   * The mime type of the image.\n   */\n  type: MediaImageMimeType;\n  /**\n   * The alt tag for accessibility.\n   */\n  altTag?: EncryptableString;\n  /**\n   * The license for the image.\n   */\n  license?: MetadataLicenseType;\n};\n\n/**\n * @internal\n */\nexport const MediaImageSchema = MediaCommonSchema.extend({\n  type: z.nativeEnum(MediaImageMimeType, { description: 'The mime type of the image' }),\n  altTag: encryptableStringSchema('The alt tag for accessibility').optional(),\n  license: MetadataLicenseTypeSchema.optional().describe('The license for the image'),\n});\n\n/**\n * Video mime type.\n */\nexport enum MediaVideoMimeType {\n  GLTF = 'model/gltf+json',\n  GLTF_BINARY = 'model/gltf-binary',\n  M4V = 'video/x-m4v',\n  MOV = 'video/mov',\n  MP4 = 'video/mp4',\n  MPEG = 'video/mpeg',\n  OGG = 'video/ogg',\n  OGV = 'video/ogv',\n  QUICKTIME = 'video/quicktime',\n  WEBM = 'video/webm',\n}\n\nexport type MediaVideo = {\n  /**\n   * The location of the file.\n   */\n  item: EncryptableURI;\n  /**\n   * A bag of attributes that can be used to store any kind\n   * of metadata that is not currently supported by the standard.\n   */\n  attributes?: MetadataAttribute[];\n  /**\n   * The mime type of the video.\n   */\n  type: MediaVideoMimeType;\n  /**\n   * The alt tag for accessibility.\n   */\n  altTag?: string;\n  /**\n   * The cover image for the video.\n   */\n  cover?: EncryptableURI;\n  /**\n   * How long the the video is in seconds.\n   */\n  duration?: number;\n  /**\n   * The license for the video.\n   */\n  license?: MetadataLicenseType;\n};\n\n/**\n * @internal\n */\nexport const MediaVideoSchema = MediaCommonSchema.extend({\n  type: z.nativeEnum(MediaVideoMimeType, { description: 'The mime type of the video' }),\n  altTag: encryptableStringSchema('The alt tag for accessibility').optional(),\n  cover: encryptableUriSchema('The cover image for the video').optional(),\n  duration: z\n    .number({ description: 'How long the the video is in seconds' })\n    .positive()\n    .int()\n    .optional(),\n  license: MetadataLicenseTypeSchema.optional().describe('The license for the video'),\n});\n\n/**\n * Any media type.\n */\nexport type AnyMedia = MediaAudio | MediaImage | MediaVideo;\n\nconst AnyMediaImageMimeType = {\n  ...MediaAudioMimeType,\n  ...MediaImageMimeType,\n  ...MediaVideoMimeType,\n};\ntype AnyMediaImageMimeType = MediaAudioMimeType | MediaImageMimeType | MediaVideoMimeType;\n\ntype AnyMediaShape = Pick<AnyMedia, 'type'>;\nconst AnyMediaShapeScheme: z.ZodType<AnyMediaShape, z.ZodTypeDef, unknown> = z.object({\n  type: z.nativeEnum(AnyMediaImageMimeType),\n});\n\nfunction isAnyMediaShape(val: unknown): val is AnyMediaShape {\n  return AnyMediaShapeScheme.safeParse(val).success;\n}\n\nfunction resolveAnyMediaSchema(val: unknown) {\n  if (!isAnyMediaShape(val)) return AnyMediaShapeScheme;\n\n  switch (val.type) {\n    case MediaAudioMimeType.WAV:\n    case MediaAudioMimeType.WAV_VND:\n    case MediaAudioMimeType.MP3:\n    case MediaAudioMimeType.OGG_AUDIO:\n    case MediaAudioMimeType.MP4_AUDIO:\n    case MediaAudioMimeType.AAC:\n    case MediaAudioMimeType.WEBM_AUDIO:\n    case MediaAudioMimeType.FLAC:\n      return MediaAudioSchema;\n\n    case MediaImageMimeType.BMP:\n    case MediaImageMimeType.GIF:\n    case MediaImageMimeType.HEIC:\n    case MediaImageMimeType.JPEG:\n    case MediaImageMimeType.PNG:\n    case MediaImageMimeType.SVG_XML:\n    case MediaImageMimeType.TIFF:\n    case MediaImageMimeType.WEBP:\n    case MediaImageMimeType.X_MS_BMP:\n      return MediaImageSchema;\n\n    case MediaVideoMimeType.GLTF:\n    case MediaVideoMimeType.GLTF_BINARY:\n    case MediaVideoMimeType.M4V:\n    case MediaVideoMimeType.MOV:\n    case MediaVideoMimeType.MP4:\n    case MediaVideoMimeType.MPEG:\n    case MediaVideoMimeType.OGG:\n    case MediaVideoMimeType.OGV:\n    case MediaVideoMimeType.QUICKTIME:\n    case MediaVideoMimeType.WEBM:\n      return MediaVideoSchema;\n  }\n\n  // the alleged AnyMedia is not a valid shape\n  return AnyMediaShapeScheme;\n}\n\n/**\n * @internal\n */\nexport const AnyMediaSchema: z.ZodType<AnyMedia, z.ZodTypeDef, unknown> = z\n  .discriminatedUnion('type', [MediaAudioSchema, MediaImageSchema, MediaVideoSchema])\n  // the following is necessary cause discriminatedUnion does not properly work when\n  // the discriminant is a union of enums, so we keep the discriminatedUnion for the\n  // correct JSON Schema definition but we manually refine the type for runtime checks\n  .catch((ctx) => ctx.input as AnyMedia) // passthrough even if might not be an AnyMedia type\n  .superRefine((val: unknown, ctx): val is AnyMedia => {\n    const Schema = resolveAnyMediaSchema(val);\n\n    if (!Schema) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.invalid_union_discriminator,\n        options: [\n          ...new Set(\n            [\n              Object.values(MediaAudioMimeType),\n              Object.values(MediaImageMimeType),\n              Object.values(MediaVideoMimeType),\n            ].flat(),\n          ),\n        ],\n        message:\n          'Invalid discriminator value. Expected one of `MediaAudioMimeType`, `MediaImageMimeType`, `MediaVideoMimeType` values.',\n      });\n      return z.NEVER;\n    }\n\n    const result = Schema.safeParse(val);\n\n    if (!result.success) {\n      result.error.issues.forEach((issue) => {\n        ctx.addIssue(issue);\n      });\n    }\n\n    return z.NEVER;\n  });\n","import { z } from 'zod';\n\nexport const timezones = [\n  'Africa/Abidjan',\n  'Africa/Accra',\n  'Africa/Addis_Ababa',\n  'Africa/Algiers',\n  'Africa/Asmera',\n  'Africa/Bamako',\n  'Africa/Bangui',\n  'Africa/Banjul',\n  'Africa/Bissau',\n  'Africa/Blantyre',\n  'Africa/Brazzaville',\n  'Africa/Bujumbura',\n  'Africa/Cairo',\n  'Africa/Casablanca',\n  'Africa/Ceuta',\n  'Africa/Conakry',\n  'Africa/Dakar',\n  'Africa/Dar_es_Salaam',\n  'Africa/Djibouti',\n  'Africa/Douala',\n  'Africa/El_Aaiun',\n  'Africa/Freetown',\n  'Africa/Gaborone',\n  'Africa/Harare',\n  'Africa/Johannesburg',\n  'Africa/Juba',\n  'Africa/Kampala',\n  'Africa/Khartoum',\n  'Africa/Kigali',\n  'Africa/Kinshasa',\n  'Africa/Lagos',\n  'Africa/Libreville',\n  'Africa/Lome',\n  'Africa/Luanda',\n  'Africa/Lubumbashi',\n  'Africa/Lusaka',\n  'Africa/Malabo',\n  'Africa/Maputo',\n  'Africa/Maseru',\n  'Africa/Mbabane',\n  'Africa/Mogadishu',\n  'Africa/Monrovia',\n  'Africa/Nairobi',\n  'Africa/Ndjamena',\n  'Africa/Niamey',\n  'Africa/Nouakchott',\n  'Africa/Ouagadougou',\n  'Africa/Porto-Novo',\n  'Africa/Sao_Tome',\n  'Africa/Tripoli',\n  'Africa/Tunis',\n  'Africa/Windhoek',\n  'America/Adak',\n  'America/Anchorage',\n  'America/Anguilla',\n  'America/Antigua',\n  'America/Araguaina',\n  'America/Argentina/La_Rioja',\n  'America/Argentina/Rio_Gallegos',\n  'America/Argentina/Salta',\n  'America/Argentina/San_Juan',\n  'America/Argentina/San_Luis',\n  'America/Argentina/Tucuman',\n  'America/Argentina/Ushuaia',\n  'America/Aruba',\n  'America/Asuncion',\n  'America/Bahia',\n  'America/Bahia_Banderas',\n  'America/Barbados',\n  'America/Belem',\n  'America/Belize',\n  'America/Blanc-Sablon',\n  'America/Boa_Vista',\n  'America/Bogota',\n  'America/Boise',\n  'America/Buenos_Aires',\n  'America/Cambridge_Bay',\n  'America/Campo_Grande',\n  'America/Cancun',\n  'America/Caracas',\n  'America/Catamarca',\n  'America/Cayenne',\n  'America/Cayman',\n  'America/Chicago',\n  'America/Chihuahua',\n  'America/Ciudad_Juarez',\n  'America/Coral_Harbour',\n  'America/Cordoba',\n  'America/Costa_Rica',\n  'America/Creston',\n  'America/Cuiaba',\n  'America/Curacao',\n  'America/Danmarkshavn',\n  'America/Dawson',\n  'America/Dawson_Creek',\n  'America/Denver',\n  'America/Detroit',\n  'America/Dominica',\n  'America/Edmonton',\n  'America/Eirunepe',\n  'America/El_Salvador',\n  'America/Fort_Nelson',\n  'America/Fortaleza',\n  'America/Glace_Bay',\n  'America/Godthab',\n  'America/Goose_Bay',\n  'America/Grand_Turk',\n  'America/Grenada',\n  'America/Guadeloupe',\n  'America/Guatemala',\n  'America/Guayaquil',\n  'America/Guyana',\n  'America/Halifax',\n  'America/Havana',\n  'America/Hermosillo',\n  'America/Indiana/Knox',\n  'America/Indiana/Marengo',\n  'America/Indiana/Petersburg',\n  'America/Indiana/Tell_City',\n  'America/Indiana/Vevay',\n  'America/Indiana/Vincennes',\n  'America/Indiana/Winamac',\n  'America/Indianapolis',\n  'America/Inuvik',\n  'America/Iqaluit',\n  'America/Jamaica',\n  'America/Jujuy',\n  'America/Juneau',\n  'America/Kentucky/Monticello',\n  'America/Kralendijk',\n  'America/La_Paz',\n  'America/Lima',\n  'America/Los_Angeles',\n  'America/Louisville',\n  'America/Lower_Princes',\n  'America/Maceio',\n  'America/Managua',\n  'America/Manaus',\n  'America/Marigot',\n  'America/Martinique',\n  'America/Matamoros',\n  'America/Mazatlan',\n  'America/Mendoza',\n  'America/Menominee',\n  'America/Merida',\n  'America/Metlakatla',\n  'America/Mexico_City',\n  'America/Miquelon',\n  'America/Moncton',\n  'America/Monterrey',\n  'America/Montevideo',\n  'America/Montserrat',\n  'America/Nassau',\n  'America/New_York',\n  'America/Nipigon',\n  'America/Nome',\n  'America/Noronha',\n  'America/North_Dakota/Beulah',\n  'America/North_Dakota/Center',\n  'America/North_Dakota/New_Salem',\n  'America/Ojinaga',\n  'America/Panama',\n  'America/Pangnirtung',\n  'America/Paramaribo',\n  'America/Phoenix',\n  'America/Port-au-Prince',\n  'America/Port_of_Spain',\n  'America/Porto_Velho',\n  'America/Puerto_Rico',\n  'America/Punta_Arenas',\n  'America/Rainy_River',\n  'America/Rankin_Inlet',\n  'America/Recife',\n  'America/Regina',\n  'America/Resolute',\n  'America/Rio_Branco',\n  'America/Santa_Isabel',\n  'America/Santarem',\n  'America/Santiago',\n  'America/Santo_Domingo',\n  'America/Sao_Paulo',\n  'America/Scoresbysund',\n  'America/Sitka',\n  'America/St_Barthelemy',\n  'America/St_Johns',\n  'America/St_Kitts',\n  'America/St_Lucia',\n  'America/St_Thomas',\n  'America/St_Vincent',\n  'America/Swift_Current',\n  'America/Tegucigalpa',\n  'America/Thule',\n  'America/Thunder_Bay',\n  'America/Tijuana',\n  'America/Toronto',\n  'America/Tortola',\n  'America/Vancouver',\n  'America/Whitehorse',\n  'America/Winnipeg',\n  'America/Yakutat',\n  'America/Yellowknife',\n  'Antarctica/Casey',\n  'Antarctica/Davis',\n  'Antarctica/DumontDUrville',\n  'Antarctica/Macquarie',\n  'Antarctica/Mawson',\n  'Antarctica/McMurdo',\n  'Antarctica/Palmer',\n  'Antarctica/Rothera',\n  'Antarctica/Syowa',\n  'Antarctica/Troll',\n  'Antarctica/Vostok',\n  'Arctic/Longyearbyen',\n  'Asia/Aden',\n  'Asia/Almaty',\n  'Asia/Amman',\n  'Asia/Anadyr',\n  'Asia/Aqtau',\n  'Asia/Aqtobe',\n  'Asia/Ashgabat',\n  'Asia/Atyrau',\n  'Asia/Baghdad',\n  'Asia/Bahrain',\n  'Asia/Baku',\n  'Asia/Bangkok',\n  'Asia/Barnaul',\n  'Asia/Beirut',\n  'Asia/Bishkek',\n  'Asia/Brunei',\n  'Asia/Calcutta',\n  'Asia/Chita',\n  'Asia/Choibalsan',\n  'Asia/Colombo',\n  'Asia/Damascus',\n  'Asia/Dhaka',\n  'Asia/Dili',\n  'Asia/Dubai',\n  'Asia/Dushanbe',\n  'Asia/Famagusta',\n  'Asia/Gaza',\n  'Asia/Hebron',\n  'Asia/Hong_Kong',\n  'Asia/Hovd',\n  'Asia/Irkutsk',\n  'Asia/Jakarta',\n  'Asia/Jayapura',\n  'Asia/Jerusalem',\n  'Asia/Kabul',\n  'Asia/Kamchatka',\n  'Asia/Karachi',\n  'Asia/Katmandu',\n  'Asia/Khandyga',\n  'Asia/Krasnoyarsk',\n  'Asia/Kuala_Lumpur',\n  'Asia/Kuching',\n  'Asia/Kuwait',\n  'Asia/Macau',\n  'Asia/Magadan',\n  'Asia/Makassar',\n  'Asia/Manila',\n  'Asia/Muscat',\n  'Asia/Nicosia',\n  'Asia/Novokuznetsk',\n  'Asia/Novosibirsk',\n  'Asia/Omsk',\n  'Asia/Oral',\n  'Asia/Phnom_Penh',\n  'Asia/Pontianak',\n  'Asia/Pyongyang',\n  'Asia/Qatar',\n  'Asia/Qostanay',\n  'Asia/Qyzylorda',\n  'Asia/Rangoon',\n  'Asia/Riyadh',\n  'Asia/Saigon',\n  'Asia/Sakhalin',\n  'Asia/Samarkand',\n  'Asia/Seoul',\n  'Asia/Shanghai',\n  'Asia/Singapore',\n  'Asia/Srednekolymsk',\n  'Asia/Taipei',\n  'Asia/Tashkent',\n  'Asia/Tbilisi',\n  'Asia/Tehran',\n  'Asia/Thimphu',\n  'Asia/Tokyo',\n  'Asia/Tomsk',\n  'Asia/Ulaanbaatar',\n  'Asia/Urumqi',\n  'Asia/Ust-Nera',\n  'Asia/Vientiane',\n  'Asia/Vladivostok',\n  'Asia/Yakutsk',\n  'Asia/Yekaterinburg',\n  'Asia/Yerevan',\n  'Atlantic/Azores',\n  'Atlantic/Bermuda',\n  'Atlantic/Canary',\n  'Atlantic/Cape_Verde',\n  'Atlantic/Faeroe',\n  'Atlantic/Madeira',\n  'Atlantic/Reykjavik',\n  'Atlantic/South_Georgia',\n  'Atlantic/St_Helena',\n  'Atlantic/Stanley',\n  'Australia/Adelaide',\n  'Australia/Brisbane',\n  'Australia/Broken_Hill',\n  'Australia/Currie',\n  'Australia/Darwin',\n  'Australia/Eucla',\n  'Australia/Hobart',\n  'Australia/Lindeman',\n  'Australia/Lord_Howe',\n  'Australia/Melbourne',\n  'Australia/Perth',\n  'Australia/Sydney',\n  'Europe/Amsterdam',\n  'Europe/Andorra',\n  'Europe/Astrakhan',\n  'Europe/Athens',\n  'Europe/Belgrade',\n  'Europe/Berlin',\n  'Europe/Bratislava',\n  'Europe/Brussels',\n  'Europe/Bucharest',\n  'Europe/Budapest',\n  'Europe/Busingen',\n  'Europe/Chisinau',\n  'Europe/Copenhagen',\n  'Europe/Dublin',\n  'Europe/Gibraltar',\n  'Europe/Guernsey',\n  'Europe/Helsinki',\n  'Europe/Isle_of_Man',\n  'Europe/Istanbul',\n  'Europe/Jersey',\n  'Europe/Kaliningrad',\n  'Europe/Kiev',\n  'Europe/Kirov',\n  'Europe/Lisbon',\n  'Europe/Ljubljana',\n  'Europe/London',\n  'Europe/Luxembourg',\n  'Europe/Madrid',\n  'Europe/Malta',\n  'Europe/Mariehamn',\n  'Europe/Minsk',\n  'Europe/Monaco',\n  'Europe/Moscow',\n  'Europe/Oslo',\n  'Europe/Paris',\n  'Europe/Podgorica',\n  'Europe/Prague',\n  'Europe/Riga',\n  'Europe/Rome',\n  'Europe/Samara',\n  'Europe/San_Marino',\n  'Europe/Sarajevo',\n  'Europe/Saratov',\n  'Europe/Simferopol',\n  'Europe/Skopje',\n  'Europe/Sofia',\n  'Europe/Stockholm',\n  'Europe/Tallinn',\n  'Europe/Tirane',\n  'Europe/Ulyanovsk',\n  'Europe/Uzhgorod',\n  'Europe/Vaduz',\n  'Europe/Vatican',\n  'Europe/Vienna',\n  'Europe/Vilnius',\n  'Europe/Volgograd',\n  'Europe/Warsaw',\n  'Europe/Zagreb',\n  'Europe/Zaporozhye',\n  'Europe/Zurich',\n  'Indian/Antananarivo',\n  'Indian/Chagos',\n  'Indian/Christmas',\n  'Indian/Cocos',\n  'Indian/Comoro',\n  'Indian/Kerguelen',\n  'Indian/Mahe',\n  'Indian/Maldives',\n  'Indian/Mauritius',\n  'Indian/Mayotte',\n  'Indian/Reunion',\n  'Pacific/Apia',\n  'Pacific/Auckland',\n  'Pacific/Bougainville',\n  'Pacific/Chatham',\n  'Pacific/Easter',\n  'Pacific/Efate',\n  'Pacific/Enderbury',\n  'Pacific/Fakaofo',\n  'Pacific/Fiji',\n  'Pacific/Funafuti',\n  'Pacific/Galapagos',\n  'Pacific/Gambier',\n  'Pacific/Guadalcanal',\n  'Pacific/Guam',\n  'Pacific/Honolulu',\n  'Pacific/Johnston',\n  'Pacific/Kiritimati',\n  'Pacific/Kosrae',\n  'Pacific/Kwajalein',\n  'Pacific/Majuro',\n  'Pacific/Marquesas',\n  'Pacific/Midway',\n  'Pacific/Nauru',\n  'Pacific/Niue',\n  'Pacific/Norfolk',\n  'Pacific/Noumea',\n  'Pacific/Pago_Pago',\n  'Pacific/Palau',\n  'Pacific/Pitcairn',\n  'Pacific/Ponape',\n  'Pacific/Port_Moresby',\n  'Pacific/Rarotonga',\n  'Pacific/Saipan',\n  'Pacific/Tahiti',\n  'Pacific/Tarawa',\n  'Pacific/Tongatapu',\n  'Pacific/Truk',\n  'Pacific/Wake',\n  'Pacific/Wallis',\n] as const;\n\n/**\n * Timezone ID\n */\nexport type TimezoneId = (typeof timezones)[number];\n\n/**\n * @internal\n */\nexport const TimezoneIdSchema = z.enum(timezones);\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  mainContentFocus,\n  PublicationMetadataCommon,\n  metadataDetailsWith,\n  MetadataLicenseType,\n  MetadataLicenseTypeSchema,\n  publicationWith,\n  optionalContentSchema,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport {\n  EncryptableMarkdown,\n  nonEmptyStringSchema,\n  Signature,\n  URI,\n  uriSchema,\n} from '../primitives.js';\n\n/**\n * The 3D format type.\n */\nexport enum ThreeDFormat {\n  GLTF = 'gLTF/GLB',\n  FBX = 'FBX',\n  VRM = 'VRM',\n  OBJ = 'OBJ',\n}\n\n/**\n * A 3D asset.\n */\nexport type ThreeDAsset = {\n  /**\n   * The URI of the 3D asset zip file.\n   */\n  uri: URI;\n  /**\n   * The URL of the recommended web based 3D player to use to view the 3D asset.\n   */\n  playerUrl: URI;\n  /**\n   * The 3D format of the asset.\n   */\n  format: ThreeDFormat;\n  /**\n   * Path in extracted zip. Relative. 3D start point, MUST be 3D file type.\n   */\n  zipPath?: string;\n  /**\n   * The license regulating the use of the 3D asset.\n   */\n  license?: MetadataLicenseType;\n};\n/**\n * @internal\n */\nexport const ThreeDAssetSchema: z.ZodType<ThreeDAsset, z.ZodTypeDef, object> = z.object({\n  uri: uriSchema('The URI of the 3D asset zip file.'),\n  zipPath: nonEmptyStringSchema()\n    .optional()\n    .describe('Path in extracted zip. Relative. 3D start point, MUST be 3D file type.'),\n  playerUrl: uriSchema(\n    'The URL of the recommended web based 3D player to use to view the 3D asset.',\n  ),\n  format: z.nativeEnum(ThreeDFormat).describe('The 3D format of the asset.'),\n  license: MetadataLicenseTypeSchema.optional().describe(\n    'The license regulating the use of the 3D asset.',\n  ),\n});\n\nexport type ThreeDMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.THREE_D;\n  /**\n   * The 3D items for the publication.\n   */\n  assets: ThreeDAsset[];\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n  /**\n   * The other attachments you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\nconst ThreeDMetadataDetailsSchema: z.ZodType<ThreeDMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(PublicationMainFocus.THREE_D),\n\n    assets: ThreeDAssetSchema.array().min(1).describe('The 3D items for the publication'),\n\n    content: optionalContentSchema(),\n\n    attachments: AnyMediaSchema.array()\n      .min(1)\n      .optional()\n      .describe('The other attachments you want to include with it.'),\n  });\n\n/**\n * Use this to share a 3D piece of art.\n */\nexport type ThreeDMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.THREE_D_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: ThreeDMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const ThreeDSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.THREE_D_LATEST),\n\n  lens: ThreeDMetadataDetailsSchema,\n});\n","/**\n * The main focus of a publication.\n */\nexport enum PublicationMainFocus {\n  VIDEO = 'VIDEO',\n  IMAGE = 'IMAGE',\n  ARTICLE = 'ARTICLE',\n  TEXT_ONLY = 'TEXT_ONLY',\n  AUDIO = 'AUDIO',\n  LINK = 'LINK',\n  EMBED = 'EMBED',\n  CHECKING_IN = 'CHECKING_IN',\n  EVENT = 'EVENT',\n  MINT = 'MINT',\n  TRANSACTION = 'TRANSACTION',\n  LIVESTREAM = 'LIVESTREAM',\n  SHORT_VIDEO = 'SHORT_VIDEO',\n  THREE_D = '3D',\n  STORY = 'STORY',\n  SPACE = 'SPACE',\n}\n","/**\n * @internal\n */\nexport const SchemasRoot = 'https://json-schemas.lens.dev';\n","import { SchemasRoot } from '../constants';\n\nconst location = `${SchemasRoot}/publications`;\n\n/**\n * A list of all the publication schema ids (past and present).\n */\nexport enum PublicationSchemaId {\n  THREE_D_LATEST = `${location}/3d/3.0.0.json`,\n  ARTICLE_LATEST = `${location}/article/3.0.0.json`,\n  AUDIO_LATEST = `${location}/audio/3.0.0.json`,\n  CHECKING_IN_LATEST = `${location}/checking-in/3.0.0.json`,\n  EMBED_LATEST = `${location}/embed/3.0.0.json`,\n  EVENT_LATEST = `${location}/event/3.0.0.json`,\n  IMAGE_LATEST = `${location}/image/3.0.0.json`,\n  LINK_LATEST = `${location}/link/3.0.0.json`,\n  LIVESTREAM_LATEST = `${location}/livestream/3.0.0.json`,\n  MINT_LATEST = `${location}/mint/3.0.0.json`,\n  SPACE_LATEST = `${location}/space/3.0.0.json`,\n  STORY_LATEST = `${location}/story/3.0.0.json`,\n  TRANSACTION_LATEST = `${location}/transaction/3.0.0.json`,\n  TEXT_ONLY_LATEST = `${location}/text-only/3.0.0.json`,\n  VIDEO_LATEST = `${location}/video/3.0.0.json`,\n}\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  PublicationMetadataCommon,\n  mainContentFocus,\n  metadataDetailsWith,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport {\n  EncryptableMarkdown,\n  Signature,\n  encryptable,\n  markdown,\n  nonEmptyStringSchema,\n} from '../primitives.js';\n\nexport type ArticleMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.ARTICLE;\n  /**\n   * Markdown content.\n   */\n  content: EncryptableMarkdown;\n  /**\n   * The optional article title.\n   */\n  title?: string;\n  /**\n   * Any attachment you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\nconst ArticleMetadataDetailsSchema: z.ZodType<ArticleMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(PublicationMainFocus.ARTICLE),\n\n    content: encryptable(\n      markdown(nonEmptyStringSchema('The content for the publication as markdown.')),\n    ),\n\n    title: nonEmptyStringSchema('The optional article title.').optional(),\n\n    attachments: AnyMediaSchema.array()\n      .min(1)\n      .optional()\n      .describe('Any attachment you want to include with it.'),\n  });\n\n/**\n * Use this model an article-like publication (e.g. blog, news, etc.)\n */\nexport type ArticleMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.ARTICLE_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: ArticleMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const ArticleSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.ARTICLE_LATEST),\n  lens: ArticleMetadataDetailsSchema,\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  mainContentFocus,\n  MediaAudio,\n  MediaAudioSchema,\n  metadataDetailsWith,\n  optionalContentSchema,\n  PublicationMetadataCommon,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport { EncryptableMarkdown, nonEmptyStringSchema, Signature } from '../primitives.js';\n\nexport type AudioMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.AUDIO;\n  /**\n   * The audio.\n   */\n  audio: MediaAudio;\n  /**\n   * The optional audio title.\n   */\n  title?: string;\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n  /**\n   * The other attachments you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\n\nconst AudioMetadataDetailsSchema: z.ZodType<AudioMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(PublicationMainFocus.AUDIO),\n\n    audio: MediaAudioSchema,\n\n    title: nonEmptyStringSchema('The optional audio title.').optional(),\n\n    content: optionalContentSchema(),\n\n    attachments: AnyMediaSchema.array()\n      .min(1)\n      .optional()\n      .describe('The other attachments you want to include with it.'),\n  });\n\n/**\n * Use this to model a publication where an audio is the main focus.\n *\n * Use the `lens.attachments` to include more media.\n */\nexport type AudioMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.AUDIO_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: AudioMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const AudioSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.AUDIO_LATEST),\n  lens: AudioMetadataDetailsSchema,\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  PublicationMetadataCommon,\n  mainContentFocus,\n  metadataDetailsWith,\n  optionalContentSchema,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport {\n  EncryptableGeoURI,\n  EncryptableMarkdown,\n  EncryptableString,\n  PhysicalAddress,\n  PhysicalAddressSchema,\n  Signature,\n  encryptableGeoUriSchema,\n  encryptableStringSchema,\n} from '../primitives.js';\n\nexport type CheckingInMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.CHECKING_IN;\n  /**\n   * Where you checking in from (free form text).\n   */\n  location: EncryptableString;\n  /**\n   * The optional geographic position of the location.\n   */\n  position?: EncryptableGeoURI;\n  /**\n   * The optional address of the location.\n   */\n  address?: PhysicalAddress;\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n  /**\n   * The other attachments you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\n\nconst CheckingInMetadataDetailsSchema: z.ZodType<CheckingInMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(PublicationMainFocus.CHECKING_IN),\n\n    location: encryptableStringSchema('Where you checking in from (free form text).'),\n\n    position: encryptableGeoUriSchema(\n      'The optional geographic position of the location.',\n    ).optional(),\n\n    address: PhysicalAddressSchema.optional().describe('The optional address of the location.'),\n\n    content: optionalContentSchema(),\n\n    attachments: AnyMediaSchema.array()\n      .min(1)\n      .optional()\n      .describe('The other attachments you want to include with it.'),\n  });\n\n/**\n * Use this to notify your community that you are checking in from a location.\n */\nexport type CheckingInMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.CHECKING_IN_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: CheckingInMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const CheckingInSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.CHECKING_IN_LATEST),\n  lens: CheckingInMetadataDetailsSchema,\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  PublicationMetadataCommon,\n  mainContentFocus,\n  metadataDetailsWith,\n  optionalContentSchema,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport {\n  EncryptableMarkdown,\n  EncryptableURI,\n  Signature,\n  encryptableUriSchema,\n} from '../primitives.js';\n\nexport type EmbedMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.EMBED;\n  /**\n   * The embed URL.\n   */\n  embed: EncryptableURI;\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n  /**\n   * The other attachments you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\n\nconst EmbedMetadataDetailsSchema: z.ZodType<EmbedMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(PublicationMainFocus.EMBED),\n\n    embed: encryptableUriSchema('The embed URL.'),\n\n    content: optionalContentSchema(),\n\n    attachments: AnyMediaSchema.array()\n      .min(1)\n      .optional()\n      .describe('The other attachments you want to include with it.'),\n  });\n\n/**\n * Use this to model a publication that embeds a resource such as a micro-app, a game, etc.\n */\nexport type EmbedMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.EMBED_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: EmbedMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const EmbedSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.EMBED_LATEST),\n  lens: EmbedMetadataDetailsSchema,\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  PublicationMetadataCommon,\n  TimezoneId,\n  TimezoneIdSchema,\n  mainContentFocus,\n  metadataDetailsWith,\n  optionalContentSchema,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport {\n  PhysicalAddressSchema,\n  encryptableDateTimeSchema,\n  encryptableUriSchema,\n  encryptableStringSchema,\n  EncryptableURI,\n  EncryptableString,\n  EncryptableGeoURI,\n  PhysicalAddress,\n  EncryptableDateTime,\n  EncryptableMarkdown,\n  encryptableGeoUriSchema,\n  Signature,\n  nonEmptyStringSchema,\n} from '../primitives.js';\n\n/**\n * An object intended to help with future events scheduling adjustments.\n *\n * @see https://www.w3.org/International/wiki/WorkingWithTimeZones#Working_with_Future_and_Recurring_Events\n */\nexport type SchedulingAdjustments = {\n  /**\n   * Indicates a reference timezone for the event start and end times.\n   * If physical event, you could use the timezone of the event location. If virtual event, the timezone of the event organizer.\n   */\n  timezoneId: TimezoneId;\n  /**\n   * Indicates the reference timezone offset with respect to UTC timezone a the time of event creation.\n   * The difference in minutes between the reference timezone time and UTC time (e.g. UTC+2 would be -120, UTC-5 would be 300, UTC would be 0).\n   */\n  timezoneOffset: number;\n};\n\n/**\n * @internal\n */\nexport const SchedulingAdjustmentsSchema: z.ZodType<SchedulingAdjustments, z.ZodTypeDef, object> =\n  z.object({\n    timezoneId: TimezoneIdSchema.describe(\n      'Indicates a reference timezone for the event start and end times. ' +\n        'If physical event, you could use the timezone of the event location. If virtual event, the timezone of the event organizer.',\n    ),\n    timezoneOffset: z\n      .number()\n      .describe(\n        'Indicates the reference timezone offset with respect to UTC timezone a the time of event creation. ' +\n          'The difference in minutes between the reference timezone time and UTC time ' +\n          '(e.g. UTC+2 would be -120, UTC-5 would be 300, UTC would be 0).',\n      ),\n  });\n\nexport type EventMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The title of the event.\n   */\n  title?: string;\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.EVENT;\n  /*\n   * The location of the event.\n   */\n  location: EncryptableURI | EncryptableString;\n  /**\n   * The geographic position of the event.\n   */\n  position?: EncryptableGeoURI;\n  /**\n   * The address of the event.\n   */\n  address?: PhysicalAddress;\n  /**\n   * The event start time (ISO 8601 `YYYY-MM-DDTHH:mm:ss.sssZ`).\n   */\n  startsAt: EncryptableDateTime;\n  /**\n   * The event end time (ISO 8601 `YYYY-MM-DDTHH:mm:ss.sssZ`).\n   */\n  endsAt: EncryptableDateTime;\n  /**\n   * Captures extra criteria to recompute correctly future start and end times.\n   *\n   * @see https://www.w3.org/International/wiki/WorkingWithTimeZones#Working_with_Future_and_Recurring_Events\n   */\n  schedulingAdjustments?: SchedulingAdjustments;\n  /**\n   * The links you want to include with it.\n   */\n  links?: EncryptableURI[];\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n  /**\n   * The other attachments you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\n\nconst EventMetadataDetailsSchema: z.ZodType<EventMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    title: nonEmptyStringSchema().describe('The title of the event.').optional(),\n\n    mainContentFocus: mainContentFocus(PublicationMainFocus.EVENT),\n\n    location: z\n      .union([\n        encryptableUriSchema('A virtual location.'),\n        encryptableStringSchema('The event location (free form text).'),\n      ])\n      .describe('The location of the event.'),\n\n    position: encryptableGeoUriSchema('The geographic position of the event.').optional(),\n\n    address: PhysicalAddressSchema.optional().describe('The address of the event.'),\n\n    startsAt: encryptableDateTimeSchema(\n      'The event start time (ISO 8601 `YYYY-MM-DDTHH:mm:ss.sssZ`).',\n    ),\n\n    endsAt: encryptableDateTimeSchema('The event end time (ISO 8601 `YYYY-MM-DDTHH:mm:ss.sssZ`).'),\n\n    schedulingAdjustments: SchedulingAdjustmentsSchema.optional().describe(\n      'Captures extra criteria to recompute correctly future start and end times.' +\n        'See: https://www.w3.org/International/wiki/WorkingWithTimeZones#Working_with_Future_and_Recurring_Events',\n    ),\n\n    links: encryptableUriSchema()\n      .array()\n      .min(1)\n      .optional()\n      .describe('The links you want to include with it.'),\n\n    content: optionalContentSchema(),\n\n    attachments: AnyMediaSchema.array()\n      .min(1)\n      .optional()\n      .describe('The other attachments you want to include with it.'),\n  });\n\n/**\n * Use this to create an event, virtual or physical.\n */\nexport type EventMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.EVENT_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: EventMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const EventSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.EVENT_LATEST),\n  lens: EventMetadataDetailsSchema,\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  MediaImage,\n  MediaImageSchema,\n  PublicationMetadataCommon,\n  mainContentFocus,\n  metadataDetailsWith,\n  optionalContentSchema,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport { EncryptableMarkdown, Signature, nonEmptyStringSchema } from '../primitives.js';\n\nexport type ImageMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.IMAGE;\n  /**\n   * The image.\n   */\n  image: MediaImage;\n  /**\n   * A title for the image.\n   */\n  title?: string;\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n  /**\n   * The other attachments you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\n\nconst ImageMetadataDetailsSchema: z.ZodType<ImageMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(PublicationMainFocus.IMAGE),\n\n    image: MediaImageSchema,\n\n    title: nonEmptyStringSchema('The optional image title.').optional(),\n\n    content: optionalContentSchema(),\n\n    attachments: AnyMediaSchema.array()\n      .min(1)\n      .optional()\n      .describe('The other attachments you want to include with it.'),\n  });\n\n/**\n * Use this to model a publication where an image is the main focus.\n *\n * Use the `lens.attachments` to include more images.\n */\nexport type ImageMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.IMAGE_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: ImageMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const ImageSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.IMAGE_LATEST),\n  lens: ImageMetadataDetailsSchema,\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  PublicationMetadataCommon,\n  mainContentFocus,\n  metadataDetailsWith,\n  optionalContentSchema,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport {\n  EncryptableMarkdown,\n  EncryptableURI,\n  Signature,\n  encryptableUriSchema,\n} from '../primitives.js';\n\nexport type LinkMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.LINK;\n  /**\n   * The sharing link url.\n   */\n  sharingLink: EncryptableURI;\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n  /**\n   * The other attachments you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\n\nconst LinkMetadataDetailsSchema: z.ZodType<LinkMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(PublicationMainFocus.LINK),\n\n    sharingLink: encryptableUriSchema('The sharing link url.'),\n\n    content: optionalContentSchema(),\n\n    attachments: AnyMediaSchema.array()\n      .min(1)\n      .optional()\n      .describe('The other attachments you want to include with it.'),\n  });\n\n/**\n * Use this to share a link to something you want to share.\n */\nexport type LinkMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.LINK_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: LinkMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const LinkSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.LINK_LATEST),\n  lens: LinkMetadataDetailsSchema,\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  PublicationMetadataCommon,\n  mainContentFocus,\n  metadataDetailsWith,\n  optionalContentSchema,\n  publicationWith,\n} from './common/index.js';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport {\n  EncryptableDateTime,\n  EncryptableMarkdown,\n  EncryptableURI,\n  Signature,\n  encryptableDateTimeSchema,\n  encryptableUriSchema,\n  nonEmptyStringSchema,\n} from '../primitives.js';\n\nexport type LiveStreamMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.LIVESTREAM;\n  /**\n   * The livestream title.\n   */\n  title?: string;\n  /**\n   * The stream start time (ISO 8601 `YYYY-MM-DDTHH:mm:ss.sssZ`).\n   */\n  startsAt: EncryptableDateTime;\n  /**\n   * The optional stream end time (ISO 8601 `YYYY-MM-DDTHH:mm:ss.sssZ`).\n   */\n  endsAt?: EncryptableDateTime;\n  /**\n   * Some livestream platforms have the playback url as a separate url.\n   * If not your case make sure `liveUrl` and `playbackUrl` are the same.\n   */\n  playbackUrl: EncryptableURI;\n  /**\n   * Some livestream platforms have the live url as a separate url.\n   * If not your case make sure `liveUrl` and `playbackUrl` are the same.\n   */\n  liveUrl: EncryptableURI;\n  /**\n   * The data cannot be changed so you can put in an API endpoint to know if it is still live or not for clients to be able to check.\n   *\n   * Responses from this endpoint should conform to the following schema:\n   *\n   * ```json\n   * {\n   *   \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n   *   \"type\": \"object\",\n   *   \"properties\": {\n   *     \"isLive\": {\n   *       \"type\": \"boolean\"\n   *     }\n   *   },\n   *   \"required\": [\"isLive\"]\n   * }\n   * ```\n   */\n  checkLiveAPI?: EncryptableURI;\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n  /**\n   * The other attachments you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\n\nconst LiveStreamMetadataDetailsSchema: z.ZodType<LiveStreamMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(PublicationMainFocus.LIVESTREAM),\n\n    title: nonEmptyStringSchema().optional().describe('The livestream title.'),\n\n    startsAt: encryptableDateTimeSchema(\n      'The stream start time (ISO 8601 `YYYY-MM-DDTHH:mm:ss.sssZ`).',\n    ),\n\n    endsAt: encryptableDateTimeSchema(\n      'The optional stream end time (ISO 8601 `YYYY-MM-DDTHH:mm:ss.sssZ`)',\n    ).optional(),\n\n    playbackUrl: encryptableUriSchema(\n      'Some livestream platforms have the playback url as a separate url. ' +\n        'If not your case make sure `liveUrl` and `playbackUrl` are the same.',\n    ),\n\n    liveUrl: encryptableUriSchema(\n      'Some livestream platforms have the live url as a separate url. ' +\n        'If not your case make sure `liveUrl` and `playbackUrl` are the same.',\n    ),\n\n    checkLiveAPI: encryptableUriSchema(\n      'The data cannot be changed so you can put in an API endpoint to know if it is still live or not for clients to be able to check.',\n    ).optional(),\n\n    content: optionalContentSchema(),\n\n    attachments: AnyMediaSchema.array()\n      .min(1)\n      .optional()\n      .describe('The other attachments you want to include with it.'),\n  });\n\n/**\n * Use this to notify your community of a livestream event.\n */\nexport type LiveStreamMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.LIVESTREAM_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: LiveStreamMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const LiveStreamSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.LIVESTREAM_LATEST),\n  lens: LiveStreamMetadataDetailsSchema,\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  PublicationMetadataCommon,\n  mainContentFocus,\n  metadataDetailsWith,\n  optionalContentSchema,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport {\n  EncryptableMarkdown,\n  EncryptableURI,\n  Signature,\n  encryptableUriSchema,\n} from '../primitives.js';\n\n// TODO validate the mint link using the allow list\n\nexport type MintMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.MINT;\n  /**\n   * The mint item it can be a URL of the known provider like opensea\n   * https://opensea.io/assets/ethereum/0xfaa2471e93bd1cee3b0ab381c242ada8e1d1a759/299\n   * or https://zora.co/collect/0x9d90669665607f08005cae4a7098143f554c59ef/39626.\n   *\n   * The Lens API has an allow list of providers and if the domain does not match it will mark it as failed metadata\n   */\n  mintLink: EncryptableURI;\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n  /**\n   * Any attachment you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\n\nconst MintMetadataDetailsSchema: z.ZodType<MintMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(PublicationMainFocus.MINT),\n\n    mintLink: encryptableUriSchema(\n      'The mint item it can be a URL of the known provider like opensea ' +\n        'https://opensea.io/assets/ethereum/0xfaa2471e93bd1cee3b0ab381c242ada8e1d1a759/299 ' +\n        'or https://zora.co/collect/0x9d90669665607f08005cae4a7098143f554c59ef/39626. ' +\n        'The Lens API has an allow list of providers and if the domain does not match it will mark it as failed metadata',\n    ),\n\n    content: optionalContentSchema(),\n\n    attachments: AnyMediaSchema.array()\n      .min(1)\n      .optional()\n      .describe('The other attachments you want to include with it.'),\n  });\n\n/**\n * Use this to share a link to mint an NFT.\n */\nexport type MintMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.MINT_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: MintMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const MintSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.MINT_LATEST),\n  lens: MintMetadataDetailsSchema,\n});\n","import { SchemasRoot } from '../constants.js';\n\nexport enum MirrorSchemaId {\n  LATEST = `${SchemasRoot}/publications/mirror/1.0.0.json`,\n}\n","import { z } from 'zod';\n\nimport { MirrorSchemaId } from './MirrorSchemaId.js';\nimport {\n  AppId,\n  AppIdSchema,\n  Signature,\n  SignatureSchema,\n  nonEmptyStringSchema,\n} from '../primitives.js';\nimport { ShapeCheck } from '../utils.js';\n\nexport type MirrorMetadataDetails = {\n  /**\n   * A unique identifier that in storages like IPFS ensures the uniqueness of the metadata URI.\n   *\n   * Use a UUID if unsure.\n   */\n  id: string;\n  /**\n   * The App Id that this publication belongs to.\n   */\n  appId: AppId;\n};\n\nconst MirrorMetadataDetailsSchema: z.ZodType<MirrorMetadataDetails, z.ZodTypeDef, object> =\n  z.object(\n    {\n      id: nonEmptyStringSchema(\n        'A unique identifier that in storages like IPFS ensures the uniqueness of the metadata URI. Use a UUID if unsure.',\n      ),\n\n      appId: AppIdSchema.describe('The App Id that this publication belongs to.'),\n    },\n    {\n      description: 'The Lens operational metadata fields.',\n    },\n  );\n\n/**\n * A Mirror metadata object.\n */\nexport type MirrorMetadata = ShapeCheck<{\n  /**\n   * The schema id.\n   */\n  $schema: MirrorSchemaId.LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: MirrorMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n}>;\n/**\n * Mirror metadata schema.\n *\n * @category Parse\n *\n * @example\n * with `parse`:\n * ```ts\n * MirrorMetadata.parse(valid); // => MirrorMetadata\n *\n * MirrorMetadata.parse(invalid); // => throws ZodError\n * ```\n *\n * @example\n * with `safeParse`:\n * ```ts\n * MirrorMetadata.safeParse(valid);\n * // => { success: true, data: MirrorMetadata }\n *\n * MirrorMetadata.safeParse(invalid);\n * // => { success: false, error: ZodError }\n * ```\n */\nexport const MirrorMetadataSchema: z.ZodType<MirrorMetadata, z.ZodTypeDef, object> = z.object({\n  $schema: z.literal(MirrorSchemaId.LATEST),\n  lens: MirrorMetadataDetailsSchema,\n  signature: SignatureSchema.optional(),\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  PublicationMetadataCommon,\n  mainContentFocus,\n  metadataDetailsWith,\n  optionalContentSchema,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport {\n  EncryptableDateTime,\n  EncryptableMarkdown,\n  EncryptableURI,\n  Signature,\n  encryptableDateTimeSchema,\n  encryptableUriSchema,\n  nonEmptyStringSchema,\n} from '../primitives.js';\n\nexport type SpaceMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.SPACE;\n  /**\n   * The space title.\n   */\n  title: string;\n  /**\n   * The space join link.\n   */\n  link: EncryptableURI;\n  /**\n   * The space start time (ISO 8601 `YYYY-MM-DDTHH:mm:ss.sssZ`).\n   */\n  startsAt: EncryptableDateTime;\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n  /**\n   * The other attachments you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\n\nexport const SpaceMetadataDetailsSchema: z.ZodType<SpaceMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(PublicationMainFocus.SPACE),\n\n    title: nonEmptyStringSchema().describe('The space title.'),\n\n    link: encryptableUriSchema('The space join link.'),\n\n    startsAt: encryptableDateTimeSchema(\n      'The space start time (ISO 8601 `YYYY-MM-DDTHH:mm:ss.sssZ`).',\n    ),\n\n    content: optionalContentSchema(),\n\n    attachments: AnyMediaSchema.array()\n      .min(1)\n      .optional()\n      .describe('The other attachments you want to include with it.'),\n  });\n\n/**\n * Use this to notify your community about a space you are hosting.\n */\nexport type SpaceMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.SPACE_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: SpaceMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const SpaceSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.SPACE_LATEST),\n\n  lens: SpaceMetadataDetailsSchema,\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  PublicationMetadataCommon,\n  mainContentFocus,\n  metadataDetailsWith,\n  optionalContentSchema,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport { EncryptableMarkdown, Signature } from '../primitives.js';\n\nexport type StoryMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.STORY;\n  /**\n   * The story asset.\n   */\n  asset: AnyMedia;\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n};\n\nconst StoryMetadataDetailsSchema: z.ZodType<StoryMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(PublicationMainFocus.STORY),\n\n    asset: AnyMediaSchema.describe('The story asset.'),\n\n    content: optionalContentSchema(),\n  });\n\n/**\n * Use this to model an Instagram-like story.\n */\nexport type StoryMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.STORY_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: StoryMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const StorySchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.STORY_LATEST),\n  lens: StoryMetadataDetailsSchema,\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  PublicationMetadataCommon,\n  mainContentFocus,\n  metadataDetailsWith,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport {\n  EncryptableMarkdown,\n  Signature,\n  encryptable,\n  markdown,\n  nonEmptyStringSchema,\n} from '../primitives.js';\n\nexport type TextOnlyMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.TEXT_ONLY;\n  /**\n   * The content for the publication as markdown.\n   */\n  content: EncryptableMarkdown;\n};\n\nconst TextOnlyMetadataDetailsSchema: z.ZodType<TextOnlyMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(PublicationMainFocus.TEXT_ONLY),\n\n    content: encryptable(\n      markdown(nonEmptyStringSchema('The content for the publication as markdown.')),\n    ),\n  });\n\n/**\n * Use this for a text-only publication.\n *\n * Most comments will fall into this category.\n */\nexport type TextOnlyMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.TEXT_ONLY_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: TextOnlyMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const TextOnlySchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.TEXT_ONLY_LATEST),\n  lens: TextOnlyMetadataDetailsSchema,\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  PublicationMetadataCommon,\n  mainContentFocus,\n  metadataDetailsWith,\n  optionalContentSchema,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport {\n  ChainId,\n  ChainIdSchema,\n  EncryptableMarkdown,\n  EncryptableString,\n  Signature,\n  encryptableStringSchema,\n} from '../primitives.js';\n\n/**\n * A way to classify the type of transaction.\n */\nexport enum MetadataTransactionType {\n  ERC721 = 'ERC721',\n  ERC20 = 'ERC20',\n  OTHER = 'OTHER',\n}\n\nexport type TransactionMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.TRANSACTION;\n  /**\n   * The transaction hash.\n   */\n  txHash: EncryptableString;\n  /**\n   * The type of transaction.\n   */\n  type: MetadataTransactionType;\n  /**\n   * The Chain Id.\n   */\n  chainId: ChainId;\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n  /**\n   * The other attachments you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\n\nconst TransactionMetadataDetailsSchema: z.ZodType<\n  TransactionMetadataDetails,\n  z.ZodTypeDef,\n  object\n> = metadataDetailsWith({\n  mainContentFocus: mainContentFocus(PublicationMainFocus.TRANSACTION),\n\n  txHash: encryptableStringSchema('The transaction hash.'),\n\n  type: z.nativeEnum(MetadataTransactionType).describe('The type of transaction.'),\n\n  chainId: ChainIdSchema.describe('The Chain Id.'),\n\n  content: optionalContentSchema(),\n\n  attachments: AnyMediaSchema.array()\n    .min(1)\n    .optional()\n    .describe('The other attachments you want to include with it.'),\n});\n\n/**\n * Use this to model a publication where a transaction is the main focus.\n */\nexport type TransactionMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.TRANSACTION_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: TransactionMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const TransactionSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.TRANSACTION_LATEST),\n  lens: TransactionMetadataDetailsSchema,\n});\n","import { z } from 'zod';\n\nimport { PublicationMainFocus } from './PublicationMainFocus.js';\nimport { PublicationSchemaId } from './PublicationSchemaId.js';\nimport {\n  AnyMedia,\n  AnyMediaSchema,\n  MediaVideo,\n  MediaVideoSchema,\n  PublicationMetadataCommon,\n  mainContentFocus,\n  metadataDetailsWith,\n  optionalContentSchema,\n  publicationWith,\n} from './common';\nimport { MarketplaceMetadata } from '../marketplace.js';\nimport { EncryptableMarkdown, Signature, nonEmptyStringSchema } from '../primitives.js';\n\nexport type VideoMetadataDetails = PublicationMetadataCommon & {\n  /**\n   * The main focus of the publication.\n   */\n  mainContentFocus: PublicationMainFocus.VIDEO | PublicationMainFocus.SHORT_VIDEO;\n  /**\n   * The video.\n   */\n  video: MediaVideo;\n  /**\n   * The optional video title.\n   */\n  title?: string;\n  /**\n   * Optional markdown content.\n   */\n  content?: EncryptableMarkdown;\n  /**\n   * The other attachments you want to include with it.\n   */\n  attachments?: AnyMedia[];\n};\n\nconst VideoMetadataDetailsSchema: z.ZodType<VideoMetadataDetails, z.ZodTypeDef, object> =\n  metadataDetailsWith({\n    mainContentFocus: mainContentFocus(\n      PublicationMainFocus.SHORT_VIDEO,\n      PublicationMainFocus.VIDEO,\n    ),\n\n    video: MediaVideoSchema,\n\n    title: nonEmptyStringSchema('The optional video title.').optional(),\n\n    content: optionalContentSchema(),\n\n    attachments: AnyMediaSchema.array()\n      .min(1)\n      .optional()\n      .describe('The other attachments you want to include with it.'),\n  });\n\n/**\n * Use this to model a publication where a video is the main focus.\n *\n * Use the `lens.attachments` to include more media.\n */\nexport type VideoMetadata = MarketplaceMetadata & {\n  /**\n   * The schema id.\n   */\n  $schema: PublicationSchemaId.VIDEO_LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: VideoMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * @internal\n */\nexport const VideoSchema = publicationWith({\n  $schema: z.literal(PublicationSchemaId.VIDEO_LATEST),\n  lens: VideoMetadataDetailsSchema,\n});\n","import { evaluate } from './ValidationError';\nimport { NetworkAddressDetails, amount } from '../primitives';\nimport {\n  AccessCondition,\n  AccessConditionSchema,\n  AndCondition,\n  AndConditionSchema,\n  AnyCondition,\n  CollectCondition,\n  CollectConditionSchema,\n  ConditionComparisonOperator,\n  ConditionType,\n  EoaOwnershipCondition,\n  EoaOwnershipConditionSchema,\n  Erc20OwnershipCondition,\n  Erc20OwnershipConditionSchema,\n  FollowCondition,\n  FollowConditionSchema,\n  NftContractType,\n  NftOwnershipCondition,\n  NftOwnershipConditionSchema,\n  OrCondition,\n  OrConditionSchema,\n  ProfileOwnershipCondition,\n  ProfileOwnershipConditionSchema,\n  SimpleCondition,\n  refineNftOwnershipCondition,\n  AdvancedContractCondition,\n  AdvancedContractConditionSchema,\n} from '../publication';\n\nexport type CollectConditionDetails = {\n  /**\n   * The Publication Id that needs to be collected to fulfill the condition.\n   */\n  publicationId: string;\n  /**\n   * If the Publication Id refers to the current publication.\n   */\n  thisPublication: boolean;\n};\n/**\n * Creates a Collect condition.\n *\n * @category Helpers\n */\nexport function collectCondition(input: CollectConditionDetails): CollectCondition {\n  return evaluate(\n    CollectConditionSchema.safeParse({\n      type: ConditionType.COLLECT,\n      ...input,\n    }),\n  );\n}\n\nexport type EoaOwnershipConditionDetails = {\n  /**\n   * The EVM address to verify ownership of.\n   */\n  address: string;\n};\n/**\n * Creates an EOA ownership condition.\n *\n * @category Helpers\n */\nexport function eoaOwnershipCondition(input: EoaOwnershipConditionDetails): EoaOwnershipCondition {\n  return evaluate(\n    EoaOwnershipConditionSchema.safeParse({\n      type: ConditionType.EOA_OWNERSHIP,\n      ...input,\n    }),\n  );\n}\n\nexport type Erc20OwnershipConditionDetails = {\n  /**\n   * The comparison operator to use to compare the ERC-20 token balance.\n   */\n  condition: ConditionComparisonOperator;\n  /**\n   * The ERC-20 token contract address details.\n   */\n  contract: NetworkAddressDetails;\n  /**\n   * The ERC-20 token decimals (e.g. 18 for GHO)\n   */\n  decimals: number;\n  /**\n   * The human readable amount to compare the ERC-20 token balance against using the comparison operator.\n   *\n   * @example\n   * 1.5\n   * 42\n   * 0.000002\n   */\n  value: string;\n};\n\n/**\n * Creates an ERC-20 token ownership condition.\n *\n * @category Helpers\n * @param input - The ERC-20 token ownership condition details.\n */\nexport function erc20OwnershipCondition({\n  condition,\n  ...others\n}: Erc20OwnershipConditionDetails): Erc20OwnershipCondition {\n  return evaluate(\n    Erc20OwnershipConditionSchema.safeParse({\n      type: ConditionType.ERC20_OWNERSHIP,\n      amount: amount(others),\n      condition,\n    }),\n  );\n}\n\nexport type Erc721OwnershipConditionDetails = {\n  /**\n   * The NFT contract address details.\n   */\n  contract: NetworkAddressDetails;\n  /**\n   * The list of token ids to verify ownership of.\n   */\n  tokenIds?: string[];\n};\n\n/**\n * Creates an ERC-721 NFT ownership condition.\n *\n * @category Helpers\n */\nexport function erc721OwnershipCondition(\n  input: Erc721OwnershipConditionDetails,\n): NftOwnershipCondition {\n  return evaluate(\n    NftOwnershipConditionSchema.superRefine(refineNftOwnershipCondition).safeParse({\n      type: ConditionType.NFT_OWNERSHIP,\n      contractType: NftContractType.ERC721,\n      ...input,\n    }),\n  );\n}\n\nexport type Erc1155OwnershipConditionDetails = {\n  /**\n   * The NFT contract address details.\n   */\n  contract: NetworkAddressDetails;\n  /**\n   * The list of token ids to verify ownership of.\n   */\n  tokenIds: string[];\n};\n\n/**\n * Creates an ERC-1155 NFT ownership condition.\n *\n * @category Helpers\n */\nexport function erc1155OwnershipCondition(\n  input: Erc721OwnershipConditionDetails,\n): NftOwnershipCondition {\n  return evaluate(\n    NftOwnershipConditionSchema.superRefine(refineNftOwnershipCondition).safeParse({\n      type: ConditionType.NFT_OWNERSHIP,\n      contractType: NftContractType.ERC1155,\n      ...input,\n    }),\n  );\n}\n\nexport type ProfileOwnershipConditionDetails = {\n  profileId: string;\n};\n/**\n * Creates a Lens Profile ownership condition.\n *\n * @category Helpers\n */\nexport function profileOwnershipCondition(\n  input: ProfileOwnershipConditionDetails,\n): ProfileOwnershipCondition {\n  return evaluate(\n    ProfileOwnershipConditionSchema.safeParse({\n      type: ConditionType.PROFILE_OWNERSHIP,\n      ...input,\n    }),\n  );\n}\n\nexport type FollowConditionDetails = {\n  follow: string;\n};\n/**\n * Creates a follow Lens Profile condition.\n *\n * @category Helpers\n */\nexport function followCondition(input: FollowConditionDetails): FollowCondition {\n  return evaluate(\n    FollowConditionSchema.safeParse({\n      type: ConditionType.FOLLOW,\n      ...input,\n    }),\n  );\n}\n\nexport type AdvancedContractConditionDetails = {\n  /**\n   * The contract information, including the chain id and the EVM address.\n   */\n  contract: NetworkAddressDetails;\n\n  /**\n   * The function name to call. Has to be exactly the same as in the ABI.\n   */\n  functionName: string;\n\n  /**\n   * The function ABI. Has to be in a human-readable string format, which you can convert using the ethers library.\n   * See here for more info https://docs.ethers.io/v5/api/utils/abi/fragments/#human-readable-abi\n   */\n  abi: string;\n\n  /**\n   * The parameters to pass to the function. Has to be matching the arguments described in the ABI.\n   * In case of tuples and arrays, you have to pass the values as a stringified JSON array.\n   */\n  params: string[];\n\n  /**\n   * The comparison operator to use to compare the result of the function call. In case of integer outputs\n   * you can use any comparison operator. In case of boolean outputs, you can only use EQUAL and NOT_EQUAL.\n   */\n  comparison: ConditionComparisonOperator;\n\n  /**\n   * The value to compare the result of the function call against. Can be a boolean or a BigNumber in string format.\n   */\n  value: string;\n};\n\n/**\n * Creates an arbitrary on-chain condition based on the return value\n * of a given contract view function.\n *\n * @category Helpers\n * @experimental This feature is experimental and might change in the future.\n */\nexport function advancedContractCondition(\n  input: AdvancedContractConditionDetails,\n): AdvancedContractCondition {\n  return evaluate(\n    AdvancedContractConditionSchema.safeParse({\n      type: ConditionType.ADVANCED_CONTRACT,\n      ...input,\n    }),\n  );\n}\n\n/**\n * Creates an AND condition between two or more conditions.\n *\n * @category Helpers\n */\nexport function andCondition<T extends SimpleCondition[]>(criteria: T): AndCondition<T[number]> {\n  return evaluate(\n    AndConditionSchema.safeParse({\n      type: ConditionType.AND,\n      criteria,\n    }),\n  );\n}\n\n/**\n * Creates an OR condition between two or more conditions.\n *\n * @category Helpers\n */\nexport function orCondition<T extends SimpleCondition[]>(criteria: T): OrCondition<T[number]> {\n  return evaluate(\n    OrConditionSchema.safeParse({\n      type: ConditionType.OR,\n      criteria,\n    }),\n  );\n}\n\n/**\n * Creates the access condition specification for a given publication.\n *\n * @internal\n */\nexport function accessCondition(criteria: AnyCondition[]): AccessCondition {\n  return evaluate(\n    AccessConditionSchema.safeParse({\n      type: ConditionType.OR,\n      criteria,\n    }),\n  );\n}\n","import { v4 } from 'uuid';\n\nimport { evaluate } from './ValidationError';\nimport { RecursiveUnbrand } from './utils';\nimport {\n  MirrorMetadata,\n  MirrorMetadataSchema,\n  MirrorSchemaId,\n  MirrorMetadataDetails,\n} from '../publication';\nimport { Prettify } from '../utils.js';\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype MirrorDetails = Prettify<RecursiveUnbrand<Omit<MirrorMetadataDetails, 'id'>>>;\n/**\n * All {@link MirrorMetadataDetails} fields with:\n * - `id` defaults to a UUID\n */\nexport type MirrorOptions = MirrorDetails & {\n  /**\n   * A unique identifier that in storages like IPFS ensures the uniqueness of the metadata URI.\n   *\n   * @defaultValue a UUID\n   */\n  id?: string;\n};\n/**\n * Creates a valid MirrorMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = mirror({\n *   appId: 'com.example.app',\n * });\n * ```\n */\nexport function mirror({ id = v4(), ...others }: MirrorOptions): MirrorMetadata {\n  return evaluate(\n    MirrorMetadataSchema.safeParse({\n      $schema: MirrorSchemaId.LATEST,\n      lens: {\n        id,\n        ...others,\n      },\n    }),\n  );\n}\n","import { z } from 'zod';\n\nimport { ModuleSchemaId } from './ModuleSchemaId';\nimport { MetadataAttribute, MetadataAttributeSchema } from '../MetadataAttribute';\nimport { nonEmptyStringSchema, Markdown, markdown, nonEmpty } from '../primitives';\n\nfunction isValidJsonString(str: string) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n\nfunction jsonString(description: string) {\n  return z.string({ description }).refine(isValidJsonString, { message: 'Invalid JSON string' });\n}\n\n/**\n * The metadata standard for Lens Modules\n */\nexport type ModuleMetadata = {\n  /**\n   * The name of the module.\n   */\n  name: string;\n  /**\n   * The human-friendly title for the module.\n   */\n  title: string;\n  /**\n   * Markdown formatted description of the module.\n   *\n   * It should explain what this module does, how to use it, examples just\n   * like you would if you were building an NPM package.\n   * The more detail the better to allow dApp to easily integrate it.\n   */\n  description: Markdown;\n  /**\n   * List of authors email addresses.\n   */\n  authors: string[];\n  /**\n   * The Solidity JSON ABI as JSON-string describing the initialization function calldata.\n   *\n   * This will be used to encode the calldata for the initialization function.\n   *\n   * It will also be used by the consumers of this module to decode the initialization\n   * calldata so to infer the initialization criteria.\n   */\n  initializeCalldataABI: string;\n  /**\n   * The Solidity JSON ABI as JSON-string describing the initialization result data.\n   *\n   * This will be used by the consumers of this module to decode\n   * the result data from the initialization function so to infer the\n   * initialization result state.\n   */\n  initializeResultDataABI?: string;\n  /**\n   * The Solidity JSON ABI as JSON-string describing the process function calldata.\n   *\n   * This will be used to encode the calldata for the process function.\n   *\n   * Some modules might non need to return any initialization result data.\n   */\n  processCalldataABI: string;\n  /**\n   * An arbitrary bag of attributes you wish to add to the metadata.\n   */\n  attributes: MetadataAttribute[];\n  /**\n   * The schema ID.\n   */\n  $schema: ModuleSchemaId.LATEST;\n};\n\nexport const ModuleMetadataSchema: z.ZodType<ModuleMetadata, z.ZodTypeDef, object> = z.object({\n  name: nonEmpty(z.string().max(200)).describe('The name of the module.'),\n  title: nonEmptyStringSchema('The human-friendly title for the module.'),\n  description: markdown(nonEmptyStringSchema('Markdown formatted description of the module.')),\n  authors: z\n    .array(z.string().email('Authors list should only contain valid emails'))\n    .min(1, 'You must supply at least one author')\n    .describe('List of authors email addresses.'),\n  initializeCalldataABI: jsonString(\n    'The Solidity JSON ABI as JSON-string describing the initialization function calldata.',\n  ),\n  initializeResultDataABI: jsonString(\n    'The Solidity JSON ABI as JSON-string describing the initialization result data.',\n  ).optional(),\n  processCalldataABI: jsonString(\n    'The Solidity JSON ABI as JSON-string describing the process function calldata.',\n  ),\n  attributes: z.array(MetadataAttributeSchema).describe('An arbitrary bag of attributes.'),\n  $schema: z.literal(ModuleSchemaId.LATEST),\n});\n","import { SchemasRoot } from '../constants';\n\nexport enum ModuleSchemaId {\n  LATEST = `${SchemasRoot}/modules/1.0.0.json`,\n}\n","import { evaluate } from './ValidationError';\nimport { RecursiveUnbrand } from './utils';\nimport { MetadataAttribute } from '../MetadataAttribute';\nimport { ModuleMetadata, ModuleMetadataSchema, ModuleSchemaId } from '../module';\nimport { Prettify } from '../utils';\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype ModuleDetails = Prettify<RecursiveUnbrand<Omit<ModuleMetadata, '$schema'>>>;\n/**\n * All {@link ModuleMetadata} fields without `$schema` a with:\n * - `attributes` defaults to an empty array\n */\nexport type ModuleOptions = ModuleDetails & {\n  /**\n   * An arbitrary bag of attributes you wish to add to the metadata.\n   */\n  attributes?: MetadataAttribute[];\n};\n\n/**\n * Creates a valid ModuleMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = module({\n *   name: 'My Open Action',\n *   title: 'This is my Open Action',\n *   description: 'Get ready for the future of social interaction!',\n *   authors: ['awesome-dev@lens.xyz'],\n *   initializeCalldataABI: JSON.stringify([\n *     {\n *       type: 'address',\n *       name: 'address',\n *     },\n *     {\n *       type: 'uint256',\n *       name: 'price',\n *     },\n *   ]),\n *   processCalldataABI: JSON.stringify([\n *     {\n *       type: 'address',\n *       name: 'collector',\n *     },\n *   ]),\n * });\n * ```\n */\nexport function module({ attributes = [], ...others }: ModuleOptions): ModuleMetadata {\n  return evaluate(\n    ModuleMetadataSchema.safeParse({\n      $schema: ModuleSchemaId.LATEST,\n      attributes,\n      ...others,\n    }),\n  );\n}\n","import { v4 } from 'uuid';\n\nimport { evaluate } from './ValidationError';\nimport { RecursiveUnbrand } from './utils';\nimport {\n  ProfileMetadata,\n  ProfileMetadataDetails,\n  ProfileMetadataSchema,\n  ProfileSchemaId,\n} from '../profile';\nimport { Prettify } from '../utils.js';\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype ProfileDetails = Prettify<RecursiveUnbrand<Omit<ProfileMetadataDetails, 'id'>>>;\n/**\n * All {@link ProfileMetadataDetails} fields with:\n */\nexport type ProfileOptions = ProfileDetails & {\n  /**\n   * A unique identifier that in storages like IPFS ensures the uniqueness of the metadata URI.\n   *\n   * @defaultValue a UUID\n   */\n  id?: string;\n};\n/**\n * Creates a valid ProfileMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * Global profile (no `appId`):\n * ```ts\n * const metadata = profile({\n *   name: 'John Doe',\n *   bio: `\n *   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris.\n *\n *   - Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n *   - Donec a diam lectus.\n *   `,\n * });\n * ```\n *\n * @example\n * App specific profile (with `appId`):\n * ```ts\n * const metadata = profile({\n *   appId: 'com.example.app',\n *   name: 'John Doe',\n * });\n * ```\n *\n * @example\n * With attributes:\n * ```ts\n * const metadata = profile({\n *   name: 'John Doe',\n *   picture: 'https://example.com/picture.png',\n *   attributes: [\n *     {\n *       key: 'twitter',\n *       type: MetadataAttributeType.STRING,\n *       value: 'https://twitter.com/johndoe',\n *     },\n *     {\n *       key: 'dob',\n *       type: MetadataAttributeType.DATE,\n *       value: '1990-01-01T00:00:00Z',\n *     },\n *     {\n *       key: 'enabled',\n *       type: MetadataAttributeType.BOOLEAN,\n *       value: 'true',\n *     },\n *     {\n *       key: 'height',\n *       type: MetadataAttributeType.NUMBER,\n *       value: '1.8',\n *     },\n *     {\n *       key: 'settings',\n *       type: MetadataAttributeType.JSON,\n *       value: '{\"theme\": \"dark\"}',\n *     },\n *   ],\n * });\n * ```\n */\nexport function profile({ id = v4(), ...others }: ProfileOptions): ProfileMetadata {\n  return evaluate(\n    ProfileMetadataSchema.safeParse({\n      $schema: ProfileSchemaId.LATEST,\n      lens: {\n        id,\n        ...others,\n      },\n    }),\n  );\n}\n","import { z } from 'zod';\n\nimport { ProfileSchemaId } from './ProfileSchemaId.js';\nimport { MetadataAttribute, MetadataAttributeSchema } from '../MetadataAttribute.js';\nimport {\n  AppId,\n  AppIdSchema,\n  Markdown,\n  Signature,\n  SignatureSchema,\n  URI,\n  markdown,\n  nonEmptyStringSchema,\n  uriSchema,\n} from '../primitives.js';\n\nexport type ProfileMetadataDetails = {\n  /**\n   * A unique identifier that in storages like IPFS ensures the uniqueness of the metadata URI. Use a UUID if unsure.\n   */\n  id: string;\n  /**\n   * The App Id that this Profile details are relevant for.\n   *\n   * If omitted the data is considered to be the global Profile data.\n   */\n  appId?: AppId;\n  /**\n   * The profile display name.\n   */\n  name?: string;\n  /**\n   * The profile bio as markdown.\n   */\n  bio?: Markdown;\n  /**\n   * The profile picture.\n   */\n  picture?: URI;\n  /**\n   * The profile cover picture.\n   */\n  coverPicture?: URI;\n  /**\n   * A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard.\n   * Over time, common attributes will be added to the standard and their usage as arbitrary attributes will be discouraged.\n   */\n  attributes?: MetadataAttribute[];\n};\n/**\n * @internal\n */\nconst ProfileMetadataDetailsSchema: z.ZodType<ProfileMetadataDetails, z.ZodTypeDef, object> =\n  z.object(\n    {\n      id: nonEmptyStringSchema(\n        'A unique identifier that in storages like IPFS ensures the uniqueness of the metadata URI. Use a UUID if unsure.',\n      ),\n\n      name: nonEmptyStringSchema('The profile display name.').optional(),\n\n      bio: markdown(nonEmptyStringSchema('The profile bio as markdown.')).optional(),\n\n      picture: uriSchema('The profile picture.').optional(),\n\n      coverPicture: uriSchema('The profile cover picture.').optional(),\n\n      attributes: MetadataAttributeSchema.array()\n        .min(1)\n        .optional()\n        .describe(\n          'A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard. ' +\n            'Over time, common attributes will be added to the standard and their usage as arbitrary attributes will be discouraged.',\n        ),\n\n      appId: AppIdSchema.optional().describe(\n        'The App Id that this Profile data refers to. ' +\n          'If omitted the data is considered to be the global Profile data.',\n      ),\n    },\n    { description: 'The Lens specific metadata details.' },\n  );\n\n/**\n * Use this to create Profile metadata objects.\n */\nexport type ProfileMetadata = {\n  /**\n   * The schema id.\n   */\n  $schema: ProfileSchemaId.LATEST;\n  /**\n   * The metadata details.\n   */\n  lens: ProfileMetadataDetails;\n  /**\n   * A cryptographic signature of the `lens` data.\n   *\n   * @experimental DO NOT use yet\n   */\n  signature?: Signature;\n};\n\n/**\n * Profile Metadata schema.\n *\n * @category Parse\n *\n * @example\n * with `parse`:\n * ```ts\n * ProfileMetadataSchema.parse(valid); // => ProfileMetadata\n *\n * ProfileMetadataSchema.parse(invalid); // => throws ZodError\n * ```\n *\n * @example\n * with `safeParse`:\n * ```ts\n * ProfileMetadataSchema.safeParse(valid);\n * // => { success: true, data: ProfileMetadata }\n *\n * ProfileMetadataSchema.safeParse(invalid);\n * // => { success: false, error: ZodError }\n * ```\n */\nexport const ProfileMetadataSchema: z.ZodType<ProfileMetadata, z.ZodTypeDef, object> = z.object({\n  $schema: z.literal(ProfileSchemaId.LATEST),\n  lens: ProfileMetadataDetailsSchema,\n  signature: SignatureSchema.optional(),\n});\n","import { SchemasRoot } from '../constants.js';\n\nexport enum ProfileSchemaId {\n  LATEST = `${SchemasRoot}/profile/2.0.0.json`,\n}\n","import { v4 } from 'uuid';\n\nimport { evaluate } from './ValidationError';\nimport { RecursiveUnbrand, InputForPublicationMetadataDetails } from './utils';\nimport { MarketplaceMetadata } from '../marketplace';\nimport {\n  ThreeDMetadata,\n  ThreeDSchema,\n  AudioMetadata,\n  AudioSchema,\n  CheckingInMetadata,\n  CheckingInSchema,\n  EmbedMetadata,\n  EmbedSchema,\n  EventMetadata,\n  EventSchema,\n  ImageMetadata,\n  ImageSchema,\n  LinkMetadata,\n  LinkSchema,\n  LiveStreamMetadata,\n  LiveStreamSchema,\n  MintMetadata,\n  MintSchema,\n  PublicationMainFocus,\n  PublicationSchemaId,\n  SpaceMetadata,\n  SpaceSchema,\n  StoryMetadata,\n  StorySchema,\n  TextOnlyMetadata,\n  TextOnlySchema,\n  TransactionMetadata,\n  TransactionSchema,\n  VideoMetadata,\n  VideoSchema,\n  ArticleMetadataDetails,\n  AudioMetadataDetails,\n  CheckingInMetadataDetails,\n  EmbedMetadataDetails,\n  EventMetadataDetails,\n  ImageMetadataDetails,\n  LinkMetadataDetails,\n  LiveStreamMetadataDetails,\n  MintMetadataDetails,\n  SpaceMetadataDetails,\n  StoryMetadataDetails,\n  TextOnlyMetadataDetails,\n  ThreeDMetadataDetails,\n  TransactionMetadataDetails,\n  VideoMetadataDetails,\n  ArticleMetadata,\n  ArticleSchema,\n} from '../publication';\n\n/**\n * The default locale used by the builder helpers.\n */\nexport const DEFAULT_LOCALE = 'en';\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docsRemarks MUST stay very @private to produce usable docs\n */\ntype MarketplaceDetails = RecursiveUnbrand<MarketplaceMetadata>;\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docsRemarks MUST stay very @private to produce usable docs\n */\ntype ArticleDetails = InputForPublicationMetadataDetails<ArticleMetadataDetails>;\n/**\n * All {@link ArticleMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.ARTICLE_LATEST`\n */\nexport type ArticleOptions = ArticleDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid ArticleMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = article({\n *   title: 'Great Question'\n *   content: `\n *     ## Heading\n *\n *     Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris.\n *\n *     ## Question\n *\n *     What is the answer to life, the universe and everything?\n *\n *     ## Answer\n *\n *     42\n *\n *     ![The answer](https://example.com/answer.png)\n *   `,\n *   tags: ['question', '42'],\n * });\n * ```\n */\nexport function article({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: ArticleOptions): ArticleMetadata {\n  return evaluate(\n    ArticleSchema.safeParse({\n      $schema: PublicationSchemaId.ARTICLE_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.ARTICLE,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docsRemarks MUST stay very @private to produce usable docs\n */\ntype AudioDetails = InputForPublicationMetadataDetails<AudioMetadataDetails>;\n/**\n * All {@link AudioMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.AUDIO_LATEST`\n */\nexport type AudioOptions = AudioDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid AudioMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * Single track:\n * ```ts\n * const metadata = audio({\n *   title: 'Great song!',\n *   audio: {\n *     item: 'https://example.com/song.mp3',\n *     type: MediaAudioMimeType.MP3,\n *     artist: 'John Doe',\n *     cover: 'https://example.com/cover.png',\n *   },\n * });\n * ```\n *\n * @example\n * Album:\n * ```ts\n * const metadata = audio({\n *   title: 'Great song!',\n *   audio: {\n *     item: 'https://example.com/sample.mp3',\n *     type: MediaAudioMimeType.MP3,\n *     duration: 60,\n *     artist: 'John Doe',\n *     cover: 'https://example.com/cover.png',\n *   },\n *   attachments: [\n *     {\n *       item: 'https://example.com/song-1.mp3',\n *       type: MediaAudioMimeType.MP3,\n *       duration: 234,\n *     },\n *     {\n *       item: 'https://example.com/song-2.mp3',\n *       type: MediaAudioMimeType.MP3,\n *       duration: 345,\n *     },\n *   ],\n * });\n * ```\n */\nexport function audio({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: AudioOptions): AudioMetadata {\n  return evaluate(\n    AudioSchema.safeParse({\n      $schema: PublicationSchemaId.AUDIO_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.AUDIO,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docsRemarks MUST stay very @private to produce usable docs\n */\ntype CheckingInDetails = InputForPublicationMetadataDetails<CheckingInMetadataDetails>;\n/**\n * All {@link CheckingInMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.CHECKING_IN_LATEST`\n */\nexport type CheckingInOptions = CheckingInDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid CheckingInMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * With GPS coordinates:\n * ```ts\n * const metadata = checkingIn({\n *   location: 'The Moon',\n *   position: geoUri({\n *     lat: 40.6892,\n *     lng: -74.0444,\n *   }),\n * });\n * ```\n * See {@link geoUri} for more details.\n *\n * @example\n * With a physical address:\n * ```ts\n * const metadata = checkingIn({\n *   location: 'The Moon',\n *   address: {\n *     streetAddress: '1st Street',\n *     locality: 'New York',\n *     region: 'NY',\n *     postalCode: '10001',\n *     country: 'US',\n *   },\n * });\n * ```\n */\nexport function checkingIn({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: CheckingInOptions): CheckingInMetadata {\n  return evaluate(\n    CheckingInSchema.safeParse({\n      $schema: PublicationSchemaId.CHECKING_IN_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.CHECKING_IN,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype EmbedDetails = InputForPublicationMetadataDetails<EmbedMetadataDetails>;\n/**\n * All {@link EmbedMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.EMBED_LATEST`\n */\nexport type EmbedOptions = EmbedDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid EmbedMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = embed({\n *   embed: 'https://example.com/embed.html',\n * });\n * ```\n */\nexport function embed({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: EmbedOptions): EmbedMetadata {\n  return evaluate(\n    EmbedSchema.safeParse({\n      $schema: PublicationSchemaId.EMBED_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.EMBED,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype EventDetails = InputForPublicationMetadataDetails<EventMetadataDetails>;\n/**\n * All {@link EventMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.EVENT_LATEST`\n */\nexport type EventOptions = EventDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid EventMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * With GPS coordinates:\n * ```ts\n * const metadata = event({\n *   location: 'The Moon',\n *   position: geoUri({\n *     lat: 40.6892,\n *     lng: -74.0444,\n *   }),\n *   startsAt: '2028-10-01T00:00:00Z',\n *   endsAt: '2028-10-01T01:00:00Z',\n *   links: ['https://example.com/tickets.html'],\n * });\n * ```\n *\n * @example\n * With a physical address:\n * ```ts\n * const metadata = event({\n *   location: 'The Moon',\n *   address: {\n *     streetAddress: '1st Street',\n *     locality: 'New York',\n *     region: 'NY',\n *     postalCode: '10001',\n *     country: 'US',\n *   },\n *   startsAt: '2028-10-01T00:00:00Z',\n *   endsAt: '2028-10-01T01:00:00Z',\n * });\n * ```\n */\nexport function event({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: EventOptions): EventMetadata {\n  return evaluate(\n    EventSchema.safeParse({\n      $schema: PublicationSchemaId.EVENT_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.EVENT,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype ImageDetails = InputForPublicationMetadataDetails<ImageMetadataDetails>;\n/**\n * All {@link ImageMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.IMAGE_LATEST`\n */\nexport type ImageOptions = ImageDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid ImageMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * Single image:\n *\n * ```ts\n * const metadata = image({\n *   title: 'Touch grass',\n *   image: {\n *     item: 'https://example.com/image.png',\n *     type: MediaImageMimeType.PNG,\n *     altTag: 'Me touching grass',\n *     license: MetadataLicenseType.CCO,\n *   },\n * });\n * ```\n *\n * @example\n * A gallery:\n * ```ts\n * const metadata = image({\n *   title: 'Touch grass',\n *   image: {\n *     item: 'https://example.com/cover.png',\n *     type: MediaImageMimeType.PNG,\n *     altTag: 'A collage of me touching grass',\n *     license: MetadataLicenseType.CCO,\n *   },\n *   attachments: [\n *     {\n *       item: 'https://example.com/image-1.png',\n *       type: MediaImageMimeType.PNG,\n *       license: MetadataLicenseType.CC_BY_NC,\n *       altTag: 'Me touching a tree',\n *     },\n *     {\n *       item: 'https://example.com/image-2.png',\n *       type: MediaImageMimeType.PNG,\n *       license: MetadataLicenseType.CC_BY_NC,\n *       altTag: 'The tree touching me',\n *     },\n *   ],\n * });\n * ```\n */\nexport function image({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: ImageOptions): ImageMetadata {\n  return evaluate(\n    ImageSchema.safeParse({\n      $schema: PublicationSchemaId.IMAGE_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.IMAGE,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype LinkDetails = InputForPublicationMetadataDetails<LinkMetadataDetails>;\n/**\n * All {@link LinkMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.LINK_LATEST`\n */\nexport type LinkOptions = LinkDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid LinkMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = link({\n *   sharingLink: 'https://example.com/embed.html',\n *   content: 'Check out this cool website!',\n * });\n * ```\n */\nexport function link({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: LinkOptions): LinkMetadata {\n  return evaluate(\n    LinkSchema.safeParse({\n      $schema: PublicationSchemaId.LINK_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.LINK,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype LiveStreamDetails = InputForPublicationMetadataDetails<LiveStreamMetadataDetails>;\n/**\n * All {@link LiveStreamMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.LIVESTREAM_LATEST`\n */\nexport type LiveStreamOptions = LiveStreamDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid LivestreamMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = liveStream({\n *   title: 'Live stream #1',\n *   liveUrl: 'https://example.com/live.html',\n *   playbackUrl: 'https://example.com/playback.html',\n *   startsAt: '2028-10-01T00:00:00Z',\n * });\n * ```\n */\nexport function liveStream({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: LiveStreamOptions): LiveStreamMetadata {\n  return evaluate(\n    LiveStreamSchema.safeParse({\n      $schema: PublicationSchemaId.LIVESTREAM_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.LIVESTREAM,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype MintDetails = InputForPublicationMetadataDetails<MintMetadataDetails>;\n/**\n * All {@link MintMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.MINT_LATEST`\n */\nexport type MintOptions = MintDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid MintMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = mint({\n *   content: 'Check out this NFT!',\n *   mintLink:\n *     'https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/1234567890',\n * });\n * ```\n */\nexport function mint({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: MintOptions): MintMetadata {\n  return evaluate(\n    MintSchema.safeParse({\n      $schema: PublicationSchemaId.MINT_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.MINT,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype SpaceDetails = InputForPublicationMetadataDetails<SpaceMetadataDetails>;\n/**\n * All {@link SpaceMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.SPACE_LATEST`\n */\nexport type SpaceOptions = SpaceDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid SpaceMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = space({\n *   title: 'Space #1',\n *   link: 'https://example.com/space.html',\n *   startsAt: '2028-10-01T00:00:00Z',\n * });\n * ```\n */\nexport function space({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: SpaceOptions): SpaceMetadata {\n  return evaluate(\n    SpaceSchema.safeParse({\n      $schema: PublicationSchemaId.SPACE_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.SPACE,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype StoryDetails = InputForPublicationMetadataDetails<StoryMetadataDetails>;\n/**\n * All {@link StoryMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.STORY_LATEST`\n */\nexport type StoryOptions = StoryDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid StoryMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = story({\n *   asset: {\n *     item: 'https://example.com/story.mp4',\n *     type: MediaVideoMimeType.MP4,\n *     cover: 'https://example.com/thumbnail.png',\n *     duration: 123,\n *     altTag: 'The story of my life',\n *   },\n * });\n * ```\n */\nexport function story({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: StoryOptions): StoryMetadata {\n  return evaluate(\n    StorySchema.safeParse({\n      $schema: PublicationSchemaId.STORY_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.STORY,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype TextOnlyDetails = InputForPublicationMetadataDetails<TextOnlyMetadataDetails>;\n/**\n * All {@link TextOnlyMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.TEXT_ONLY_LATEST`\n */\nexport type TextOnlyOptions = TextOnlyDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid TextOnlyMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = textOnly({\n *   content: `Nice question!`,\n * });\n * ```\n */\nexport function textOnly({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: TextOnlyOptions): TextOnlyMetadata {\n  return evaluate(\n    TextOnlySchema.safeParse({\n      $schema: PublicationSchemaId.TEXT_ONLY_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.TEXT_ONLY,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype ThreeDDetails = InputForPublicationMetadataDetails<ThreeDMetadataDetails>;\n/**\n * All {@link ThreeDMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.THREE_D_LATEST`\n */\nexport type ThreeDOptions = ThreeDDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid ThreeDMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = threeD({\n *   content: 'Check out this 3D model!',\n *   assets: [\n *     {\n *       format: ThreeDFormat.VRM,\n *       playerUrl: 'https://example.com/player.html',\n *       uri: 'https://example.com/model.zip',\n *       zipPath: 'foo/model.vrm',\n *     },\n *   ],\n *   tags: ['3d', 'vrm'],\n * });\n * ```\n */\nexport function threeD({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: ThreeDOptions): ThreeDMetadata {\n  return evaluate(\n    ThreeDSchema.safeParse({\n      $schema: PublicationSchemaId.THREE_D_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.THREE_D,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype TransactionDetails = InputForPublicationMetadataDetails<TransactionMetadataDetails>;\n/**\n * All {@link TransactionMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.TRANSACTION_LATEST`\n */\nexport type TransactionOptions = TransactionDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid TransactionMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = transaction({\n *   chainId: 1,\n *   txHash: '0x1234567890',\n *   content: 'Check out this transaction!',\n *   type: MetadataTransactionType.ERC20,\n * });\n * ```\n */\nexport function transaction({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: TransactionOptions): TransactionMetadata {\n  return evaluate(\n    TransactionSchema.safeParse({\n      $schema: PublicationSchemaId.TRANSACTION_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.TRANSACTION,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * @private\n * @privateRemarks MUST stay very @private to produce usable docs\n */\ntype VideoDetails = InputForPublicationMetadataDetails<VideoMetadataDetails>;\n/**\n * All {@link VideoMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.VIDEO_LATEST`\n */\nexport type VideoOptions = VideoDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid VideoMetadata.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * Single video:\n * ```ts\n * const metadata = video({\n *   title: 'Great video!',\n *   video: {\n *     item: 'https://example.com/video.mp4',\n *     type: MediaVideoMimeType.MP4,\n *     cover: 'https://example.com/thumbnail.png',\n *     duration: 123,\n *     altTag: 'The video of my life',\n *     license: MetadataLicenseType.CCO,\n *   },\n *   content: `\n *   In this video I will show you how to make a great video.\n *\n *   And maybe I will show you how to make a great video about making a great video.\n *   `\n * });\n * ```\n *\n * @example\n * Video with attachments:\n * ```ts\n * const metadata = video({\n *   title: 'Great video!',\n *   video: {\n *     item: 'https://example.com/video.mp4',\n *     type: MediaVideoMimeType.MP4,\n *     cover: 'https://example.com/thumbnail.png',\n *     duration: 123,\n *     altTag: 'The video of my life',\n *     license: MetadataLicenseType.CCO,\n *   },\n *   attachments: [\n *     {\n *       item: 'https://example.com/soundtrack.mp3',\n *       type: MediaAudioMimeType.MP3,\n *       license: MetadataLicenseType.CCO,\n *     }\n *   ]\n * });\n * ```\n */\nexport function video({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: VideoOptions): VideoMetadata {\n  return evaluate(\n    VideoSchema.safeParse({\n      $schema: PublicationSchemaId.VIDEO_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.VIDEO,\n        ...others,\n      },\n    }),\n  );\n}\n\n/**\n * All {@link VideoMetadataDetails} fields with:\n * - `id` defaults to a UUID\n * - `locale` defaults to `en`\n * - `mainContentFocus` automatically set to `PublicationSchemaId.SHORT_VIDEO`\n */\nexport type ShortVideoOptions = VideoDetails & {\n  /**\n   * All the {@link MarketplaceMetadata} fields.\n   */\n  marketplace?: MarketplaceDetails;\n};\n/**\n * Creates a valid VideoMetadata for a short.\n *\n * @category Compose\n * @param input - Use your IDE suggestions for an enhanced development experience\n *\n * @example\n * ```ts\n * const metadata = video({\n *   title: 'Great video!',\n *   video: {\n *     item: 'https://example.com/video.mp4',\n *     type: MediaVideoMimeType.MP4,\n *     cover: 'https://example.com/thumbnail.png',\n *     duration: 123,\n *     altTag: 'The video of my life',\n *     license: MetadataLicenseType.CCO,\n *   }\n * });\n * ```\n */\nexport function shortVideo({\n  marketplace,\n  locale = DEFAULT_LOCALE,\n  id = v4(),\n  ...others\n}: ShortVideoOptions): VideoMetadata {\n  return evaluate(\n    VideoSchema.safeParse({\n      $schema: PublicationSchemaId.VIDEO_LATEST,\n      ...marketplace,\n      lens: {\n        id,\n        locale,\n        mainContentFocus: PublicationMainFocus.SHORT_VIDEO,\n        ...others,\n      },\n    }),\n  );\n}\n","import { ProfileMetadata } from './profile';\nimport { MirrorMetadata, PublicationMetadata } from './publication';\nimport { invariant } from './utils';\n\nconst schemaVersionRegex = /(\\d+\\.\\d+\\.\\d+)/;\n/**\n * Helper to extracts the version from the schema id of a metadata object.\n *\n * Most users will not need to use this function directly.\n *\n * @category Helpers\n * @experimental This function is experimental and may change or be removed in future versions.\n *\n * @example\n * Extract the version of a profile metadata object:\n * ```ts\n * const metadata = await ProfileMetadataSchema.parse(valid);\n *\n * const version = extractVersion(metadata); // '2.0.0'\n * ```\n *\n * @example\n * Extract the version of a mirror metadata object:\n * ```ts\n * const metadata = await MirrorMetadataSchema.parse(valid);\n *\n * const version = extractVersion(metadata); // '1.0.0'\n * ```\n *\n * @example\n * Extract the version of a publication metadata object:\n * ```ts\n * const metadata = await PublicationMetadataSchema.parse(valid);\n *\n * const version = extractVersion(metadata); // '3.0.0'\n * ```\n */\n\nexport function extractVersion(\n  metadata: MirrorMetadata | ProfileMetadata | PublicationMetadata,\n): string {\n  const result = schemaVersionRegex.exec(metadata.$schema);\n\n  invariant(result !== null, `Invalid schema id: ${metadata.$schema}`);\n  return result[0];\n}\n"]}