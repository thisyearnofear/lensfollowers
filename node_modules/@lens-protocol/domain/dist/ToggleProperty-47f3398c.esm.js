import { _ as _asyncToGenerator, a as _regeneratorRuntime } from './asyncToGenerator-0859ab5c.esm.js';
import { a as _createClass, _ as _classCallCheck } from './createClass-2012b414.esm.js';

var ToggleProperty = /*#__PURE__*/function () {
  function ToggleProperty(gateway, presenter) {
    _classCallCheck(this, ToggleProperty);
    this.gateway = gateway;
    this.presenter = presenter;
  }
  _createClass(ToggleProperty, [{
    key: "on",
    value: function () {
      var _on = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.presenter.on(request);
            case 2:
              _context.prev = 2;
              _context.next = 5;
              return this.gateway.on(request);
            case 5:
              _context.next = 12;
              break;
            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](2);
              _context.next = 11;
              return this.presenter.off(request);
            case 11:
              throw _context.t0;
            case 12:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[2, 7]]);
      }));
      function on(_x) {
        return _on.apply(this, arguments);
      }
      return on;
    }()
  }, {
    key: "off",
    value: function () {
      var _off = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.presenter.off(request);
            case 2:
              _context2.prev = 2;
              _context2.next = 5;
              return this.gateway.off(request);
            case 5:
              _context2.next = 12;
              break;
            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](2);
              _context2.next = 11;
              return this.presenter.on(request);
            case 11:
              throw _context2.t0;
            case 12:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[2, 7]]);
      }));
      function off(_x2) {
        return _off.apply(this, arguments);
      }
      return off;
    }()
  }]);
  return ToggleProperty;
}();

export { ToggleProperty as T };
